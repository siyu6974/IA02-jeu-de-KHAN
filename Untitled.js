/*! jQuery v2.1.1 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */
!function(a, b) {
    "object" == typeof module && "object" == typeof module.exports ? module.exports = a.document ? b(a, !0) : function(a) {
        if (!a.document)
            throw new Error("jQuery requires a window with a document");
        return b(a)
    } : b(a)
}("undefined" != typeof window ? window : this, function(a, b) {
    var c = [], d = c.slice, e = c.concat, f = c.push, g = c.indexOf, h = {}, i = h.toString, j = h.hasOwnProperty, k = {}, l = a.document, m = "2.1.1", n = function(a, b) {
        return new n.fn.init(a, b)
    }, o = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, p = /^-ms-/, q = /-([\da-z])/gi, r = function(a, b) {
        return b.toUpperCase()
    };
    n.fn = n.prototype = {
        jquery: m,
        constructor: n,
        selector: "",
        length: 0,
        toArray: function() {
            return d.call(this)
        },
        get: function(a) {
            return null != a ? 0 > a ? this[a + this.length] : this[a] : d.call(this)
        },
        pushStack: function(a) {
            var b = n.merge(this.constructor(), a);
            return b.prevObject = this, b.context = this.context, b
        },
        each: function(a, b) {
            return n.each(this, a, b)
        },
        map: function(a) {
            return this.pushStack(n.map(this, function(b, c) {
                return a.call(b, c, b)
            }))
        },
        slice: function() {
            return this.pushStack(d.apply(this, arguments))
        },
        first: function() {
            return this.eq(0)
        },
        last: function() {
            return this.eq( - 1)
        },
        eq: function(a) {
            var b = this.length, c =+ a + (0 > a ? b : 0);
            return this.pushStack(c >= 0 && b > c ? [this[c]] : [])
        },
        end: function() {
            return this.prevObject || this.constructor(null)
        },
        push: f,
        sort: c.sort,
        splice: c.splice
    }, n.extend = n.fn.extend = function() {
        var a, b, c, d, e, f, g = arguments[0] || {}, h = 1, i = arguments.length, j=!1;
        for ("boolean" == typeof g && (j = g, g = arguments[h] || {}, h++), "object" == typeof g || n.isFunction(g) || (g = {}), h === i && (g = this, h--); i > h; h++)
            if (null != (a = arguments[h]))
                for (b in a)
                    c = g[b], d = a[b], g !== d && (j && d && (n.isPlainObject(d) || (e = n.isArray(d))) ? (e ? (e=!1, f = c && n.isArray(c) ? c : []) : f = c && n.isPlainObject(c) ? c : {}, g[b] = n.extend(j, f, d)) : void 0 !== d && (g[b] = d));
        return g
    }, n.extend({
        expando: "jQuery" + (m + Math.random()).replace(/\D/g, ""),
        isReady: !0,
        error: function(a) {
            throw new Error(a)
        },
        noop: function() {},
        isFunction: function(a) {
            return "function" === n.type(a)
        },
        isArray: Array.isArray,
        isWindow: function(a) {
            return null != a && a === a.window
        },
        isNumeric: function(a) {
            return !n.isArray(a) && a - parseFloat(a) >= 0
        },
        isPlainObject: function(a) {
            return "object" !== n.type(a) || a.nodeType || n.isWindow(a)?!1 : a.constructor&&!j.call(a.constructor.prototype, "isPrototypeOf")?!1 : !0
        },
        isEmptyObject: function(a) {
            var b;
            for (b in a)
                return !1;
            return !0
        },
        type: function(a) {
            return null == a ? a + "" : "object" == typeof a || "function" == typeof a ? h[i.call(a)] || "object" : typeof a
        },
        globalEval: function(a) {
            var b, c = eval;
            a = n.trim(a), a && (1 === a.indexOf("use strict") ? (b = l.createElement("script"), b.text = a, l.head.appendChild(b).parentNode.removeChild(b)) : c(a))
        },
        camelCase: function(a) {
            return a.replace(p, "ms-").replace(q, r)
        },
        nodeName: function(a, b) {
            return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase()
        },
        each: function(a, b, c) {
            var d, e = 0, f = a.length, g = s(a);
            if (c) {
                if (g) {
                    for (; f > e; e++)
                        if (d = b.apply(a[e], c), d===!1)
                            break
                } else
                    for (e in a)
                        if (d = b.apply(a[e], c), d===!1)
                            break
            } else if (g) {
                for (; f > e; e++)
                    if (d = b.call(a[e], e, a[e]), d===!1)
                        break
            } else
                for (e in a)
                    if (d = b.call(a[e], e, a[e]), d===!1)
                        break;
            return a
        },
        trim: function(a) {
            return null == a ? "" : (a + "").replace(o, "")
        },
        makeArray: function(a, b) {
            var c = b || [];
            return null != a && (s(Object(a)) ? n.merge(c, "string" == typeof a ? [a] : a) : f.call(c, a)), c
        },
        inArray: function(a, b, c) {
            return null == b?-1 : g.call(b, a, c)
        },
        merge: function(a, b) {
            for (var c =+ b.length, d = 0, e = a.length; c > d; d++)
                a[e++] = b[d];
            return a.length = e, a
        },
        grep: function(a, b, c) {
            for (var d, e = [], f = 0, g = a.length, h=!c; g > f; f++)
                d=!b(a[f], f), d !== h && e.push(a[f]);
            return e
        },
        map: function(a, b, c) {
            var d, f = 0, g = a.length, h = s(a), i = [];
            if (h)
                for (; g > f; f++)
                    d = b(a[f], f, c), null != d && i.push(d);
            else
                for (f in a)
                    d = b(a[f], f, c), null != d && i.push(d);
            return e.apply([], i)
        },
        guid: 1,
        proxy: function(a, b) {
            var c, e, f;
            return "string" == typeof b && (c = a[b], b = a, a = c), n.isFunction(a) ? (e = d.call(arguments, 2), f = function() {
                return a.apply(b || this, e.concat(d.call(arguments)))
            }, f.guid = a.guid = a.guid || n.guid++, f) : void 0
        },
        now: Date.now,
        support: k
    }), n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(a, b) {
        h["[object " + b + "]"] = b.toLowerCase()
    });
    function s(a) {
        var b = a.length, c = n.type(a);
        return "function" === c || n.isWindow(a)?!1 : 1 === a.nodeType && b?!0 : "array" === c || 0 === b || "number" == typeof b && b > 0 && b - 1 in a
    }
    var t = function(a) {
        var b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u = "sizzle" +- new Date, v = a.document, w = 0, x = 0, y = gb(), z = gb(), A = gb(), B = function(a, b) {
            return a === b && (l=!0), 0
        }, C = "undefined", D = 1<<31, E = {}.hasOwnProperty, F = [], G = F.pop, H = F.push, I = F.push, J = F.slice, K = F.indexOf || function(a) {
            for (var b = 0, c = this.length; c > b; b++)
                if (this[b] === a)
                    return b;
            return - 1
        }, L = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", M = "[\\x20\\t\\r\\n\\f]", N = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", O = N.replace("w", "w#"), P = "\\[" + M + "*(" + N + ")(?:" + M + "*([*^$|!~]?=)" + M + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + O + "))|)" + M + "*\\]", Q = ":(" + N + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + P + ")*)|.*)\\)|)", R = new RegExp("^" + M + "+|((?:^|[^\\\\])(?:\\\\.)*)" + M + "+$", "g"), S = new RegExp("^" + M + "*," + M + "*"), T = new RegExp("^" + M + "*([>+~]|" + M + ")" + M + "*"), U = new RegExp("=" + M + "*([^\\]'\"]*?)" + M + "*\\]", "g"), V = new RegExp(Q), W = new RegExp("^" + O + "$"), X = {
            ID: new RegExp("^#(" + N + ")"),
            CLASS: new RegExp("^\\.(" + N + ")"),
            TAG: new RegExp("^(" + N.replace("w", "w*") + ")"),
            ATTR: new RegExp("^" + P),
            PSEUDO: new RegExp("^" + Q),
            CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + M + "*(even|odd|(([+-]|)(\\d*)n|)" + M + "*(?:([+-]|)" + M + "*(\\d+)|))" + M + "*\\)|)", "i"),
            bool: new RegExp("^(?:" + L + ")$", "i"),
            needsContext: new RegExp("^" + M + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + M + "*((?:-\\d)?\\d*)" + M + "*\\)|)(?=[^-]|$)", "i")
        }, Y = /^(?:input|select|textarea|button)$/i, Z = /^h\d$/i, $ = /^[^{]+\{\s*\[native \w/, _ = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, ab = /[+~]/, bb = /'|\\/g, cb = new RegExp("\\\\([\\da-f]{1,6}" + M + "?|(" + M + ")|.)", "ig"), db = function(a, b, c) {
            var d = "0x" + b - 65536;
            return d !== d || c ? b : 0 > d ? String.fromCharCode(d + 65536) : String.fromCharCode(d>>10 | 55296, 1023 & d | 56320)
        };
        try {
            I.apply(F = J.call(v.childNodes), v.childNodes), F[v.childNodes.length].nodeType
        } catch (eb) {
            I = {
                apply: F.length ? function(a, b) {
                    H.apply(a, J.call(b))
                }
                : function(a, b) {
                    var c = a.length, d = 0;
                    while (a[c++] = b[d++]);
                    a.length = c - 1
                }
            }
        }
        function fb(a, b, d, e) {
            var f, h, j, k, l, o, r, s, w, x;
            if ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, d = d || [], !a || "string" != typeof a)
                return d;
            if (1 !== (k = b.nodeType) && 9 !== k)
                return [];
            if (p&&!e) {
                if (f = _.exec(a))
                    if (j = f[1]) {
                        if (9 === k) {
                            if (h = b.getElementById(j), !h ||!h.parentNode)
                                return d;
                                if (h.id === j)
                                    return d.push(h), d
                        } else if (b.ownerDocument && (h = b.ownerDocument.getElementById(j)) && t(b, h) && h.id === j)
                            return d.push(h), d
                    } else {
                        if (f[2])
                            return I.apply(d, b.getElementsByTagName(a)), d;
                            if ((j = f[3]) && c.getElementsByClassName && b.getElementsByClassName)
                                return I.apply(d, b.getElementsByClassName(j)), d
                    }
                if (c.qsa && (!q ||!q.test(a))) {
                    if (s = r = u, w = b, x = 9 === k && a, 1 === k && "object" !== b.nodeName.toLowerCase()) {
                        o = g(a), (r = b.getAttribute("id")) ? s = r.replace(bb, "\\$&") : b.setAttribute("id", s), s = "[id='" + s + "'] ", l = o.length;
                        while (l--)
                            o[l] = s + qb(o[l]);
                        w = ab.test(a) && ob(b.parentNode) || b, x = o.join(",")
                    }
                    if (x)
                        try {
                            return I.apply(d, w.querySelectorAll(x)), d
                    } catch (y) {} finally {
                        r || b.removeAttribute("id")
                    }
                }
            }
            return i(a.replace(R, "$1"), b, d, e)
        }
        function gb() {
            var a = [];
            function b(c, e) {
                return a.push(c + " ") > d.cacheLength && delete b[a.shift()], b[c + " "] = e
            }
            return b
        }
        function hb(a) {
            return a[u]=!0, a
        }
        function ib(a) {
            var b = n.createElement("div");
            try {
                return !!a(b)
            } catch (c) {
                return !1
            } finally {
                b.parentNode && b.parentNode.removeChild(b), b = null
            }
        }
        function jb(a, b) {
            var c = a.split("|"), e = a.length;
            while (e--)
                d.attrHandle[c[e]] = b
        }
        function kb(a, b) {
            var c = b && a, d = c && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || D) - (~a.sourceIndex || D);
            if (d)
                return d;
            if (c)
                while (c = c.nextSibling)
                    if (c === b)
                        return - 1;
            return a ? 1 : - 1
        }
        function lb(a) {
            return function(b) {
                var c = b.nodeName.toLowerCase();
                return "input" === c && b.type === a
            }
        }
        function mb(a) {
            return function(b) {
                var c = b.nodeName.toLowerCase();
                return ("input" === c || "button" === c) && b.type === a
            }
        }
        function nb(a) {
            return hb(function(b) {
                return b =+ b, hb(function(c, d) {
                    var e, f = a([], c.length, b), g = f.length;
                    while (g--)
                        c[e = f[g]] && (c[e]=!(d[e] = c[e]))
                })
            })
        }
        function ob(a) {
            return a && typeof a.getElementsByTagName !== C && a
        }
        c = fb.support = {}, f = fb.isXML = function(a) {
            var b = a && (a.ownerDocument || a).documentElement;
            return b ? "HTML" !== b.nodeName : !1
        }, m = fb.setDocument = function(a) {
            var b, e = a ? a.ownerDocument || a: v, g = e.defaultView;
            return e !== n && 9 === e.nodeType && e.documentElement ? (n = e, o = e.documentElement, p=!f(e), g && g !== g.top && (g.addEventListener ? g.addEventListener("unload", function() {
                m()
            }, !1) : g.attachEvent && g.attachEvent("onunload", function() {
                m()
            })), c.attributes = ib(function(a) {
                return a.className = "i", !a.getAttribute("className")
            }), c.getElementsByTagName = ib(function(a) {
                return a.appendChild(e.createComment("")), !a.getElementsByTagName("*").length
            }), c.getElementsByClassName = $.test(e.getElementsByClassName) && ib(function(a) {
                return a.innerHTML = "<div class='a'></div><div class='a i'></div>", a.firstChild.className = "i", 2 === a.getElementsByClassName("i").length
            }), c.getById = ib(function(a) {
                return o.appendChild(a).id = u, !e.getElementsByName ||!e.getElementsByName(u).length
            }), c.getById ? (d.find.ID = function(a, b) {
                if (typeof b.getElementById !== C && p) {
                    var c = b.getElementById(a);
                    return c && c.parentNode ? [c] : []
                }
            }, d.filter.ID = function(a) {
                var b = a.replace(cb, db);
                return function(a) {
                    return a.getAttribute("id") === b
                }
            }) : (delete d.find.ID, d.filter.ID = function(a) {
                var b = a.replace(cb, db);
                return function(a) {
                    var c = typeof a.getAttributeNode !== C && a.getAttributeNode("id");
                    return c && c.value === b
                }
            }), d.find.TAG = c.getElementsByTagName ? function(a, b) {
                return typeof b.getElementsByTagName !== C ? b.getElementsByTagName(a) : void 0
            } : function(a, b) {
                var c, d = [], e = 0, f = b.getElementsByTagName(a);
                if ("*" === a) {
                    while (c = f[e++])
                        1 === c.nodeType && d.push(c);
                    return d
                }
                return f
            }, d.find.CLASS = c.getElementsByClassName && function(a, b) {
                return typeof b.getElementsByClassName !== C && p ? b.getElementsByClassName(a) : void 0
            }, r = [], q = [], (c.qsa = $.test(e.querySelectorAll)) && (ib(function(a) {
                a.innerHTML = "<select msallowclip=''><option selected=''></option></select>", a.querySelectorAll("[msallowclip^='']").length && q.push("[*^$]=" + M + "*(?:''|\"\")"), a.querySelectorAll("[selected]").length || q.push("\\[" + M + "*(?:value|" + L + ")"), a.querySelectorAll(":checked").length || q.push(":checked")
            }), ib(function(a) {
                var b = e.createElement("input");
                b.setAttribute("type", "hidden"), a.appendChild(b).setAttribute("name", "D"), a.querySelectorAll("[name=d]").length && q.push("name" + M + "*[*^$|!~]?="), a.querySelectorAll(":enabled").length || q.push(":enabled", ":disabled"), a.querySelectorAll("*,:x"), q.push(",.*:")
            })), (c.matchesSelector = $.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && ib(function(a) {
                c.disconnectedMatch = s.call(a, "div"), s.call(a, "[s!='']:x"), r.push("!=", Q)
            }), q = q.length && new RegExp(q.join("|")), r = r.length && new RegExp(r.join("|")), b = $.test(o.compareDocumentPosition), t = b || $.test(o.contains) ? function(a, b) {
                var c = 9 === a.nodeType ? a.documentElement: a, d = b && b.parentNode;
                return a === d ||!(!d || 1 !== d.nodeType ||!(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)))
            } : function(a, b) {
                if (b)
                    while (b = b.parentNode)
                        if (b === a)
                            return !0;
                return !1
            }, B = b ? function(a, b) {
                if (a === b)
                    return l=!0, 0;
                var d=!a.compareDocumentPosition-!b.compareDocumentPosition;
                return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d ||!c.sortDetached && b.compareDocumentPosition(a) === d ? a === e || a.ownerDocument === v && t(v, a)?-1 : b === e || b.ownerDocument === v && t(v, b) ? 1 : k ? K.call(k, a) - K.call(k, b) : 0 : 4 & d?-1 : 1)
            } : function(a, b) {
                if (a === b)
                    return l=!0, 0;
                var c, d = 0, f = a.parentNode, g = b.parentNode, h = [a], i = [b];
                if (!f ||!g)
                    return a === e?-1 : b === e ? 1 : f?-1 : g ? 1 : k ? K.call(k, a) - K.call(k, b) : 0;
                if (f === g)
                    return kb(a, b);
                c = a;
                while (c = c.parentNode)
                    h.unshift(c);
                c = b;
                while (c = c.parentNode)
                    i.unshift(c);
                while (h[d] === i[d])
                    d++;
                return d ? kb(h[d], i[d]) : h[d] === v?-1 : i[d] === v ? 1 : 0
            }, e) : n
        }, fb.matches = function(a, b) {
            return fb(a, null, null, b)
        }, fb.matchesSelector = function(a, b) {
            if ((a.ownerDocument || a) !== n && m(a), b = b.replace(U, "='$1']"), !(!c.matchesSelector ||!p || r && r.test(b) || q && q.test(b)))
                try {
                    var d = s.call(a, b);
                    if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType)
                        return d
            } catch (e) {}
            return fb(b, n, null, [a]).length > 0
        }, fb.contains = function(a, b) {
            return (a.ownerDocument || a) !== n && m(a), t(a, b)
        }, fb.attr = function(a, b) {
            (a.ownerDocument || a) !== n && m(a);
            var e = d.attrHandle[b.toLowerCase()], f = e && E.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p): void 0;
            return void 0 !== f ? f : c.attributes ||!p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null
        }, fb.error = function(a) {
            throw new Error("Syntax error, unrecognized expression: " + a)
        }, fb.uniqueSort = function(a) {
            var b, d = [], e = 0, f = 0;
            if (l=!c.detectDuplicates, k=!c.sortStable && a.slice(0), a.sort(B), l) {
                while (b = a[f++])
                    b === a[f] && (e = d.push(f));
                while (e--)
                    a.splice(d[e], 1)
            }
            return k = null, a
        }, e = fb.getText = function(a) {
            var b, c = "", d = 0, f = a.nodeType;
            if (f) {
                if (1 === f || 9 === f || 11 === f) {
                    if ("string" == typeof a.textContent)
                        return a.textContent;
                    for (a = a.firstChild; a; a = a.nextSibling)
                        c += e(a)
                    } else if (3 === f || 4 === f)
                    return a.nodeValue
            } else
                while (b = a[d++])
                    c += e(b);
            return c
        }, d = fb.selectors = {
            cacheLength: 50,
            createPseudo: hb,
            match: X,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: !0
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: !0
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                ATTR: function(a) {
                    return a[1] = a[1].replace(cb, db), a[3] = (a[3] || a[4] || a[5] || "").replace(cb, db), "~=" === a[2] && (a[3] = " " + a[3] + " "), a.slice(0, 4)
                },
                CHILD: function(a) {
                    return a[1] = a[1].toLowerCase(), "nth" === a[1].slice(0, 3) ? (a[3] || fb.error(a[0]), a[4] =+ (a[4] ? a[5] + (a[6] || 1) : 2 * ("even" === a[3] || "odd" === a[3])), a[5] =+ (a[7] + a[8] || "odd" === a[3])) : a[3] && fb.error(a[0]), a
                },
                PSEUDO: function(a) {
                    var b, c=!a[6] && a[2];
                    return X.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || "" : c && V.test(c) && (b = g(c, !0)) && (b = c.indexOf(")", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3))
                }
            },
            filter: {
                TAG: function(a) {
                    var b = a.replace(cb, db).toLowerCase();
                    return "*" === a ? function() {
                        return !0
                    } : function(a) {
                        return a.nodeName && a.nodeName.toLowerCase() === b
                    }
                },
                CLASS: function(a) {
                    var b = y[a + " "];
                    return b || (b = new RegExp("(^|" + M + ")" + a + "(" + M + "|$)")) && y(a, function(a) {
                        return b.test("string" == typeof a.className && a.className || typeof a.getAttribute !== C && a.getAttribute("class") || "")
                    })
                },
                ATTR: function(a, b, c) {
                    return function(d) {
                        var e = fb.attr(d, a);
                        return null == e ? "!=" === b : b ? (e += "", "=" === b ? e === c : "!=" === b ? e !== c : "^=" === b ? c && 0 === e.indexOf(c) : "*=" === b ? c && e.indexOf(c)>-1 : "$=" === b ? c && e.slice( - c.length) === c : "~=" === b ? (" " + e + " ").indexOf(c)>-1 : "|=" === b ? e === c || e.slice(0, c.length + 1) === c + "-" : !1) : !0
                    }
                },
                CHILD: function(a, b, c, d, e) {
                    var f = "nth" !== a.slice(0, 3), g = "last" !== a.slice( - 4), h = "of-type" === b;
                    return 1 === d && 0 === e ? function(a) {
                        return !!a.parentNode
                    } : function(b, c, i) {
                        var j, k, l, m, n, o, p = f !== g ? "nextSibling": "previousSibling", q = b.parentNode, r = h && b.nodeName.toLowerCase(), s=!i&&!h;
                        if (q) {
                            if (f) {
                                while (p) {
                                    l = b;
                                    while (l = l[p])
                                        if (h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType)
                                            return !1;
                                    o = p = "only" === a&&!o && "nextSibling"
                                }
                                return !0
                            }
                            if (o = [g ? q.firstChild: q.lastChild], g && s) {
                                k = q[u] || (q[u] = {}), j = k[a] || [], n = j[0] === w && j[1], m = j[0] === w && j[2], l = n && q.childNodes[n];
                                while (l=++n && l && l[p] || (m = n = 0) || o.pop()
                                    )if (1 === l.nodeType&&++m && l === b) {
                                    k[a] = [w, n, m];
                                    break
                                }
                            } else if (s && (j = (b[u] || (b[u] = {}))[a]) && j[0] === w)
                                m = j[1];
                            else
                                while (l=++n && l && l[p] || (m = n = 0) || o.pop()
                                    )if ((h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType)&&++m && (s && ((l[u] || (l[u] = {})
                                )[a] = [w, m]), l === b))break;
                            return m -= e, m === d || m%d === 0 && m / d >= 0
                        }
                    }
                },
                PSEUDO: function(a, b) {
                    var c, e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || fb.error("unsupported pseudo: " + a);
                    return e[u] ? e(b) : e.length > 1 ? (c = [a, a, "", b], d.setFilters.hasOwnProperty(a.toLowerCase()) ? hb(function(a, c) {
                        var d, f = e(a, b), g = f.length;
                        while (g--)
                            d = K.call(a, f[g]), a[d]=!(c[d] = f[g])
                    }) : function(a) {
                        return e(a, 0, c)
                    }) : e
                }
            },
            pseudos: {
                not: hb(function(a) {
                    var b = [], c = [], d = h(a.replace(R, "$1"));
                    return d[u] ? hb(function(a, b, c, e) {
                        var f, g = d(a, null, e, []), h = a.length;
                        while (h--)(f = g[h]) && (a[h]=!(b[h] = f))
                        }) : function(a, e, f) {
                        return b[0] = a, d(b, null, f, c), !c.pop()
                    }
                }), has : hb(function(a) {
                    return function(b) {
                        return fb(a, b).length > 0
                    }
                }), contains : hb(function(a) {
                    return function(b) {
                        return (b.textContent || b.innerText || e(b)).indexOf(a)>-1
                    }
                }), lang : hb(function(a) {
                    return W.test(a || "") || fb.error("unsupported lang: " + a), a = a.replace(cb, db).toLowerCase(), function(b) {
                        var c;
                        do
                            if (c = p ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang"))
                                return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + "-");
                        while ((b = b.parentNode) && 1 === b.nodeType);
                        return !1
                    }
                }), target : function(b) {
                    var c = a.location && a.location.hash;
                    return c && c.slice(1) === b.id
                }, root: function(a) {
                    return a === o
                }, focus: function(a) {
                    return a === n.activeElement && (!n.hasFocus || n.hasFocus())&&!!(a.type || a.href||~a.tabIndex)
                }, enabled: function(a) {
                    return a.disabled===!1
                }, disabled: function(a) {
                    return a.disabled===!0
                }, checked: function(a) {
                    var b = a.nodeName.toLowerCase();
                    return "input" === b&&!!a.checked || "option" === b&&!!a.selected
                }, selected: function(a) {
                    return a.parentNode && a.parentNode.selectedIndex, a.selected===!0
                }, empty: function(a) {
                    for (a = a.firstChild; a; a = a.nextSibling)
                        if (a.nodeType < 6)
                            return !1;
                    return !0
                }, parent: function(a) {
                    return !d.pseudos.empty(a)
                }, header: function(a) {
                    return Z.test(a.nodeName)
                }, input: function(a) {
                    return Y.test(a.nodeName)
                }, button: function(a) {
                    var b = a.nodeName.toLowerCase();
                    return "input" === b && "button" === a.type || "button" === b
                }, text: function(a) {
                    var b;
                    return "input" === a.nodeName.toLowerCase() && "text" === a.type && (null == (b = a.getAttribute("type")) || "text" === b.toLowerCase())
                }, first: nb(function() {
                    return [0]
                }), last : nb(function(a, b) {
                    return [b - 1]
                }), eq : nb(function(a, b, c) {
                    return [0 > c ? c + b: c]
                }), even : nb(function(a, b) {
                    for (var c = 0; b > c; c += 2)
                        a.push(c);
                    return a
                }), odd : nb(function(a, b) {
                    for (var c = 1; b > c; c += 2)
                        a.push(c);
                    return a
                }), lt : nb(function(a, b, c) {
                    for (var d = 0 > c ? c + b : c; --d >= 0;)
                        a.push(d);
                    return a
                }), gt : nb(function(a, b, c) {
                    for (var d = 0 > c ? c + b : c; ++d < b;)
                        a.push(d);
                    return a
                })
            }
        }, d.pseudos.nth = d.pseudos.eq; for (b in{
            radio : !0, checkbox : !0, file : !0, password : !0, image : !0
        })d.pseudos[b] = lb(b);
        for (b in{
            submit: !0,
            reset: !0
        })d.pseudos[b] = mb(b);
        function pb() {}
        pb.prototype = d.filters = d.pseudos, d.setFilters = new pb, g = fb.tokenize = function(a, b) {
            var c, e, f, g, h, i, j, k = z[a + " "];
            if (k)
                return b ? 0 : k.slice(0);
            h = a, i = [], j = d.preFilter;
            while (h) {
                (!c || (e = S.exec(h))) && (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c=!1, (e = T.exec(h)) && (c = e.shift(), f.push({
                    value: c,
                    type: e[0].replace(R, " ")
                }), h = h.slice(c.length));
                for (g in d.filter)
                    !(e = X[g].exec(h)) || j[g]&&!(e = j[g](e)) || (c = e.shift(), f.push({
                        value: c,
                        type: g,
                        matches: e
                    }), h = h.slice(c.length));
                if (!c)
                    break
            }
            return b ? h.length : h ? fb.error(a) : z(a, i).slice(0)
        };
        function qb(a) {
            for (var b = 0, c = a.length, d = ""; c > b; b++)
                d += a[b].value;
            return d
        }
        function rb(a, b, c) {
            var d = b.dir, e = c && "parentNode" === d, f = x++;
            return b.first ? function(b, c, f) {
                while (b = b[d])
                    if (1 === b.nodeType || e)
                        return a(b, c, f)
            } : function(b, c, g) {
                var h, i, j = [w, f];
                if (g) {
                    while (b = b[d])
                        if ((1 === b.nodeType || e) && a(b, c, g))
                            return !0
                } else
                    while (b = b[d])
                        if (1 === b.nodeType || e) {
                            if (i = b[u] || (b[u] = {}), (h = i[d]) && h[0] === w && h[1] === f)
                                return j[2] = h[2];
                                if (i[d] = j, j[2] = a(b, c, g))
                                    return !0
                        }
            }
        }
        function sb(a) {
            return a.length > 1 ? function(b, c, d) {
                var e = a.length;
                while (e--)
                    if (!a[e](b, c, d))
                        return !1;
                return !0
            } : a[0]
        }
        function tb(a, b, c) {
            for (var d = 0, e = b.length; e > d; d++)
                fb(a, b[d], c);
            return c
        }
        function ub(a, b, c, d, e) {
            for (var f, g = [], h = 0, i = a.length, j = null != b; i > h; h++)(f = a[h])
                && (!c || c(f, d, e)) && (g.push(f), j && b.push(h));
            return g
        }
        function vb(a, b, c, d, e, f) {
            return d&&!d[u] && (d = vb(d)), e&&!e[u] && (e = vb(e, f)), hb(function(f, g, h, i) {
                var j, k, l, m = [], n = [], o = g.length, p = f || tb(b || "*", h.nodeType ? [h] : h, []), q=!a ||!f && b ? p : ub(p, m, a, h, i), r = c ? e || (f ? a : o || d) ? [] : g : q;
                if (c && c(q, r, h, i), d) {
                    j = ub(r, n), d(j, [], h, i), k = j.length;
                    while (k--)(l = j[k]) && (r[n[k]]=!(q[n[k]] = l))
                    }
                if (f) {
                    if (e || a) {
                        if (e) {
                            j = [], k = r.length;
                            while (k--)(l = r[k]) && j.push(q[k] = l);
                            e(null, r = [], j, i)
                        }
                        k = r.length;
                        while (k--)(l = r[k]) && (j = e ? K.call(f, l) : m[k])>-1 && (f[j]=!(g[j] = l))
                        }
                } else
                    r = ub(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : I.apply(g, r)
                })
        }
        function wb(a) {
            for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[" "], i = g ? 1 : 0, k = rb(function(a) {
                return a === b
            }, h, !0), l = rb(function(a) {
                return K.call(b, a)>-1
            }, h, !0), m = [function(a, c, d) {
                return !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d))
            }
            ]; f > i; i++)
                if (c = d.relative[a[i].type])
                    m = [rb(sb(m), c)];
                else {
                    if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {
                        for (e=++i; f > e; e++)
                            if (d.relative[a[e].type])
                                break;
                                return vb(i > 1 && sb(m), i > 1 && qb(a.slice(0, i - 1).concat({
                                    value: " " === a[i - 2].type ? "*": ""
                                })).replace(R, "$1"), c, e > i && wb(a.slice(i, e)), f > e && wb(a = a.slice(e)), f > e && qb(a))
                            }
                            m.push(c)
                }
            return sb(m)
        }
        function xb(a, b) {
            var c = b.length > 0, e = a.length > 0, f = function(f, g, h, i, k) {
                var l, m, o, p = 0, q = "0", r = f && [], s = [], t = j, u = f || e && d.find.TAG("*", k), v = w += null == t ? 1: Math.random() || .1, x = u.length;
                for (k && (j = g !== n && g); q !== x && null != (l = u[q]); q++) {
                    if (e && l) {
                        m = 0;
                        while (o = a[m++])
                            if (o(l, g, h)) {
                                i.push(l);
                                break
                            }
                        k && (w = v)
                    }
                    c && ((l=!o && l) && p--, f && r.push(l))
                }
                if (p += q, c && q !== p) {
                    m = 0;
                    while (o = b[m++])
                        o(r, s, g, h);
                    if (f) {
                        if (p > 0)
                            while (q--)
                                r[q] || s[q] || (s[q] = G.call(i));
                        s = ub(s)
                    }
                    I.apply(i, s), k&&!f && s.length > 0 && p + b.length > 1 && fb.uniqueSort(i)
                }
                return k && (w = v, j = t), r
            };
            return c ? hb(f) : f
        }
        return h = fb.compile = function(a, b) {
            var c, d = [], e = [], f = A[a + " "];
            if (!f) {
                b || (b = g(a)), c = b.length;
                while (c--)
                    f = wb(b[c]), f[u] ? d.push(f) : e.push(f);
                f = A(a, xb(e, d)), f.selector = a
            }
            return f
        }, i = fb.select = function(a, b, e, f) {
            var i, j, k, l, m, n = "function" == typeof a && a, o=!f && g(a = n.selector || a);
            if (e = e || [], 1 === o.length) {
                if (j = o[0] = o[0].slice(0), j.length > 2 && "ID" === (k = j[0]).type && c.getById && 9 === b.nodeType && p && d.relative[j[1].type]) {
                    if (b = (d.find.ID(k.matches[0].replace(cb, db), b) || [])[0], !b)
                        return e;
                    n && (b = b.parentNode), a = a.slice(j.shift().value.length)
                }
                i = X.needsContext.test(a) ? 0 : j.length;
                while (i--) {
                    if (k = j[i], d.relative[l = k.type])
                        break;
                    if ((m = d.find[l]) && (f = m(k.matches[0].replace(cb, db), ab.test(j[0].type) && ob(b.parentNode) || b))) {
                        if (j.splice(i, 1), a = f.length && qb(j), !a)
                            return I.apply(e, f), e;
                        break
                    }
                }
            }
            return (n || h(a, o))(f, b, !p, e, ab.test(a) && ob(b.parentNode) || b), e
        }, c.sortStable = u.split("").sort(B).join("") === u, c.detectDuplicates=!!l, m(), c.sortDetached = ib(function(a) {
            return 1 & a.compareDocumentPosition(n.createElement("div"))
        }), ib(function(a) {
            return a.innerHTML = "<a href='#'></a>", "#" === a.firstChild.getAttribute("href")
        }) || jb("type|href|height|width", function(a, b, c) {
            return c ? void 0 : a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2)
        }), c.attributes && ib(function(a) {
            return a.innerHTML = "<input/>", a.firstChild.setAttribute("value", ""), "" === a.firstChild.getAttribute("value")
        }) || jb("value", function(a, b, c) {
            return c || "input" !== a.nodeName.toLowerCase() ? void 0 : a.defaultValue
        }), ib(function(a) {
            return null == a.getAttribute("disabled")
        }) || jb(L, function(a, b, c) {
            var d;
            return c ? void 0 : a[b]===!0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null
        }), fb
    }(a); n.find = t, n.expr = t.selectors, n.expr[":"] = n.expr.pseudos, n.unique = t.uniqueSort, n.text = t.getText, n.isXMLDoc = t.isXML, n.contains = t.contains; var u = n.expr.match.needsContext, v = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, w = /^.[^:#\[\.,]*$/; function x(a, b, c) {
        if (n.isFunction(b))
            return n.grep(a, function(a, d) {
                return !!b.call(a, d, a) !== c
            });
        if (b.nodeType)
            return n.grep(a, function(a) {
                return a === b !== c
            });
        if ("string" == typeof b) {
            if (w.test(b))
                return n.filter(b, a, c);
            b = n.filter(b, a)
        }
        return n.grep(a, function(a) {
            return g.call(b, a) >= 0 !== c
        })
    }
    n.filter = function(a, b, c) {
        var d = b[0];
        return c && (a = ":not(" + a + ")"), 1 === b.length && 1 === d.nodeType ? n.find.matchesSelector(d, a) ? [d] : [] : n.find.matches(a, n.grep(b, function(a) {
            return 1 === a.nodeType
        }))
    }, n.fn.extend({
        find: function(a) {
            var b, c = this.length, d = [], e = this;
            if ("string" != typeof a)
                return this.pushStack(n(a).filter(function() {
                    for (b = 0; c > b; b++)
                        if (n.contains(e[b], this))
                            return !0
                        }));
            for (b = 0; c > b; b++)
                n.find(a, e[b], d);
            return d = this.pushStack(c > 1 ? n.unique(d) : d), d.selector = this.selector ? this.selector + " " + a : a, d
        },
        filter: function(a) {
            return this.pushStack(x(this, a || [], !1))
        },
        not: function(a) {
            return this.pushStack(x(this, a || [], !0))
        },
        is: function(a) {
            return !!x(this, "string" == typeof a && u.test(a) ? n(a) : a || [], !1).length
        }
    });
    var y, z = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, A = n.fn.init = function(a, b) {
        var c, d;
        if (!a)
            return this;
        if ("string" == typeof a) {
            if (c = "<" === a[0] && ">" === a[a.length - 1] && a.length >= 3 ? [null, a, null] : z.exec(a), !c ||!c[1] && b)
                return !b || b.jquery ? (b || y).find(a) : this.constructor(b).find(a);
            if (c[1]) {
                if (b = b instanceof n ? b[0] : b, n.merge(this, n.parseHTML(c[1], b && b.nodeType ? b.ownerDocument || b : l, !0)), v.test(c[1]) && n.isPlainObject(b))
                    for (c in b)
                        n.isFunction(this[c]) ? this[c](b[c]) : this.attr(c, b[c]);
                return this
            }
            return d = l.getElementById(c[2]), d && d.parentNode && (this.length = 1, this[0] = d), this.context = l, this.selector = a, this
        }
        return a.nodeType ? (this.context = this[0] = a, this.length = 1, this) : n.isFunction(a) ? "undefined" != typeof y.ready ? y.ready(a) : a(n) : (void 0 !== a.selector && (this.selector = a.selector, this.context = a.context), n.makeArray(a, this))
    };
    A.prototype = n.fn, y = n(l);
    var B = /^(?:parents|prev(?:Until|All))/, C = {
        children: !0,
        contents: !0,
        next: !0,
        prev: !0
    };
    n.extend({
        dir: function(a, b, c) {
            var d = [], e = void 0 !== c;
            while ((a = a[b]) && 9 !== a.nodeType)
                if (1 === a.nodeType) {
                    if (e && n(a).is(c))
                        break;
                        d.push(a)
                }
            return d
        },
        sibling: function(a, b) {
            for (var c = []; a; a = a.nextSibling)
                1 === a.nodeType && a !== b && c.push(a);
            return c
        }
    }), n.fn.extend({
        has: function(a) {
            var b = n(a, this), c = b.length;
            return this.filter(function() {
                for (var a = 0; c > a; a++)
                    if (n.contains(this, b[a]))
                        return !0
            })
        },
        closest: function(a, b) {
            for (var c, d = 0, e = this.length, f = [], g = u.test(a) || "string" != typeof a ? n(a, b || this.context) : 0; e > d; d++)
                for (c = this[d]; c && c !== b; c = c.parentNode)
                    if (c.nodeType < 11 && (g ? g.index(c)>-1 : 1 === c.nodeType && n.find.matchesSelector(c, a))) {
                        f.push(c);
                        break
                    }
            return this.pushStack(f.length > 1 ? n.unique(f) : f)
        },
        index: function(a) {
            return a ? "string" == typeof a ? g.call(n(a), this[0]) : g.call(this, a.jquery ? a[0] : a) : this[0] && this[0].parentNode ? this.first().prevAll().length : - 1
        },
        add: function(a, b) {
            return this.pushStack(n.unique(n.merge(this.get(), n(a, b))))
        },
        addBack: function(a) {
            return this.add(null == a ? this.prevObject : this.prevObject.filter(a))
        }
    });
    function D(a, b) {
        while ((a = a[b]) && 1 !== a.nodeType);
        return a
    }
    n.each({
        parent: function(a) {
            var b = a.parentNode;
            return b && 11 !== b.nodeType ? b : null
        },
        parents: function(a) {
            return n.dir(a, "parentNode")
        },
        parentsUntil: function(a, b, c) {
            return n.dir(a, "parentNode", c)
        },
        next: function(a) {
            return D(a, "nextSibling")
        },
        prev: function(a) {
            return D(a, "previousSibling")
        },
        nextAll: function(a) {
            return n.dir(a, "nextSibling")
        },
        prevAll: function(a) {
            return n.dir(a, "previousSibling")
        },
        nextUntil: function(a, b, c) {
            return n.dir(a, "nextSibling", c)
        },
        prevUntil: function(a, b, c) {
            return n.dir(a, "previousSibling", c)
        },
        siblings: function(a) {
            return n.sibling((a.parentNode || {}).firstChild, a)
        },
        children: function(a) {
            return n.sibling(a.firstChild)
        },
        contents: function(a) {
            return a.contentDocument || n.merge([], a.childNodes)
        }
    }, function(a, b) {
        n.fn[a] = function(c, d) {
            var e = n.map(this, b, c);
            return "Until" !== a.slice( - 5) && (d = c), d && "string" == typeof d && (e = n.filter(d, e)), this.length > 1 && (C[a] || n.unique(e), B.test(a) && e.reverse()), this.pushStack(e)
        }
    });
    var E = /\S+/g, F = {};
    function G(a) {
        var b = F[a] = {};
        return n.each(a.match(E) || [], function(a, c) {
            b[c]=!0
        }), b
    }
    n.Callbacks = function(a) {
        a = "string" == typeof a ? F[a] || G(a) : n.extend({}, a);
        var b, c, d, e, f, g, h = [], i=!a.once && [], j = function(l) {
            for (b = a.memory && l, c=!0, g = e || 0, e = 0, f = h.length, d=!0; h && f > g; g++)
                if (h[g].apply(l[0], l[1])===!1 && a.stopOnFalse) {
                    b=!1;
                    break
                }
            d=!1, h && (i ? i.length && j(i.shift()) : b ? h = [] : k.disable())
        }, k = {
            add: function() {
                if (h) {
                    var c = h.length;
                    !function g(b) {
                        n.each(b, function(b, c) {
                            var d = n.type(c);
                            "function" === d ? a.unique && k.has(c) || h.push(c) : c && c.length && "string" !== d && g(c)
                        })
                    }(arguments), d ? f = h.length : b && (e = c, j(b))
                }
                return this
            },
            remove: function() {
                return h && n.each(arguments, function(a, b) {
                    var c;
                    while ((c = n.inArray(b, h, c))>-1)
                        h.splice(c, 1), d && (f >= c && f--, g >= c && g--)
                }), this
            },
            has: function(a) {
                return a ? n.inArray(a, h)>-1 : !(!h ||!h.length)
            },
            empty: function() {
                return h = [], f = 0, this
            },
            disable: function() {
                return h = i = b = void 0, this
            },
            disabled: function() {
                return !h
            },
            lock: function() {
                return i = void 0, b || k.disable(), this
            },
            locked: function() {
                return !i
            },
            fireWith: function(a, b) {
                return !h || c&&!i || (b = b || [], b = [a, b.slice ? b.slice(): b], d ? i.push(b) : j(b)), this
            },
            fire: function() {
                return k.fireWith(this, arguments), this
            },
            fired: function() {
                return !!c
            }
        };
        return k
    }, n.extend({
        Deferred: function(a) {
            var b = [["resolve", "done", n.Callbacks("once memory"), "resolved"], ["reject", "fail", n.Callbacks("once memory"), "rejected"], ["notify", "progress", n.Callbacks("memory")]], c = "pending", d = {
                state: function() {
                    return c
                },
                always: function() {
                    return e.done(arguments).fail(arguments), this
                },
                then: function() {
                    var a = arguments;
                    return n.Deferred(function(c) {
                        n.each(b, function(b, f) {
                            var g = n.isFunction(a[b]) && a[b];
                            e[f[1]](function() {
                                var a = g && g.apply(this, arguments);
                                a && n.isFunction(a.promise) ? a.promise().done(c.resolve).fail(c.reject).progress(c.notify) : c[f[0] + "With"](this === d ? c.promise() : this, g ? [a] : arguments)
                            })
                        }), a = null
                    }).promise()
                },
                promise: function(a) {
                    return null != a ? n.extend(a, d) : d
                }
            }, e = {};
            return d.pipe = d.then, n.each(b, function(a, f) {
                var g = f[2], h = f[3];
                d[f[1]] = g.add, h && g.add(function() {
                    c = h
                }, b[1^a][2].disable, b[2][2].lock), e[f[0]] = function() {
                    return e[f[0] + "With"](this === e ? d : this, arguments), this
                }, e[f[0] + "With"] = g.fireWith
            }), d.promise(e), a && a.call(e, e), e
        },
        when: function(a) {
            var b = 0, c = d.call(arguments), e = c.length, f = 1 !== e || a && n.isFunction(a.promise) ? e: 0, g = 1 === f ? a: n.Deferred(), h = function(a, b, c) {
                return function(e) {
                    b[a] = this, c[a] = arguments.length > 1 ? d.call(arguments) : e, c === i ? g.notifyWith(b, c) : --f || g.resolveWith(b, c)
                }
            }, i, j, k;
            if (e > 1)
                for (i = new Array(e), j = new Array(e), k = new Array(e); e > b; b++)
                    c[b] && n.isFunction(c[b].promise) ? c[b].promise().done(h(b, k, c)).fail(g.reject).progress(h(b, j, i)) : --f;
            return f || g.resolveWith(k, c), g.promise()
        }
    });
    var H;
    n.fn.ready = function(a) {
        return n.ready.promise().done(a), this
    }, n.extend({
        isReady: !1,
        readyWait: 1,
        holdReady: function(a) {
            a ? n.readyWait++ : n.ready(!0)
        },
        ready: function(a) {
            (a===!0?--n.readyWait : n.isReady) || (n.isReady=!0, a!==!0&&--n.readyWait > 0 || (H.resolveWith(l, [n]), n.fn.triggerHandler && (n(l).triggerHandler("ready"), n(l).off("ready"))))
        }
    });
    function I() {
        l.removeEventListener("DOMContentLoaded", I, !1), a.removeEventListener("load", I, !1), n.ready()
    }
    n.ready.promise = function(b) {
        return H || (H = n.Deferred(), "complete" === l.readyState ? setTimeout(n.ready) : (l.addEventListener("DOMContentLoaded", I, !1), a.addEventListener("load", I, !1))), H.promise(b)
    }, n.ready.promise();
    var J = n.access = function(a, b, c, d, e, f, g) {
        var h = 0, i = a.length, j = null == c;
        if ("object" === n.type(c)) {
            e=!0;
            for (h in c)
                n.access(a, b, h, c[h], !0, f, g)
        } else if (void 0 !== d && (e=!0, n.isFunction(d) || (g=!0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function(a, b, c) {
            return j.call(n(a), c)
        })), b))for (; i > h; h++)
            b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));
        return e ? a : j ? b.call(a) : i ? b(a[0], c) : f
    };
    n.acceptData = function(a) {
        return 1 === a.nodeType || 9 === a.nodeType||!+a.nodeType
    };
    function K() {
        Object.defineProperty(this.cache = {}, 0, {
            get: function() {
                return {}
            }
        }), this.expando = n.expando + Math.random()
    }
    K.uid = 1, K.accepts = n.acceptData, K.prototype = {
        key: function(a) {
            if (!K.accepts(a))
                return 0;
            var b = {}, c = a[this.expando];
            if (!c) {
                c = K.uid++;
                try {
                    b[this.expando] = {
                        value: c
                    }, Object.defineProperties(a, b)
                } catch (d) {
                    b[this.expando] = c, n.extend(a, b)
                }
            }
            return this.cache[c] || (this.cache[c] = {}), c
        },
        set: function(a, b, c) {
            var d, e = this.key(a), f = this.cache[e];
            if ("string" == typeof b)
                f[b] = c;
            else if (n.isEmptyObject(f))
                n.extend(this.cache[e], b);
            else
                for (d in b)
                    f[d] = b[d];
            return f
        },
        get: function(a, b) {
            var c = this.cache[this.key(a)];
            return void 0 === b ? c : c[b]
        },
        access: function(a, b, c) {
            var d;
            return void 0 === b || b && "string" == typeof b && void 0 === c ? (d = this.get(a, b), void 0 !== d ? d : this.get(a, n.camelCase(b))) : (this.set(a, b, c), void 0 !== c ? c : b)
        },
        remove: function(a, b) {
            var c, d, e, f = this.key(a), g = this.cache[f];
            if (void 0 === b)
                this.cache[f] = {};
            else {
                n.isArray(b) ? d = b.concat(b.map(n.camelCase)) : (e = n.camelCase(b), b in g ? d = [b, e] : (d = e, d = d in g ? [d] : d.match(E) || [])), c = d.length;
                while (c--)
                    delete g[d[c]]
            }
        },
        hasData: function(a) {
            return !n.isEmptyObject(this.cache[a[this.expando]] || {})
        },
        discard: function(a) {
            a[this.expando] && delete this.cache[a[this.expando]]
        }
    };
    var L = new K, M = new K, N = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, O = /([A-Z])/g;
    function P(a, b, c) {
        var d;
        if (void 0 === c && 1 === a.nodeType)
            if (d = "data-" + b.replace(O, "-$1").toLowerCase(), c = a.getAttribute(d), "string" == typeof c) {
                try {
                    c = "true" === c?!0 : "false" === c?!1 : "null" === c ? null : + c + "" === c?+c : N.test(c) ? n.parseJSON(c) : c
                } catch (e) {}
                M.set(a, b, c)
            } else
                c = void 0;
        return c
    }
    n.extend({
        hasData: function(a) {
            return M.hasData(a) || L.hasData(a)
        },
        data: function(a, b, c) {
            return M.access(a, b, c)
        },
        removeData: function(a, b) {
            M.remove(a, b)
        },
        _data: function(a, b, c) {
            return L.access(a, b, c)
        },
        _removeData: function(a, b) {
            L.remove(a, b)
        }
    }), n.fn.extend({
        data: function(a, b) {
            var c, d, e, f = this[0], g = f && f.attributes;
            if (void 0 === a) {
                if (this.length && (e = M.get(f), 1 === f.nodeType&&!L.get(f, "hasDataAttrs"))) {
                    c = g.length;
                    while (c--)
                        g[c] && (d = g[c].name, 0 === d.indexOf("data-") && (d = n.camelCase(d.slice(5)), P(f, d, e[d])));
                    L.set(f, "hasDataAttrs", !0)
                }
                return e
            }
            return "object" == typeof a ? this.each(function() {
                M.set(this, a)
            }) : J(this, function(b) {
                var c, d = n.camelCase(a);
                if (f && void 0 === b) {
                    if (c = M.get(f, a), void 0 !== c)
                        return c;
                    if (c = M.get(f, d), void 0 !== c)
                        return c;
                    if (c = P(f, d, void 0), void 0 !== c)
                        return c
                } else
                    this.each(function() {
                        var c = M.get(this, d);
                        M.set(this, d, b), - 1 !== a.indexOf("-") && void 0 !== c && M.set(this, a, b)
                    })
            }, null, b, arguments.length > 1, null, !0)
        },
        removeData: function(a) {
            return this.each(function() {
                M.remove(this, a)
            })
        }
    }), n.extend({
        queue: function(a, b, c) {
            var d;
            return a ? (b = (b || "fx") + "queue", d = L.get(a, b), c && (!d || n.isArray(c) ? d = L.access(a, b, n.makeArray(c)) : d.push(c)), d || []) : void 0
        },
        dequeue: function(a, b) {
            b = b || "fx";
            var c = n.queue(a, b), d = c.length, e = c.shift(), f = n._queueHooks(a, b), g = function() {
                n.dequeue(a, b)
            };
            "inprogress" === e && (e = c.shift(), d--), e && ("fx" === b && c.unshift("inprogress"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire()
        },
        _queueHooks: function(a, b) {
            var c = b + "queueHooks";
            return L.get(a, c) || L.access(a, c, {
                empty: n.Callbacks("once memory").add(function() {
                    L.remove(a, [b + "queue", c])
                })
            })
        }
    }), n.fn.extend({
        queue: function(a, b) {
            var c = 2;
            return "string" != typeof a && (b = a, a = "fx", c--), arguments.length < c ? n.queue(this[0], a) : void 0 === b ? this : this.each(function() {
                var c = n.queue(this, a, b);
                n._queueHooks(this, a), "fx" === a && "inprogress" !== c[0] && n.dequeue(this, a)
            })
        },
        dequeue: function(a) {
            return this.each(function() {
                n.dequeue(this, a)
            })
        },
        clearQueue: function(a) {
            return this.queue(a || "fx", [])
        },
        promise: function(a, b) {
            var c, d = 1, e = n.Deferred(), f = this, g = this.length, h = function() {
                --d || e.resolveWith(f, [f])
            };
            "string" != typeof a && (b = a, a = void 0), a = a || "fx";
            while (g--)
                c = L.get(f[g], a + "queueHooks"), c && c.empty && (d++, c.empty.add(h));
            return h(), e.promise(b)
        }
    });
    var Q = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, R = ["Top", "Right", "Bottom", "Left"], S = function(a, b) {
        return a = b || a, "none" === n.css(a, "display") ||!n.contains(a.ownerDocument, a)
    }, T = /^(?:checkbox|radio)$/i;
    !function() {
        var a = l.createDocumentFragment(), b = a.appendChild(l.createElement("div")), c = l.createElement("input");
        c.setAttribute("type", "radio"), c.setAttribute("checked", "checked"), c.setAttribute("name", "t"), b.appendChild(c), k.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, b.innerHTML = "<textarea>x</textarea>", k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue
    }();
    var U = "undefined";
    k.focusinBubbles = "onfocusin"in a;
    var V = /^key/, W = /^(?:mouse|pointer|contextmenu)|click/, X = /^(?:focusinfocus|focusoutblur)$/, Y = /^([^.]*)(?:\.(.+)|)$/;
    function Z() {
        return !0
    }
    function $() {
        return !1
    }
    function _() {
        try {
            return l.activeElement
        } catch (a) {}
    }
    n.event = {
        global: {},
        add: function(a, b, c, d, e) {
            var f, g, h, i, j, k, l, m, o, p, q, r = L.get(a);
            if (r) {
                c.handler && (f = c, c = f.handler, e = f.selector), c.guid || (c.guid = n.guid++), (i = r.events) || (i = r.events = {}), (g = r.handle) || (g = r.handle = function(b) {
                    return typeof n !== U && n.event.triggered !== b.type ? n.event.dispatch.apply(a, arguments) : void 0
                }), b = (b || "").match(E) || [""], j = b.length;
                while (j--)
                    h = Y.exec(b[j]) || [], o = q = h[1], p = (h[2] || "").split(".").sort(), o && (l = n.event.special[o] || {}, o = (e ? l.delegateType : l.bindType) || o, l = n.event.special[o] || {}, k = n.extend({
                        type: o,
                        origType: q,
                        data: d,
                        handler: c,
                        guid: c.guid,
                        selector: e,
                        needsContext: e && n.expr.match.needsContext.test(e),
                        namespace: p.join(".")
                    }, f), (m = i[o]) || (m = i[o] = [], m.delegateCount = 0, l.setup && l.setup.call(a, d, p, g)!==!1 || a.addEventListener && a.addEventListener(o, g, !1)), l.add && (l.add.call(a, k), k.handler.guid || (k.handler.guid = c.guid)), e ? m.splice(m.delegateCount++, 0, k) : m.push(k), n.event.global[o]=!0)
            }
        },
        remove: function(a, b, c, d, e) {
            var f, g, h, i, j, k, l, m, o, p, q, r = L.hasData(a) && L.get(a);
            if (r && (i = r.events)) {
                b = (b || "").match(E) || [""], j = b.length;
                while (j--)
                    if (h = Y.exec(b[j]) || [], o = q = h[1], p = (h[2] || "").split(".").sort(), o) {
                        l = n.event.special[o] || {}, o = (d ? l.delegateType : l.bindType) || o, m = i[o] || [], h = h[2] && new RegExp("(^|\\.)" + p.join("\\.(?:.*\\.|)") + "(\\.|$)"), g = f = m.length;
                        while (f--)
                            k = m[f], !e && q !== k.origType || c && c.guid !== k.guid || h&&!h.test(k.namespace) || d && d !== k.selector && ("**" !== d ||!k.selector) || (m.splice(f, 1), k.selector && m.delegateCount--, l.remove && l.remove.call(a, k));
                            g&&!m.length && (l.teardown && l.teardown.call(a, p, r.handle)!==!1 || n.removeEvent(a, o, r.handle), delete i[o])
                    } else
                        for (o in i)
                            n.event.remove(a, o + b[j], c, d, !0);
                n.isEmptyObject(i) && (delete r.handle, L.remove(a, "events"))
            }
        },
        trigger: function(b, c, d, e) {
            var f, g, h, i, k, m, o, p = [d || l], q = j.call(b, "type") ? b.type: b, r = j.call(b, "namespace") ? b.namespace.split("."): [];
            if (g = h = d = d || l, 3 !== d.nodeType && 8 !== d.nodeType&&!X.test(q + n.event.triggered) && (q.indexOf(".") >= 0 && (r = q.split("."), q = r.shift(), r.sort()), k = q.indexOf(":") < 0 && "on" + q, b = b[n.expando] ? b : new n.Event(q, "object" == typeof b && b), b.isTrigger = e ? 2 : 3, b.namespace = r.join("."), b.namespace_re = b.namespace ? new RegExp("(^|\\.)" + r.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, b.result = void 0, b.target || (b.target = d), c = null == c ? [b] : n.makeArray(c, [b]), o = n.event.special[q] || {}, e ||!o.trigger || o.trigger.apply(d, c)!==!1)
                ) {
                if (!e&&!o.noBubble&&!n.isWindow(d)) {
                    for (i = o.delegateType || q, X.test(i + q) || (g = g.parentNode); g; g = g.parentNode)
                        p.push(g), h = g;
                    h === (d.ownerDocument || l) && p.push(h.defaultView || h.parentWindow || a)
                }
                f = 0;
                while ((g = p[f++])&&!b.isPropagationStopped())
                    b.type = f > 1 ? i : o.bindType || q, m = (L.get(g, "events") || {})[b.type] && L.get(g, "handle"), m && m.apply(g, c), m = k && g[k], m && m.apply && n.acceptData(g) && (b.result = m.apply(g, c), b.result===!1 && b.preventDefault());
                return b.type = q, e || b.isDefaultPrevented() || o._default && o._default.apply(p.pop(), c)!==!1 ||!n.acceptData(d) || k && n.isFunction(d[q])&&!n.isWindow(d) && (h = d[k], h && (d[k] = null), n.event.triggered = q, d[q](), n.event.triggered = void 0, h && (d[k] = h)), b.result
            }
        },
        dispatch: function(a) {
            a = n.event.fix(a);
            var b, c, e, f, g, h = [], i = d.call(arguments), j = (L.get(this, "events") || {})[a.type] || [], k = n.event.special[a.type] || {};
            if (i[0] = a, a.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, a)!==!1) {
                h = n.event.handlers.call(this, a, j), b = 0;
                while ((f = h[b++])&&!a.isPropagationStopped()) {
                    a.currentTarget = f.elem, c = 0;
                    while ((g = f.handlers[c++])&&!a.isImmediatePropagationStopped())(!a.namespace_re || a.namespace_re.test(g.namespace)) && (a.handleObj = g, a.data = g.data, e = ((n.event.special[g.origType] || {}).handle || g.handler).apply(f.elem, i), void 0 !== e && (a.result = e)===!1 && (a.preventDefault(), a.stopPropagation())
                        )
                    }
                return k.postDispatch && k.postDispatch.call(this, a), a.result
            }
        },
        handlers: function(a, b) {
            var c, d, e, f, g = [], h = b.delegateCount, i = a.target;
            if (h && i.nodeType && (!a.button || "click" !== a.type))
                for (; i !== this; i = i.parentNode || this)
                    if (i.disabled!==!0 || "click" !== a.type) {
                        for (d = [], c = 0; h > c; c++)
                            f = b[c], e = f.selector + " ", void 0 === d[e] && (d[e] = f.needsContext ? n(e, this).index(i) >= 0 : n.find(e, this, null, [i]).length), d[e] && d.push(f);
                            d.length && g.push({
                                elem: i,
                                handlers: d
                            })
                    }
            return h < b.length && g.push({
                elem: this,
                handlers: b.slice(h)
            }), g
        },
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function(a, b) {
                return null == a.which && (a.which = null != b.charCode ? b.charCode : b.keyCode), a
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function(a, b) {
                var c, d, e, f = b.button;
                return null == a.pageX && null != b.clientX && (c = a.target.ownerDocument || l, d = c.documentElement, e = c.body, a.pageX = b.clientX + (d && d.scrollLeft || e && e.scrollLeft || 0) - (d && d.clientLeft || e && e.clientLeft || 0), a.pageY = b.clientY + (d && d.scrollTop || e && e.scrollTop || 0) - (d && d.clientTop || e && e.clientTop || 0)), a.which || void 0 === f || (a.which = 1 & f ? 1 : 2 & f ? 3 : 4 & f ? 2 : 0), a
            }
        },
        fix: function(a) {
            if (a[n.expando])
                return a;
            var b, c, d, e = a.type, f = a, g = this.fixHooks[e];
            g || (this.fixHooks[e] = g = W.test(e) ? this.mouseHooks : V.test(e) ? this.keyHooks : {}), d = g.props ? this.props.concat(g.props) : this.props, a = new n.Event(f), b = d.length;
            while (b--)
                c = d[b], a[c] = f[c];
            return a.target || (a.target = l), 3 === a.target.nodeType && (a.target = a.target.parentNode), g.filter ? g.filter(a, f) : a
        },
        special: {
            load: {
                noBubble: !0
            },
            focus: {
                trigger: function() {
                    return this !== _() && this.focus ? (this.focus(), !1) : void 0
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    return this === _() && this.blur ? (this.blur(), !1) : void 0
                },
                delegateType: "focusout"
            },
            click: {
                trigger: function() {
                    return "checkbox" === this.type && this.click && n.nodeName(this, "input") ? (this.click(), !1) : void 0
                },
                _default: function(a) {
                    return n.nodeName(a.target, "a")
                }
            },
            beforeunload: {
                postDispatch: function(a) {
                    void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result)
                }
            }
        },
        simulate: function(a, b, c, d) {
            var e = n.extend(new n.Event, c, {
                type: a,
                isSimulated: !0,
                originalEvent: {}
            });
            d ? n.event.trigger(e, null, b) : n.event.dispatch.call(b, e), e.isDefaultPrevented() && c.preventDefault()
        }
    }, n.removeEvent = function(a, b, c) {
        a.removeEventListener && a.removeEventListener(b, c, !1)
    }, n.Event = function(a, b) {
        return this instanceof n.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue===!1 ? Z : $) : this.type = a, b && n.extend(this, b), this.timeStamp = a && a.timeStamp || n.now(), void(this[n.expando]=!0)) : new n.Event(a, b)
    }, n.Event.prototype = {
        isDefaultPrevented: $,
        isPropagationStopped: $,
        isImmediatePropagationStopped: $,
        preventDefault: function() {
            var a = this.originalEvent;
            this.isDefaultPrevented = Z, a && a.preventDefault && a.preventDefault()
        },
        stopPropagation: function() {
            var a = this.originalEvent;
            this.isPropagationStopped = Z, a && a.stopPropagation && a.stopPropagation()
        },
        stopImmediatePropagation: function() {
            var a = this.originalEvent;
            this.isImmediatePropagationStopped = Z, a && a.stopImmediatePropagation && a.stopImmediatePropagation(), this.stopPropagation()
        }
    }, n.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function(a, b) {
        n.event.special[a] = {
            delegateType: b,
            bindType: b,
            handle: function(a) {
                var c, d = this, e = a.relatedTarget, f = a.handleObj;
                return (!e || e !== d&&!n.contains(d, e)) && (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c
            }
        }
    }), k.focusinBubbles || n.each({
        focus: "focusin",
        blur: "focusout"
    }, function(a, b) {
        var c = function(a) {
            n.event.simulate(b, a.target, n.event.fix(a), !0)
        };
        n.event.special[b] = {
            setup: function() {
                var d = this.ownerDocument || this, e = L.access(d, b);
                e || d.addEventListener(a, c, !0), L.access(d, b, (e || 0) + 1)
            },
            teardown: function() {
                var d = this.ownerDocument || this, e = L.access(d, b) - 1;
                e ? L.access(d, b, e) : (d.removeEventListener(a, c, !0), L.remove(d, b))
            }
        }
    }), n.fn.extend({
        on: function(a, b, c, d, e) {
            var f, g;
            if ("object" == typeof a) {
                "string" != typeof b && (c = c || b, b = void 0);
                for (g in a)
                    this.on(g, b, c, a[g], e);
                return this
            }
            if (null == c && null == d ? (d = b, c = b = void 0) : null == d && ("string" == typeof b ? (d = c, c = void 0) : (d = c, c = b, b = void 0)), d===!1)
                d = $;
            else if (!d)
                return this;
            return 1 === e && (f = d, d = function(a) {
                return n().off(a), f.apply(this, arguments)
            }, d.guid = f.guid || (f.guid = n.guid++)), this.each(function() {
                n.event.add(this, a, d, c, b)
            })
        },
        one: function(a, b, c, d) {
            return this.on(a, b, c, d, 1)
        },
        off: function(a, b, c) {
            var d, e;
            if (a && a.preventDefault && a.handleObj)
                return d = a.handleObj, n(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler), this;
            if ("object" == typeof a) {
                for (e in a)
                    this.off(e, b, a[e]);
                return this
            }
            return (b===!1 || "function" == typeof b) && (c = b, b = void 0), c===!1 && (c = $), this.each(function() {
                n.event.remove(this, a, c, b)
            })
        },
        trigger: function(a, b) {
            return this.each(function() {
                n.event.trigger(a, b, this)
            })
        },
        triggerHandler: function(a, b) {
            var c = this[0];
            return c ? n.event.trigger(a, b, c, !0) : void 0
        }
    });
    var ab = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, bb = /<([\w:]+)/, cb = /<|&#?\w+;/, db = /<(?:script|style|link)/i, eb = /checked\s*(?:[^=]|=\s*.checked.)/i, fb = /^$|\/(?:java|ecma)script/i, gb = /^true\/(.*)/, hb = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, ib = {
        option: [1, "<select multiple='multiple'>", "</select>"],
        thead: [1, "<table>", "</table>"],
        col: [2, "<table><colgroup>", "</colgroup></table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        _default: [0, "", ""]
    };
    ib.optgroup = ib.option, ib.tbody = ib.tfoot = ib.colgroup = ib.caption = ib.thead, ib.th = ib.td;
    function jb(a, b) {
        return n.nodeName(a, "table") && n.nodeName(11 !== b.nodeType ? b : b.firstChild, "tr") ? a.getElementsByTagName("tbody")[0] || a.appendChild(a.ownerDocument.createElement("tbody")) : a
    }
    function kb(a) {
        return a.type = (null !== a.getAttribute("type")) + "/" + a.type, a
    }
    function lb(a) {
        var b = gb.exec(a.type);
        return b ? a.type = b[1] : a.removeAttribute("type"), a
    }
    function mb(a, b) {
        for (var c = 0, d = a.length; d > c; c++)
            L.set(a[c], "globalEval", !b || L.get(b[c], "globalEval"))
    }
    function nb(a, b) {
        var c, d, e, f, g, h, i, j;
        if (1 === b.nodeType) {
            if (L.hasData(a) && (f = L.access(a), g = L.set(b, f), j = f.events)) {
                delete g.handle, g.events = {};
                for (e in j)
                    for (c = 0, d = j[e].length; d > c; c++)
                        n.event.add(b, e, j[e][c])
                    }
            M.hasData(a) && (h = M.access(a), i = n.extend({}, h), M.set(b, i))
        }
    }
    function ob(a, b) {
        var c = a.getElementsByTagName ? a.getElementsByTagName(b || "*"): a.querySelectorAll ? a.querySelectorAll(b || "*"): [];
        return void 0 === b || b && n.nodeName(a, b) ? n.merge([a], c) : c
    }
    function pb(a, b) {
        var c = b.nodeName.toLowerCase();
        "input" === c && T.test(a.type) ? b.checked = a.checked : ("input" === c || "textarea" === c) && (b.defaultValue = a.defaultValue)
    }
    n.extend({
        clone: function(a, b, c) {
            var d, e, f, g, h = a.cloneNode(!0), i = n.contains(a.ownerDocument, a);
            if (!(k.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || n.isXMLDoc(a)))
                for (g = ob(h), f = ob(a), d = 0, e = f.length; e > d; d++)
                    pb(f[d], g[d]);
            if (b)
                if (c)
                    for (f = f || ob(a), g = g || ob(h), d = 0, e = f.length; e > d; d++)
                        nb(f[d], g[d]);
                else
                    nb(a, h);
            return g = ob(h, "script"), g.length > 0 && mb(g, !i && ob(a, "script")), h
        },
        buildFragment: function(a, b, c, d) {
            for (var e, f, g, h, i, j, k = b.createDocumentFragment(), l = [], m = 0, o = a.length; o > m; m++)
                if (e = a[m], e || 0 === e)
                    if ("object" === n.type(e))
                        n.merge(l, e.nodeType ? [e] : e);
                    else if (cb.test(e)) {
                        f = f || k.appendChild(b.createElement("div")), g = (bb.exec(e) || ["", ""])[1].toLowerCase(), h = ib[g] || ib._default, f.innerHTML = h[1] + e.replace(ab, "<$1></$2>") + h[2], j = h[0];
                        while (j--)
                            f = f.lastChild;
                            n.merge(l, f.childNodes), f = k.firstChild, f.textContent = ""
                    } else
                        l.push(b.createTextNode(e));
            k.textContent = "", m = 0;
            while (e = l[m++])
                if ((!d||-1 === n.inArray(e, d)) && (i = n.contains(e.ownerDocument, e), f = ob(k.appendChild(e), "script"), i && mb(f), c)) {
                    j = 0;
                    while (e = f[j++])
                        fb.test(e.type || "") && c.push(e)
                }
            return k
        },
        cleanData: function(a) {
            for (var b, c, d, e, f = n.event.special, g = 0; void 0 !== (c = a[g]); g++) {
                if (n.acceptData(c) && (e = c[L.expando], e && (b = L.cache[e]))) {
                    if (b.events)
                        for (d in b.events)
                            f[d] ? n.event.remove(c, d) : n.removeEvent(c, d, b.handle);
                    L.cache[e] && delete L.cache[e]
                }
                delete M.cache[c[M.expando]]
            }
        }
    }), n.fn.extend({
        text: function(a) {
            return J(this, function(a) {
                return void 0 === a ? n.text(this) : this.empty().each(function() {
                    (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) && (this.textContent = a)
                })
            }, null, a, arguments.length)
        },
        append: function() {
            return this.domManip(arguments, function(a) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var b = jb(this, a);
                    b.appendChild(a)
                }
            })
        },
        prepend: function() {
            return this.domManip(arguments, function(a) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var b = jb(this, a);
                    b.insertBefore(a, b.firstChild)
                }
            })
        },
        before: function() {
            return this.domManip(arguments, function(a) {
                this.parentNode && this.parentNode.insertBefore(a, this)
            })
        },
        after: function() {
            return this.domManip(arguments, function(a) {
                this.parentNode && this.parentNode.insertBefore(a, this.nextSibling)
            })
        },
        remove: function(a, b) {
            for (var c, d = a ? n.filter(a, this) : this, e = 0; null != (c = d[e]); e++)
                b || 1 !== c.nodeType || n.cleanData(ob(c)), c.parentNode && (b && n.contains(c.ownerDocument, c) && mb(ob(c, "script")), c.parentNode.removeChild(c));
            return this
        },
        empty: function() {
            for (var a, b = 0; null != (a = this[b]); b++)
                1 === a.nodeType && (n.cleanData(ob(a, !1)), a.textContent = "");
            return this
        },
        clone: function(a, b) {
            return a = null == a?!1 : a, b = null == b ? a : b, this.map(function() {
                return n.clone(this, a, b)
            })
        },
        html: function(a) {
            return J(this, function(a) {
                var b = this[0] || {}, c = 0, d = this.length;
                if (void 0 === a && 1 === b.nodeType)
                    return b.innerHTML;
                if ("string" == typeof a&&!db.test(a)&&!ib[(bb.exec(a) || ["", ""])[1].toLowerCase()]) {
                    a = a.replace(ab, "<$1></$2>");
                    try {
                        for (; d > c; c++)
                            b = this[c] || {}, 1 === b.nodeType && (n.cleanData(ob(b, !1)), b.innerHTML = a);
                        b = 0
                    } catch (e) {}
                }
                b && this.empty().append(a)
            }, null, a, arguments.length)
        },
        replaceWith: function() {
            var a = arguments[0];
            return this.domManip(arguments, function(b) {
                a = this.parentNode, n.cleanData(ob(this)), a && a.replaceChild(b, this)
            }), a && (a.length || a.nodeType) ? this : this.remove()
        },
        detach: function(a) {
            return this.remove(a, !0)
        },
        domManip: function(a, b) {
            a = e.apply([], a);
            var c, d, f, g, h, i, j = 0, l = this.length, m = this, o = l - 1, p = a[0], q = n.isFunction(p);
            if (q || l > 1 && "string" == typeof p&&!k.checkClone && eb.test(p))
                return this.each(function(c) {
                    var d = m.eq(c);
                    q && (a[0] = p.call(this, c, d.html())), d.domManip(a, b)
                });
            if (l && (c = n.buildFragment(a, this[0].ownerDocument, !1, this), d = c.firstChild, 1 === c.childNodes.length && (c = d), d)) {
                for (f = n.map(ob(c, "script"), kb), g = f.length; l > j; j++)
                    h = c, j !== o && (h = n.clone(h, !0, !0), g && n.merge(f, ob(h, "script"))), b.call(this[j], h, j);
                if (g)
                    for (i = f[f.length - 1].ownerDocument, n.map(f, lb), j = 0; g > j; j++)
                        h = f[j], fb.test(h.type || "")&&!L.access(h, "globalEval") && n.contains(i, h) && (h.src ? n._evalUrl && n._evalUrl(h.src) : n.globalEval(h.textContent.replace(hb, "")))
            }
            return this
        }
    }), n.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(a, b) {
        n.fn[a] = function(a) {
            for (var c, d = [], e = n(a), g = e.length - 1, h = 0; g >= h; h++)
                c = h === g ? this : this.clone(!0), n(e[h])[b](c), f.apply(d, c.get());
            return this.pushStack(d)
        }
    });
    var qb, rb = {};
    function sb(b, c) {
        var d, e = n(c.createElement(b)).appendTo(c.body), f = a.getDefaultComputedStyle && (d = a.getDefaultComputedStyle(e[0])) ? d.display: n.css(e[0], "display");
        return e.detach(), f
    }
    function tb(a) {
        var b = l, c = rb[a];
        return c || (c = sb(a, b), "none" !== c && c || (qb = (qb || n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement), b = qb[0].contentDocument, b.write(), b.close(), c = sb(a, b), qb.detach()), rb[a] = c), c
    }
    var ub = /^margin/, vb = new RegExp("^(" + Q + ")(?!px)[a-z%]+$", "i"), wb = function(a) {
        return a.ownerDocument.defaultView.getComputedStyle(a, null)
    };
    function xb(a, b, c) {
        var d, e, f, g, h = a.style;
        return c = c || wb(a), c && (g = c.getPropertyValue(b) || c[b]), c && ("" !== g || n.contains(a.ownerDocument, a) || (g = n.style(a, b)), vb.test(g) && ub.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 !== g ? g + "" : g
    }
    function yb(a, b) {
        return {
            get: function() {
                return a() ? void delete this.get : (this.get = b).apply(this, arguments)
            }
        }
    }
    !function() {
        var b, c, d = l.documentElement, e = l.createElement("div"), f = l.createElement("div");
        if (f.style) {
            f.style.backgroundClip = "content-box", f.cloneNode(!0).style.backgroundClip = "", k.clearCloneStyle = "content-box" === f.style.backgroundClip, e.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute", e.appendChild(f);
            function g() {
                f.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute", f.innerHTML = "", d.appendChild(e);
                var g = a.getComputedStyle(f, null);
                b = "1%" !== g.top, c = "4px" === g.width, d.removeChild(e)
            }
            a.getComputedStyle && n.extend(k, {
                pixelPosition: function() {
                    return g(), b
                },
                boxSizingReliable: function() {
                    return null == c && g(), c
                },
                reliableMarginRight: function() {
                    var b, c = f.appendChild(l.createElement("div"));
                    return c.style.cssText = f.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0", c.style.marginRight = c.style.width = "0", f.style.width = "1px", d.appendChild(e), b=!parseFloat(a.getComputedStyle(c, null).marginRight), d.removeChild(e), b
                }
            })
        }
    }(), n.swap = function(a, b, c, d) {
        var e, f, g = {};
        for (f in b)
            g[f] = a.style[f], a.style[f] = b[f];
        e = c.apply(a, d || []);
        for (f in b)
            a.style[f] = g[f];
        return e
    };
    var zb = /^(none|table(?!-c[ea]).+)/, Ab = new RegExp("^(" + Q + ")(.*)$", "i"), Bb = new RegExp("^([+-])=(" + Q + ")", "i"), Cb = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }, Db = {
        letterSpacing: "0",
        fontWeight: "400"
    }, Eb = ["Webkit", "O", "Moz", "ms"];
    function Fb(a, b) {
        if (b in a)
            return b;
        var c = b[0].toUpperCase() + b.slice(1), d = b, e = Eb.length;
        while (e--)
            if (b = Eb[e] + c, b in a)
                return b;
        return d
    }
    function Gb(a, b, c) {
        var d = Ab.exec(b);
        return d ? Math.max(0, d[1] - (c || 0)) + (d[2] || "px") : b
    }
    function Hb(a, b, c, d, e) {
        for (var f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0, g = 0; 4 > f; f += 2)
            "margin" === c && (g += n.css(a, c + R[f], !0, e)), d ? ("content" === c && (g -= n.css(a, "padding" + R[f], !0, e)), "margin" !== c && (g -= n.css(a, "border" + R[f] + "Width", !0, e))) : (g += n.css(a, "padding" + R[f], !0, e), "padding" !== c && (g += n.css(a, "border" + R[f] + "Width", !0, e)));
        return g
    }
    function Ib(a, b, c) {
        var d=!0, e = "width" === b ? a.offsetWidth : a.offsetHeight, f = wb(a), g = "border-box" === n.css(a, "boxSizing", !1, f);
        if (0 >= e || null == e) {
            if (e = xb(a, b, f), (0 > e || null == e) && (e = a.style[b]), vb.test(e))
                return e;
            d = g && (k.boxSizingReliable() || e === a.style[b]), e = parseFloat(e) || 0
        }
        return e + Hb(a, b, c || (g ? "border" : "content"), d, f) + "px"
    }
    function Jb(a, b) {
        for (var c, d, e, f = [], g = 0, h = a.length; h > g; g++)
            d = a[g], d.style && (f[g] = L.get(d, "olddisplay"), c = d.style.display, b ? (f[g] || "none" !== c || (d.style.display = ""), "" === d.style.display && S(d) && (f[g] = L.access(d, "olddisplay", tb(d.nodeName)))) : (e = S(d), "none" === c && e || L.set(d, "olddisplay", e ? c : n.css(d, "display"))));
        for (g = 0; h > g; g++)
            d = a[g], d.style && (b && "none" !== d.style.display && "" !== d.style.display || (d.style.display = b ? f[g] || "" : "none"));
        return a
    }
    n.extend({
        cssHooks: {
            opacity: {
                get: function(a, b) {
                    if (b) {
                        var c = xb(a, "opacity");
                        return "" === c ? "1" : c
                    }
                }
            }
        },
        cssNumber: {
            columnCount: !0,
            fillOpacity: !0,
            flexGrow: !0,
            flexShrink: !0,
            fontWeight: !0,
            lineHeight: !0,
            opacity: !0,
            order: !0,
            orphans: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0
        },
        cssProps: {
            "float": "cssFloat"
        },
        style: function(a, b, c, d) {
            if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
                var e, f, g, h = n.camelCase(b), i = a.style;
                return b = n.cssProps[h] || (n.cssProps[h] = Fb(i, h)), g = n.cssHooks[b] || n.cssHooks[h], void 0 === c ? g && "get"in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b] : (f = typeof c, "string" === f && (e = Bb.exec(c)) && (c = (e[1] + 1) * e[2] + parseFloat(n.css(a, b)), f = "number"), null != c && c === c && ("number" !== f || n.cssNumber[h] || (c += "px"), k.clearCloneStyle || "" !== c || 0 !== b.indexOf("background") || (i[b] = "inherit"), g && "set"in g && void 0 === (c = g.set(a, c, d)) || (i[b] = c)), void 0)
            }
        },
        css: function(a, b, c, d) {
            var e, f, g, h = n.camelCase(b);
            return b = n.cssProps[h] || (n.cssProps[h] = Fb(a.style, h)), g = n.cssHooks[b] || n.cssHooks[h], g && "get"in g && (e = g.get(a, !0, c)), void 0 === e && (e = xb(a, b, d)), "normal" === e && b in Db && (e = Db[b]), "" === c || c ? (f = parseFloat(e), c===!0 || n.isNumeric(f) ? f || 0 : e) : e
        }
    }), n.each(["height", "width"], function(a, b) {
        n.cssHooks[b] = {
            get: function(a, c, d) {
                return c ? zb.test(n.css(a, "display")) && 0 === a.offsetWidth ? n.swap(a, Cb, function() {
                    return Ib(a, b, d)
                }) : Ib(a, b, d) : void 0
            },
            set: function(a, c, d) {
                var e = d && wb(a);
                return Gb(a, c, d ? Hb(a, b, d, "border-box" === n.css(a, "boxSizing", !1, e), e) : 0)
            }
        }
    }), n.cssHooks.marginRight = yb(k.reliableMarginRight, function(a, b) {
        return b ? n.swap(a, {
            display: "inline-block"
        }, xb, [a, "marginRight"]) : void 0
    }), n.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(a, b) {
        n.cssHooks[a + b] = {
            expand: function(c) {
                for (var d = 0, e = {}, f = "string" == typeof c ? c.split(" ") : [c]; 4 > d; d++)
                    e[a + R[d] + b] = f[d] || f[d - 2] || f[0];
                return e
            }
        }, ub.test(a) || (n.cssHooks[a + b].set = Gb)
    }), n.fn.extend({
        css: function(a, b) {
            return J(this, function(a, b, c) {
                var d, e, f = {}, g = 0;
                if (n.isArray(b)) {
                    for (d = wb(a), e = b.length; e > g; g++)
                        f[b[g]] = n.css(a, b[g], !1, d);
                    return f
                }
                return void 0 !== c ? n.style(a, b, c) : n.css(a, b)
            }, a, b, arguments.length > 1)
        },
        show: function() {
            return Jb(this, !0)
        },
        hide: function() {
            return Jb(this)
        },
        toggle: function(a) {
            return "boolean" == typeof a ? a ? this.show() : this.hide() : this.each(function() {
                S(this) ? n(this).show() : n(this).hide()
            })
        }
    });
    function Kb(a, b, c, d, e) {
        return new Kb.prototype.init(a, b, c, d, e)
    }
    n.Tween = Kb, Kb.prototype = {
        constructor: Kb,
        init: function(a, b, c, d, e, f) {
            this.elem = a, this.prop = c, this.easing = e || "swing", this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (n.cssNumber[c] ? "" : "px")
        },
        cur: function() {
            var a = Kb.propHooks[this.prop];
            return a && a.get ? a.get(this) : Kb.propHooks._default.get(this)
        },
        run: function(a) {
            var b, c = Kb.propHooks[this.prop];
            return this.pos = b = this.options.duration ? n.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : Kb.propHooks._default.set(this), this
        }
    }, Kb.prototype.init.prototype = Kb.prototype, Kb.propHooks = {
        _default: {
            get: function(a) {
                var b;
                return null == a.elem[a.prop] || a.elem.style && null != a.elem.style[a.prop] ? (b = n.css(a.elem, a.prop, ""), b && "auto" !== b ? b : 0) : a.elem[a.prop]
            },
            set: function(a) {
                n.fx.step[a.prop] ? n.fx.step[a.prop](a) : a.elem.style && (null != a.elem.style[n.cssProps[a.prop]] || n.cssHooks[a.prop]) ? n.style(a.elem, a.prop, a.now + a.unit) : a.elem[a.prop] = a.now
            }
        }
    }, Kb.propHooks.scrollTop = Kb.propHooks.scrollLeft = {
        set: function(a) {
            a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now)
        }
    }, n.easing = {
        linear: function(a) {
            return a
        },
        swing: function(a) {
            return .5 - Math.cos(a * Math.PI) / 2
        }
    }, n.fx = Kb.prototype.init, n.fx.step = {};
    var Lb, Mb, Nb = /^(?:toggle|show|hide)$/, Ob = new RegExp("^(?:([+-])=|)(" + Q + ")([a-z%]*)$", "i"), Pb = /queueHooks$/, Qb = [Vb], Rb = {
        "*": [function(a, b) {
            var c = this.createTween(a, b), d = c.cur(), e = Ob.exec(b), f = e && e[3] || (n.cssNumber[a] ? "" : "px"), g = (n.cssNumber[a] || "px" !== f&&+d) && Ob.exec(n.css(c.elem, a)), h = 1, i = 20;
            if (g && g[3] !== f) {
                f = f || g[3], e = e || [], g =+ d || 1;
                do
                    h = h || ".5", g/=h, n.style(c.elem, a, g + f);
                while (h !== (h = c.cur() / d) && 1 !== h&&--i)
                }
            return e && (g = c.start =+ g||+d || 0, c.unit = f, c.end = e[1] ? g + (e[1] + 1) * e[2] : + e[2]), c
        }
        ]
    };
    function Sb() {
        return setTimeout(function() {
            Lb = void 0
        }), Lb = n.now()
    }
    function Tb(a, b) {
        var c, d = 0, e = {
            height: a
        };
        for (b = b ? 1: 0;
        4 > d;
        d += 2 - b)c = R[d],
        e["margin" + c] = e["padding" + c] = a;
        return b && (e.opacity = e.width = a),
        e
    }
    function Ub(a, b, c) {
        for (var d, e = (Rb[b] || []).concat(Rb["*"]), f = 0, g = e.length; g > f; f++)
            if (d = e[f].call(c, b, a))
                return d
    }
    function Vb(a, b, c) {
        var d, e, f, g, h, i, j, k, l = this, m = {}, o = a.style, p = a.nodeType && S(a), q = L.get(a, "fxshow");
        c.queue || (h = n._queueHooks(a, "fx"), null == h.unqueued && (h.unqueued = 0, i = h.empty.fire, h.empty.fire = function() {
            h.unqueued || i()
        }), h.unqueued++, l.always(function() {
            l.always(function() {
                h.unqueued--, n.queue(a, "fx").length || h.empty.fire()
            })
        })), 1 === a.nodeType && ("height"in b || "width"in b) && (c.overflow = [o.overflow, o.overflowX, o.overflowY], j = n.css(a, "display"), k = "none" === j ? L.get(a, "olddisplay") || tb(a.nodeName) : j, "inline" === k && "none" === n.css(a, "float") && (o.display = "inline-block")), c.overflow && (o.overflow = "hidden", l.always(function() {
            o.overflow = c.overflow[0], o.overflowX = c.overflow[1], o.overflowY = c.overflow[2]
        }));
        for (d in b)
            if (e = b[d], Nb.exec(e)) {
                if (delete b[d], f = f || "toggle" === e, e === (p ? "hide" : "show")) {
                    if ("show" !== e ||!q || void 0 === q[d])
                        continue;
                        p=!0
                }
                m[d] = q && q[d] || n.style(a, d)
            } else
                j = void 0;
        if (n.isEmptyObject(m))
            "inline" === ("none" === j ? tb(a.nodeName) : j) && (o.display = j);
        else {
            q ? "hidden"in q && (p = q.hidden) : q = L.access(a, "fxshow", {}), f && (q.hidden=!p), p ? n(a).show() : l.done(function() {
                n(a).hide()
            }), l.done(function() {
                var b;
                L.remove(a, "fxshow");
                for (b in m)
                    n.style(a, b, m[b])
            });
            for (d in m)
                g = Ub(p ? q[d] : 0, d, l), d in q || (q[d] = g.start, p && (g.end = g.start, g.start = "width" === d || "height" === d ? 1 : 0))
        }
    }
    function Wb(a, b) {
        var c, d, e, f, g;
        for (c in a)
            if (d = n.camelCase(c), e = b[d], f = a[c], n.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = n.cssHooks[d], g && "expand"in g) {
                f = g.expand(f), delete a[d];
                for (c in f)
                    c in a || (a[c] = f[c], b[c] = e)
            } else
                b[d] = e
    }
    function Xb(a, b, c) {
        var d, e, f = 0, g = Qb.length, h = n.Deferred().always(function() {
            delete i.elem
        }), i = function() {
            if (e)
                return !1;
            for (var b = Lb || Sb(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; i > g; g++)
                j.tweens[g].run(f);
            return h.notifyWith(a, [j, f, c]), 1 > f && i ? c : (h.resolveWith(a, [j]), !1)
        }, j = h.promise({
            elem: a,
            props: n.extend({}, b),
            opts: n.extend(!0, {
                specialEasing: {}
            }, c),
            originalProperties: b,
            originalOptions: c,
            startTime: Lb || Sb(),
            duration: c.duration,
            tweens: [],
            createTween: function(b, c) {
                var d = n.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);
                return j.tweens.push(d), d
            },
            stop: function(b) {
                var c = 0, d = b ? j.tweens.length: 0;
                if (e)
                    return this;
                for (e=!0; d > c; c++)
                    j.tweens[c].run(1);
                return b ? h.resolveWith(a, [j, b]) : h.rejectWith(a, [j, b]), this
            }
        }), k = j.props;
        for (Wb(k, j.opts.specialEasing);
        g > f;
        f++)if (d = Qb[f].call(j, a, k, j.opts))
            return d;
        return n.map(k, Ub, j), n.isFunction(j.opts.start) && j.opts.start.call(a, j), n.fx.timer(n.extend(i, {
            elem: a,
            anim: j,
            queue: j.opts.queue
        })), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always)
    }
    n.Animation = n.extend(Xb, {
        tweener: function(a, b) {
            n.isFunction(a) ? (b = a, a = ["*"]) : a = a.split(" ");
            for (var c, d = 0, e = a.length; e > d; d++)
                c = a[d], Rb[c] = Rb[c] || [], Rb[c].unshift(b)
        },
        prefilter: function(a, b) {
            b ? Qb.unshift(a) : Qb.push(a)
        }
    }), n.speed = function(a, b, c) {
        var d = a && "object" == typeof a ? n.extend({}, a): {
            complete: c ||!c && b || n.isFunction(a) && a,
            duration: a,
            easing: c && b || b&&!n.isFunction(b) && b
        };
        return d.duration = n.fx.off ? 0 : "number" == typeof d.duration ? d.duration : d.duration in n.fx.speeds ? n.fx.speeds[d.duration] : n.fx.speeds._default, (null == d.queue || d.queue===!0) && (d.queue = "fx"), d.old = d.complete, d.complete = function() {
            n.isFunction(d.old) && d.old.call(this), d.queue && n.dequeue(this, d.queue)
        }, d
    }, n.fn.extend({
        fadeTo: function(a, b, c, d) {
            return this.filter(S).css("opacity", 0).show().end().animate({
                opacity: b
            }, a, c, d)
        },
        animate: function(a, b, c, d) {
            var e = n.isEmptyObject(a), f = n.speed(b, c, d), g = function() {
                var b = Xb(this, n.extend({}, a), f);
                (e || L.get(this, "finish")) && b.stop(!0)
            };
            return g.finish = g, e || f.queue===!1 ? this.each(g) : this.queue(f.queue, g)
        },
        stop: function(a, b, c) {
            var d = function(a) {
                var b = a.stop;
                delete a.stop, b(c)
            };
            return "string" != typeof a && (c = b, b = a, a = void 0), b && a!==!1 && this.queue(a || "fx", []), this.each(function() {
                var b=!0, e = null != a && a + "queueHooks", f = n.timers, g = L.get(this);
                if (e)
                    g[e] && g[e].stop && d(g[e]);
                else
                    for (e in g)
                        g[e] && g[e].stop && Pb.test(e) && d(g[e]);
                for (e = f.length; e--;)
                    f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b=!1, f.splice(e, 1));
                (b ||!c) && n.dequeue(this, a)
            })
        },
        finish: function(a) {
            return a!==!1 && (a = a || "fx"), this.each(function() {
                var b, c = L.get(this), d = c[a + "queue"], e = c[a + "queueHooks"], f = n.timers, g = d ? d.length: 0;
                for (c.finish=!0, n.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--;)
                    f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1));
                for (b = 0; g > b; b++)
                    d[b] && d[b].finish && d[b].finish.call(this);
                delete c.finish
            })
        }
    }), n.each(["toggle", "show", "hide"], function(a, b) {
        var c = n.fn[b];
        n.fn[b] = function(a, d, e) {
            return null == a || "boolean" == typeof a ? c.apply(this, arguments) : this.animate(Tb(b, !0), a, d, e)
        }
    }), n.each({
        slideDown: Tb("show"),
        slideUp: Tb("hide"),
        slideToggle: Tb("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(a, b) {
        n.fn[a] = function(a, c, d) {
            return this.animate(b, a, c, d)
        }
    }), n.timers = [], n.fx.tick = function() {
        var a, b = 0, c = n.timers;
        for (Lb = n.now(); b < c.length; b++)
            a = c[b], a() || c[b] !== a || c.splice(b--, 1);
        c.length || n.fx.stop(), Lb = void 0
    }, n.fx.timer = function(a) {
        n.timers.push(a), a() ? n.fx.start() : n.timers.pop()
    }, n.fx.interval = 13, n.fx.start = function() {
        Mb || (Mb = setInterval(n.fx.tick, n.fx.interval))
    }, n.fx.stop = function() {
        clearInterval(Mb), Mb = null
    }, n.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    }, n.fn.delay = function(a, b) {
        return a = n.fx ? n.fx.speeds[a] || a : a, b = b || "fx", this.queue(b, function(b, c) {
            var d = setTimeout(b, a);
            c.stop = function() {
                clearTimeout(d)
            }
        })
    }, function() {
        var a = l.createElement("input"), b = l.createElement("select"), c = b.appendChild(l.createElement("option"));
        a.type = "checkbox", k.checkOn = "" !== a.value, k.optSelected = c.selected, b.disabled=!0, k.optDisabled=!c.disabled, a = l.createElement("input"), a.value = "t", a.type = "radio", k.radioValue = "t" === a.value
    }();
    var Yb, Zb, $b = n.expr.attrHandle;
    n.fn.extend({
        attr: function(a, b) {
            return J(this, n.attr, a, b, arguments.length > 1)
        },
        removeAttr: function(a) {
            return this.each(function() {
                n.removeAttr(this, a)
            })
        }
    }), n.extend({
        attr: function(a, b, c) {
            var d, e, f = a.nodeType;
            if (a && 3 !== f && 8 !== f && 2 !== f)
                return typeof a.getAttribute === U ? n.prop(a, b, c) : (1 === f && n.isXMLDoc(a) || (b = b.toLowerCase(), d = n.attrHooks[b] || (n.expr.match.bool.test(b) ? Zb : Yb)), void 0 === c ? d && "get"in d && null !== (e = d.get(a, b)) ? e : (e = n.find.attr(a, b), null == e ? void 0 : e) : null !== c ? d && "set"in d && void 0 !== (e = d.set(a, c, b)) ? e : (a.setAttribute(b, c + ""), c) : void n.removeAttr(a, b))
        },
        removeAttr: function(a, b) {
            var c, d, e = 0, f = b && b.match(E);
            if (f && 1 === a.nodeType)
                while (c = f[e++])
                    d = n.propFix[c] || c, n.expr.match.bool.test(c) && (a[d]=!1), a.removeAttribute(c)
        },
        attrHooks: {
            type: {
                set: function(a, b) {
                    if (!k.radioValue && "radio" === b && n.nodeName(a, "input")) {
                        var c = a.value;
                        return a.setAttribute("type", b), c && (a.value = c), b
                    }
                }
            }
        }
    }), Zb = {
        set: function(a, b, c) {
            return b===!1 ? n.removeAttr(a, c) : a.setAttribute(c, c), c
        }
    }, n.each(n.expr.match.bool.source.match(/\w+/g), function(a, b) {
        var c = $b[b] || n.find.attr;
        $b[b] = function(a, b, d) {
            var e, f;
            return d || (f = $b[b], $b[b] = e, e = null != c(a, b, d) ? b.toLowerCase() : null, $b[b] = f), e
        }
    });
    var _b = /^(?:input|select|textarea|button)$/i;
    n.fn.extend({
        prop: function(a, b) {
            return J(this, n.prop, a, b, arguments.length > 1)
        },
        removeProp: function(a) {
            return this.each(function() {
                delete this[n.propFix[a] || a]
            })
        }
    }), n.extend({
        propFix: {
            "for": "htmlFor",
            "class": "className"
        },
        prop: function(a, b, c) {
            var d, e, f, g = a.nodeType;
            if (a && 3 !== g && 8 !== g && 2 !== g)
                return f = 1 !== g ||!n.isXMLDoc(a), f && (b = n.propFix[b] || b, e = n.propHooks[b]), void 0 !== c ? e && "set"in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && "get"in e && null !== (d = e.get(a, b)) ? d : a[b]
        },
        propHooks: {
            tabIndex: {
                get: function(a) {
                    return a.hasAttribute("tabindex") || _b.test(a.nodeName) || a.href ? a.tabIndex : - 1
                }
            }
        }
    }), k.optSelected || (n.propHooks.selected = {
        get: function(a) {
            var b = a.parentNode;
            return b && b.parentNode && b.parentNode.selectedIndex, null
        }
    }), n.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function() {
        n.propFix[this.toLowerCase()] = this
    });
    var ac = /[\t\r\n\f]/g;
    n.fn.extend({
        addClass: function(a) {
            var b, c, d, e, f, g, h = "string" == typeof a && a, i = 0, j = this.length;
            if (n.isFunction(a))
                return this.each(function(b) {
                    n(this).addClass(a.call(this, b, this.className))
                });
            if (h)
                for (b = (a || "").match(E) || []; j > i; i++)
                    if (c = this[i], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(ac, " ") : " ")) {
                        f = 0;
                        while (e = b[f++])
                            d.indexOf(" " + e + " ") < 0 && (d += e + " ");
                            g = n.trim(d), c.className !== g && (c.className = g)
                    }
            return this
        },
        removeClass: function(a) {
            var b, c, d, e, f, g, h = 0 === arguments.length || "string" == typeof a && a, i = 0, j = this.length;
            if (n.isFunction(a))
                return this.each(function(b) {
                    n(this).removeClass(a.call(this, b, this.className))
                });
            if (h)
                for (b = (a || "").match(E) || []; j > i; i++)
                    if (c = this[i], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(ac, " ") : "")) {
                        f = 0;
                        while (e = b[f++])
                            while (d.indexOf(" " + e + " ") >= 0)
                                d = d.replace(" " + e + " ", " ");
                                g = a ? n.trim(d) : "", c.className !== g && (c.className = g)
                    }
            return this
        },
        toggleClass: function(a, b) {
            var c = typeof a;
            return "boolean" == typeof b && "string" === c ? b ? this.addClass(a) : this.removeClass(a) : this.each(n.isFunction(a) ? function(c) {
                n(this).toggleClass(a.call(this, c, this.className, b), b)
            } : function() {
                if ("string" === c) {
                    var b, d = 0, e = n(this), f = a.match(E) || [];
                    while (b = f[d++])
                        e.hasClass(b) ? e.removeClass(b) : e.addClass(b)
                } else (c === U || "boolean" === c)
                    && (this.className && L.set(this, "__className__", this.className), this.className = this.className || a===!1 ? "" : L.get(this, "__className__") || "")
            })
        },
        hasClass: function(a) {
            for (var b = " " + a + " ", c = 0, d = this.length; d > c; c++)
                if (1 === this[c].nodeType && (" " + this[c].className + " ").replace(ac, " ").indexOf(b) >= 0)
                    return !0;
            return !1
        }
    });
    var bc = /\r/g;
    n.fn.extend({
        val: function(a) {
            var b, c, d, e = this[0];
            {
                if (arguments.length)
                    return d = n.isFunction(a), this.each(function(c) {
                        var e;
                        1 === this.nodeType && (e = d ? a.call(this, c, n(this).val()) : a, null == e ? e = "" : "number" == typeof e ? e += "" : n.isArray(e) && (e = n.map(e, function(a) {
                            return null == a ? "" : a + ""
                        })), b = n.valHooks[this.type] || n.valHooks[this.nodeName.toLowerCase()], b && "set"in b && void 0 !== b.set(this, e, "value") || (this.value = e))
                    });
                if (e)
                    return b = n.valHooks[e.type] || n.valHooks[e.nodeName.toLowerCase()], b && "get"in b && void 0 !== (c = b.get(e, "value")) ? c : (c = e.value, "string" == typeof c ? c.replace(bc, "") : null == c ? "" : c)
            }
        }
    }), n.extend({
        valHooks: {
            option: {
                get: function(a) {
                    var b = n.find.attr(a, "value");
                    return null != b ? b : n.trim(n.text(a))
                }
            },
            select: {
                get: function(a) {
                    for (var b, c, d = a.options, e = a.selectedIndex, f = "select-one" === a.type || 0 > e, g = f ? null : [], h = f ? e + 1 : d.length, i = 0 > e ? h : f ? e : 0; h > i; i++)
                        if (c = d[i], !(!c.selected && i !== e || (k.optDisabled ? c.disabled : null !== c.getAttribute("disabled")) || c.parentNode.disabled && n.nodeName(c.parentNode, "optgroup"))) {
                            if (b = n(c).val(), f)
                                return b;
                                g.push(b)
                        }
                    return g
                },
                set: function(a, b) {
                    var c, d, e = a.options, f = n.makeArray(b), g = e.length;
                    while (g--)
                        d = e[g], (d.selected = n.inArray(d.value, f) >= 0) && (c=!0);
                    return c || (a.selectedIndex =- 1), f
                }
            }
        }
    }), n.each(["radio", "checkbox"], function() {
        n.valHooks[this] = {
            set: function(a, b) {
                return n.isArray(b) ? a.checked = n.inArray(n(a).val(), b) >= 0 : void 0
            }
        }, k.checkOn || (n.valHooks[this].get = function(a) {
            return null === a.getAttribute("value") ? "on" : a.value
        })
    }), n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function(a, b) {
        n.fn[b] = function(a, c) {
            return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b)
        }
    }), n.fn.extend({
        hover: function(a, b) {
            return this.mouseenter(a).mouseleave(b || a)
        },
        bind: function(a, b, c) {
            return this.on(a, null, b, c)
        },
        unbind: function(a, b) {
            return this.off(a, null, b)
        },
        delegate: function(a, b, c, d) {
            return this.on(b, a, c, d)
        },
        undelegate: function(a, b, c) {
            return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", c)
        }
    });
    var cc = n.now(), dc = /\?/;
    n.parseJSON = function(a) {
        return JSON.parse(a + "")
    }, n.parseXML = function(a) {
        var b, c;
        if (!a || "string" != typeof a)
            return null;
        try {
            c = new DOMParser, b = c.parseFromString(a, "text/xml")
        } catch (d) {
            b = void 0
        }
        return (!b || b.getElementsByTagName("parsererror").length) && n.error("Invalid XML: " + a), b
    };
    var ec, fc, gc = /#.*$/, hc = /([?&])_=[^&]*/, ic = /^(.*?):[ \t]*([^\r\n]*)$/gm, jc = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, kc = /^(?:GET|HEAD)$/, lc = /^\/\//, mc = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, nc = {}, oc = {}, pc = "*/".concat("*");
    try {
        fc = location.href
    } catch (qc) {
        fc = l.createElement("a"), fc.href = "", fc = fc.href
    }
    ec = mc.exec(fc.toLowerCase()) || [];
    function rc(a) {
        return function(b, c) {
            "string" != typeof b && (c = b, b = "*");
            var d, e = 0, f = b.toLowerCase().match(E) || [];
            if (n.isFunction(c))
                while (d = f[e++])
                    "+" === d[0] ? (d = d.slice(1) || "*", (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c)
        }
    }
    function sc(a, b, c, d) {
        var e = {}, f = a === oc;
        function g(h) {
            var i;
            return e[h]=!0, n.each(a[h] || [], function(a, h) {
                var j = h(b, c, d);
                return "string" != typeof j || f || e[j] ? f?!(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1)
            }), i
        }
        return g(b.dataTypes[0]) ||!e["*"] && g("*")
    }
    function tc(a, b) {
        var c, d, e = n.ajaxSettings.flatOptions || {};
        for (c in b)
            void 0 !== b[c] && ((e[c] ? a : d || (d = {}))[c] = b[c]);
        return d && n.extend(!0, a, d), a
    }
    function uc(a, b, c) {
        var d, e, f, g, h = a.contents, i = a.dataTypes;
        while ("*" === i[0])
            i.shift(), void 0 === d && (d = a.mimeType || b.getResponseHeader("Content-Type"));
        if (d)
            for (e in h)
                if (h[e] && h[e].test(d)) {
                    i.unshift(e);
                    break
                }
        if (i[0]in c)
            f = i[0];
        else {
            for (e in c) {
                if (!i[0] || a.converters[e + " " + i[0]]) {
                    f = e;
                    break
                }
                g || (g = e)
            }
            f = f || g
        }
        return f ? (f !== i[0] && i.unshift(f), c[f]) : void 0
    }
    function vc(a, b, c, d) {
        var e, f, g, h, i, j = {}, k = a.dataTypes.slice();
        if (k[1])
            for (g in a.converters)
                j[g.toLowerCase()] = a.converters[g];
        f = k.shift();
        while (f)
            if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift())
                if ("*" === f)
                    f = i;
                else if ("*" !== i && i !== f) {
                    if (g = j[i + " " + f] || j["* " + f], !g)
                        for (e in j)
                            if (h = e.split(" "), h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]])) {
                                g===!0 ? g = j[e] : j[e]!==!0 && (f = h[0], k.unshift(h[1]));
                                break
                            }
                            if (g!==!0)
                                if (g && a["throws"])
                                    b = g(b);
                                else
                                    try {
                                        b = g(b)
                                    } catch (l) {
                                        return {
                                            state: "parsererror",
                                            error: g ? l: "No conversion from " + i + " to " + f
                                        }
                                    }
                                }
        return {
            state: "success",
            data: b
        }
    }
    n.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: fc,
            type: "GET",
            isLocal: jc.test(ec[1]),
            global: !0,
            processData: !0,
            async: !0,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": pc,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": !0,
                "text json": n.parseJSON,
                "text xml": n.parseXML
            },
            flatOptions: {
                url: !0,
                context: !0
            }
        },
        ajaxSetup: function(a, b) {
            return b ? tc(tc(a, n.ajaxSettings), b) : tc(n.ajaxSettings, a)
        },
        ajaxPrefilter: rc(nc),
        ajaxTransport: rc(oc),
        ajax: function(a, b) {
            "object" == typeof a && (b = a, a = void 0), b = b || {};
            var c, d, e, f, g, h, i, j, k = n.ajaxSetup({}, b), l = k.context || k, m = k.context && (l.nodeType || l.jquery) ? n(l): n.event, o = n.Deferred(), p = n.Callbacks("once memory"), q = k.statusCode || {}, r = {}, s = {}, t = 0, u = "canceled", v = {
                readyState: 0,
                getResponseHeader: function(a) {
                    var b;
                    if (2 === t) {
                        if (!f) {
                            f = {};
                            while (b = ic.exec(e))
                                f[b[1].toLowerCase()] = b[2]
                        }
                        b = f[a.toLowerCase()]
                    }
                    return null == b ? null : b
                },
                getAllResponseHeaders: function() {
                    return 2 === t ? e : null
                },
                setRequestHeader: function(a, b) {
                    var c = a.toLowerCase();
                    return t || (a = s[c] = s[c] || a, r[a] = b), this
                },
                overrideMimeType: function(a) {
                    return t || (k.mimeType = a), this
                },
                statusCode: function(a) {
                    var b;
                    if (a)
                        if (2 > t)
                            for (b in a)
                                q[b] = [q[b], a[b]];
                        else
                            v.always(a[v.status]);
                    return this
                },
                abort: function(a) {
                    var b = a || u;
                    return c && c.abort(b), x(0, b), this
                }
            };
            if (o.promise(v).complete = p.add, v.success = v.done, v.error = v.fail, k.url = ((a || k.url || fc) + "").replace(gc, "").replace(lc, ec[1] + "//"), k.type = b.method || b.type || k.method || k.type, k.dataTypes = n.trim(k.dataType || "*").toLowerCase().match(E) || [""], null == k.crossDomain && (h = mc.exec(k.url.toLowerCase()), k.crossDomain=!(!h || h[1] === ec[1] && h[2] === ec[2] && (h[3] || ("http:" === h[1] ? "80" : "443")) === (ec[3] || ("http:" === ec[1] ? "80" : "443")))), k.data && k.processData && "string" != typeof k.data && (k.data = n.param(k.data, k.traditional)), sc(nc, k, b, v), 2 === t)
                return v;
            i = k.global, i && 0 === n.active++&&n.event.trigger("ajaxStart"), k.type = k.type.toUpperCase(), k.hasContent=!kc.test(k.type), d = k.url, k.hasContent || (k.data && (d = k.url += (dc.test(d) ? "&" : "?") + k.data, delete k.data), k.cache===!1 && (k.url = hc.test(d) ? d.replace(hc, "$1_=" + cc++) : d + (dc.test(d) ? "&" : "?") + "_=" + cc++)), k.ifModified && (n.lastModified[d] && v.setRequestHeader("If-Modified-Since", n.lastModified[d]), n.etag[d] && v.setRequestHeader("If-None-Match", n.etag[d])), (k.data && k.hasContent && k.contentType!==!1 || b.contentType) && v.setRequestHeader("Content-Type", k.contentType), v.setRequestHeader("Accept", k.dataTypes[0] && k.accepts[k.dataTypes[0]] ? k.accepts[k.dataTypes[0]] + ("*" !== k.dataTypes[0] ? ", " + pc + "; q=0.01" : "") : k.accepts["*"]);
            for (j in k.headers)
                v.setRequestHeader(j, k.headers[j]);
            if (k.beforeSend && (k.beforeSend.call(l, v, k)===!1 || 2 === t))
                return v.abort();
            u = "abort";
            for (j in{
                success: 1,
                error: 1,
                complete: 1
            })
                v[j](k[j]);
            if (c = sc(oc, k, b, v)) {
                v.readyState = 1, i && m.trigger("ajaxSend", [v, k]), k.async && k.timeout > 0 && (g = setTimeout(function() {
                    v.abort("timeout")
                }, k.timeout));
                try {
                    t = 1, c.send(r, x)
                } catch (w) {
                    if (!(2 > t))
                        throw w;
                    x( - 1, w)
                }
            } else
                x( - 1, "No Transport");
            function x(a, b, f, h) {
                var j, r, s, u, w, x = b;
                2 !== t && (t = 2, g && clearTimeout(g), c = void 0, e = h || "", v.readyState = a > 0 ? 4 : 0, j = a >= 200 && 300 > a || 304 === a, f && (u = uc(k, v, f)), u = vc(k, u, v, j), j ? (k.ifModified && (w = v.getResponseHeader("Last-Modified"), w && (n.lastModified[d] = w), w = v.getResponseHeader("etag"), w && (n.etag[d] = w)), 204 === a || "HEAD" === k.type ? x = "nocontent" : 304 === a ? x = "notmodified" : (x = u.state, r = u.data, s = u.error, j=!s)) : (s = x, (a ||!x) && (x = "error", 0 > a && (a = 0))), v.status = a, v.statusText = (b || x) + "", j ? o.resolveWith(l, [r, x, v]) : o.rejectWith(l, [v, x, s]), v.statusCode(q), q = void 0, i && m.trigger(j ? "ajaxSuccess" : "ajaxError", [v, k, j ? r: s]), p.fireWith(l, [v, x]), i && (m.trigger("ajaxComplete", [v, k]), --n.active || n.event.trigger("ajaxStop")))
            }
            return v
        },
        getJSON: function(a, b, c) {
            return n.get(a, b, c, "json")
        },
        getScript: function(a, b) {
            return n.get(a, void 0, b, "script")
        }
    }), n.each(["get", "post"], function(a, b) {
        n[b] = function(a, c, d, e) {
            return n.isFunction(c) && (e = e || d, d = c, c = void 0), n.ajax({
                url: a,
                type: b,
                dataType: e,
                data: c,
                success: d
            })
        }
    }), n.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function(a, b) {
        n.fn[b] = function(a) {
            return this.on(b, a)
        }
    }), n._evalUrl = function(a) {
        return n.ajax({
            url: a,
            type: "GET",
            dataType: "script",
            async: !1,
            global: !1,
            "throws": !0
        })
    }, n.fn.extend({
        wrapAll: function(a) {
            var b;
            return n.isFunction(a) ? this.each(function(b) {
                n(this).wrapAll(a.call(this, b))
            }) : (this[0] && (b = n(a, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && b.insertBefore(this[0]), b.map(function() {
                var a = this;
                while (a.firstElementChild)
                    a = a.firstElementChild;
                return a
            }).append(this)), this)
        },
        wrapInner: function(a) {
            return this.each(n.isFunction(a) ? function(b) {
                n(this).wrapInner(a.call(this, b))
            } : function() {
                var b = n(this), c = b.contents();
                c.length ? c.wrapAll(a) : b.append(a)
            })
        },
        wrap: function(a) {
            var b = n.isFunction(a);
            return this.each(function(c) {
                n(this).wrapAll(b ? a.call(this, c) : a)
            })
        },
        unwrap: function() {
            return this.parent().each(function() {
                n.nodeName(this, "body") || n(this).replaceWith(this.childNodes)
            }).end()
        }
    }), n.expr.filters.hidden = function(a) {
        return a.offsetWidth <= 0 && a.offsetHeight <= 0
    }, n.expr.filters.visible = function(a) {
        return !n.expr.filters.hidden(a)
    };
    var wc = /%20/g, xc = /\[\]$/, yc = /\r?\n/g, zc = /^(?:submit|button|image|reset|file)$/i, Ac = /^(?:input|select|textarea|keygen)/i;
    function Bc(a, b, c, d) {
        var e;
        if (n.isArray(b))
            n.each(b, function(b, e) {
                c || xc.test(a) ? d(a, e) : Bc(a + "[" + ("object" == typeof e ? b : "") + "]", e, c, d)
            });
        else if (c || "object" !== n.type(b))
            d(a, b);
        else
            for (e in b)
                Bc(a + "[" + e + "]", b[e], c, d)
    }
    n.param = function(a, b) {
        var c, d = [], e = function(a, b) {
            b = n.isFunction(b) ? b() : null == b ? "" : b, d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b)
        };
        if (void 0 === b && (b = n.ajaxSettings && n.ajaxSettings.traditional), n.isArray(a) || a.jquery&&!n.isPlainObject(a)
            )n.each(a, function() {
            e(this.name, this.value)
        });
        else
            for (c in a)
                Bc(c, a[c], b, e);
        return d.join("&").replace(wc, "+")
    }, n.fn.extend({
        serialize: function() {
            return n.param(this.serializeArray())
        },
        serializeArray: function() {
            return this.map(function() {
                var a = n.prop(this, "elements");
                return a ? n.makeArray(a) : this
            }).filter(function() {
                var a = this.type;
                return this.name&&!n(this).is(":disabled") && Ac.test(this.nodeName)&&!zc.test(a) && (this.checked ||!T.test(a))
            }).map(function(a, b) {
                var c = n(this).val();
                return null == c ? null : n.isArray(c) ? n.map(c, function(a) {
                    return {
                        name: b.name,
                        value: a.replace(yc, "\r\n")
                    }
                }) : {
                    name: b.name,
                    value: c.replace(yc, "\r\n")
                }
            }).get()
        }
    }), n.ajaxSettings.xhr = function() {
        try {
            return new XMLHttpRequest
        } catch (a) {}
    };
    var Cc = 0, Dc = {}, Ec = {
        0: 200,
        1223: 204
    }, Fc = n.ajaxSettings.xhr();
    a.ActiveXObject && n(a).on("unload", function() {
        for (var a in Dc)
            Dc[a]()
    }), k.cors=!!Fc && "withCredentials"in Fc, k.ajax = Fc=!!Fc, n.ajaxTransport(function(a) {
        var b;
        return k.cors || Fc&&!a.crossDomain ? {
            send: function(c, d) {
                var e, f = a.xhr(), g=++Cc;
                if (f.open(a.type, a.url, a.async, a.username, a.password), a.xhrFields)
                    for (e in a.xhrFields)
                        f[e] = a.xhrFields[e];
                a.mimeType && f.overrideMimeType && f.overrideMimeType(a.mimeType), a.crossDomain || c["X-Requested-With"] || (c["X-Requested-With"] = "XMLHttpRequest");
                for (e in c)
                    f.setRequestHeader(e, c[e]);
                b = function(a) {
                    return function() {
                        b && (delete Dc[g], b = f.onload = f.onerror = null, "abort" === a ? f.abort() : "error" === a ? d(f.status, f.statusText) : d(Ec[f.status] || f.status, f.statusText, "string" == typeof f.responseText ? {
                            text: f.responseText
                        } : void 0, f.getAllResponseHeaders()))
                    }
                }, f.onload = b(), f.onerror = b("error"), b = Dc[g] = b("abort");
                try {
                    f.send(a.hasContent && a.data || null)
                } catch (h) {
                    if (b)
                        throw h
                }
            },
            abort: function() {
                b && b()
            }
        } : void 0
    }), n.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            "text script": function(a) {
                return n.globalEval(a), a
            }
        }
    }), n.ajaxPrefilter("script", function(a) {
        void 0 === a.cache && (a.cache=!1), a.crossDomain && (a.type = "GET")
    }), n.ajaxTransport("script", function(a) {
        if (a.crossDomain) {
            var b, c;
            return {
                send: function(d, e) {
                    b = n("<script>").prop({
                        async: !0,
                        charset: a.scriptCharset,
                        src: a.url
                    }).on("load error", c = function(a) {
                        b.remove(), c = null, a && e("error" === a.type ? 404 : 200, a.type)
                    }), l.head.appendChild(b[0])
                },
                abort: function() {
                    c && c()
                }
            }
        }
    });
    var Gc = [], Hc = /(=)\?(?=&|$)|\?\?/;
    n.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var a = Gc.pop() || n.expando + "_" + cc++;
            return this[a]=!0, a
        }
    }), n.ajaxPrefilter("json jsonp", function(b, c, d) {
        var e, f, g, h = b.jsonp!==!1 && (Hc.test(b.url) ? "url" : "string" == typeof b.data&&!(b.contentType || "").indexOf("application/x-www-form-urlencoded") && Hc.test(b.data) && "data");
        return h || "jsonp" === b.dataTypes[0] ? (e = b.jsonpCallback = n.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(Hc, "$1" + e) : b.jsonp!==!1 && (b.url += (dc.test(b.url) ? "&" : "?") + b.jsonp + "=" + e), b.converters["script json"] = function() {
            return g || n.error(e + " was not called"), g[0]
        }, b.dataTypes[0] = "json", f = a[e], a[e] = function() {
            g = arguments
        }, d.always(function() {
            a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, Gc.push(e)), g && n.isFunction(f) && f(g[0]), g = f = void 0
        }), "script") : void 0
    }), n.parseHTML = function(a, b, c) {
        if (!a || "string" != typeof a)
            return null;
        "boolean" == typeof b && (c = b, b=!1), b = b || l;
        var d = v.exec(a), e=!c && [];
        return d ? [b.createElement(d[1])] : (d = n.buildFragment([a], b, e), e && e.length && n(e).remove(), n.merge([], d.childNodes))
    };
    var Ic = n.fn.load;
    n.fn.load = function(a, b, c) {
        if ("string" != typeof a && Ic)
            return Ic.apply(this, arguments);
        var d, e, f, g = this, h = a.indexOf(" ");
        return h >= 0 && (d = n.trim(a.slice(h)), a = a.slice(0, h)), n.isFunction(b) ? (c = b, b = void 0) : b && "object" == typeof b && (e = "POST"), g.length > 0 && n.ajax({
            url: a,
            type: e,
            dataType: "html",
            data: b
        }).done(function(a) {
            f = arguments, g.html(d ? n("<div>").append(n.parseHTML(a)).find(d) : a)
        }).complete(c && function(a, b) {
            g.each(c, f || [a.responseText, b, a])
        }), this
    }, n.expr.filters.animated = function(a) {
        return n.grep(n.timers, function(b) {
            return a === b.elem
        }).length
    };
    var Jc = a.document.documentElement;
    function Kc(a) {
        return n.isWindow(a) ? a : 9 === a.nodeType && a.defaultView
    }
    n.offset = {
        setOffset: function(a, b, c) {
            var d, e, f, g, h, i, j, k = n.css(a, "position"), l = n(a), m = {};
            "static" === k && (a.style.position = "relative"), h = l.offset(), f = n.css(a, "top"), i = n.css(a, "left"), j = ("absolute" === k || "fixed" === k) && (f + i).indexOf("auto")>-1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), n.isFunction(b) && (b = b.call(a, c, h)), null != b.top && (m.top = b.top - h.top + g), null != b.left && (m.left = b.left - h.left + e), "using"in b ? b.using.call(a, m) : l.css(m)
        }
    }, n.fn.extend({
        offset: function(a) {
            if (arguments.length)
                return void 0 === a ? this : this.each(function(b) {
                n.offset.setOffset(this, a, b)
            });
            var b, c, d = this[0], e = {
                top: 0,
                left: 0
            }, f = d && d.ownerDocument;
            if (f)
                return b = f.documentElement, n.contains(b, d) ? (typeof d.getBoundingClientRect !== U && (e = d.getBoundingClientRect()), c = Kc(f), {
                    top: e.top + c.pageYOffset - b.clientTop,
                    left: e.left + c.pageXOffset - b.clientLeft
                }) : e
        },
        position: function() {
            if (this[0]) {
                var a, b, c = this[0], d = {
                    top: 0,
                    left: 0
                };
                return "fixed" === n.css(c, "position") ? b = c.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), n.nodeName(a[0], "html") || (d = a.offset()), d.top += n.css(a[0], "borderTopWidth", !0), d.left += n.css(a[0], "borderLeftWidth", !0)), {
                    top: b.top - d.top - n.css(c, "marginTop", !0),
                    left: b.left - d.left - n.css(c, "marginLeft", !0)
                }
            }
        },
        offsetParent: function() {
            return this.map(function() {
                var a = this.offsetParent || Jc;
                while (a&&!n.nodeName(a, "html") && "static" === n.css(a, "position"))
                    a = a.offsetParent;
                return a || Jc
            })
        }
    }), n.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(b, c) {
        var d = "pageYOffset" === c;
        n.fn[b] = function(e) {
            return J(this, function(b, e, f) {
                var g = Kc(b);
                return void 0 === f ? g ? g[c] : b[e] : void(g ? g.scrollTo(d ? a.pageXOffset : f, d ? f : a.pageYOffset) : b[e] = f)
            }, b, e, arguments.length, null)
        }
    }), n.each(["top", "left"], function(a, b) {
        n.cssHooks[b] = yb(k.pixelPosition, function(a, c) {
            return c ? (c = xb(a, b), vb.test(c) ? n(a).position()[b] + "px" : c) : void 0
        })
    }), n.each({
        Height: "height",
        Width: "width"
    }, function(a, b) {
        n.each({
            padding: "inner" + a,
            content: b,
            "": "outer" + a
        }, function(c, d) {
            n.fn[d] = function(d, e) {
                var f = arguments.length && (c || "boolean" != typeof d), g = c || (d===!0 || e===!0 ? "margin" : "border");
                return J(this, function(b, c, d) {
                    var e;
                    return n.isWindow(b) ? b.document.documentElement["client" + a] : 9 === b.nodeType ? (e = b.documentElement, Math.max(b.body["scroll" + a], e["scroll" + a], b.body["offset" + a], e["offset" + a], e["client" + a])) : void 0 === d ? n.css(b, c, g) : n.style(b, c, d, g)
                }, b, f ? d : void 0, f, null)
            }
        })
    }), n.fn.size = function() {
        return this.length
    }, n.fn.andSelf = n.fn.addBack, "function" == typeof define && define.amd && define("jquery", [], function() {
        return n
    });
    var Lc = a.jQuery, Mc = a.$;
    return n.noConflict = function(b) {
        return a.$ === n && (a.$ = Mc), b && a.jQuery === n && (a.jQuery = Lc), n
    }, typeof b === U && (a.jQuery = a.$ = n), n
});;
/*
Copyright 2012 Igor Vaynberg

Version: 3.4.2 Timestamp: Mon Aug 12 15:04:12 PDT 2013

This software is licensed under the Apache License, Version 2.0 (the "Apache License") or the GNU
General Public License version 2 (the "GPL License"). You may choose either license to govern your
use of this software only upon the condition that you accept all of the terms of either the Apache
License or the GPL License.

You may obtain a copy of the Apache License and the GPL License at:

http://www.apache.org/licenses/LICENSE-2.0
http://www.gnu.org/licenses/gpl-2.0.html

Unless required by applicable law or agreed to in writing, software distributed under the Apache License
or the GPL Licesnse is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
either express or implied. See the Apache License and the GPL License for the specific language governing
permissions and limitations under the Apache License and the GPL License.
*/
!function(a) {
    "undefined" == typeof a.fn.each2 && a.extend(a.fn, {
        each2: function(b) {
            for (var c = a([0]), d =- 1, e = this.length; ++d < e && (c.context = c[0] = this[d]) && b.call(c[0], d, c)!==!1;);
            return this
        }
    })
}(jQuery), function(a, b) {
    "use strict";
    function n(a) {
        var b, c, d, e;
        if (!a || a.length < 1)
            return a;
        for (b = "", c = 0, d = a.length; d > c; c++)
            e = a.charAt(c), b += m[e] || e;
        return b
    }
    function o(a, b) {
        for (var c = 0, d = b.length; d > c; c += 1)
            if (q(a, b[c]))
                return c;
        return - 1
    }
    function p() {
        var b = a(l);
        b.appendTo("body");
        var c = {
            width: b.width() - b[0].clientWidth,
            height: b.height() - b[0].clientHeight
        };
        return b.remove(), c
    }
    function q(a, c) {
        return a === c?!0 : a === b || c === b?!1 : null === a || null === c?!1 : a.constructor === String ? a + "" == c + "" : c.constructor === String ? c + "" == a + "" : !1
    }
    function r(b, c) {
        var d, e, f;
        if (null === b || b.length < 1)
            return [];
        for (d = b.split(c), e = 0, f = d.length; f > e; e += 1)
            d[e] = a.trim(d[e]);
        return d
    }
    function s(a) {
        return a.outerWidth(!1) - a.width()
    }
    function t(c) {
        var d = "keyup-change-value";
        c.on("keydown", function() {
            a.data(c, d) === b && a.data(c, d, c.val())
        }), c.on("keyup", function() {
            var e = a.data(c, d);
            e !== b && c.val() !== e && (a.removeData(c, d), c.trigger("keyup-change"))
        })
    }
    function u(c) {
        c.on("mousemove", function(c) {
            var d = i;
            (d === b || d.x !== c.pageX || d.y !== c.pageY) && a(c.target).trigger("mousemove-filtered", c)
        })
    }
    function v(a, c, d) {
        d = d || b;
        var e;
        return function() {
            var b = arguments;
            window.clearTimeout(e), e = window.setTimeout(function() {
                c.apply(d, b)
            }, a)
        }
    }
    function w(a) {
        var c, b=!1;
        return function() {
            return b===!1 && (c = a(), b=!0), c
        }
    }
    function x(a, b) {
        var c = v(a, function(a) {
            b.trigger("scroll-debounced", a)
        });
        b.on("scroll", function(a) {
            o(a.target, b.get()) >= 0 && c(a)
        })
    }
    function y(a) {
        a[0] !== document.activeElement && window.setTimeout(function() {
            var d, b = a[0], c = a.val().length;
            a.focus(), a.is(":visible") && b === document.activeElement && (b.setSelectionRange ? b.setSelectionRange(c, c) : b.createTextRange && (d = b.createTextRange(), d.collapse(!1), d.select()))
        }, 0)
    }
    function z(b) {
        b = a(b)[0];
        var c = 0, d = 0;
        if ("selectionStart"in b)
            c = b.selectionStart, d = b.selectionEnd - c;
        else if ("selection"in document) {
            b.focus();
            var e = document.selection.createRange();
            d = document.selection.createRange().text.length, e.moveStart("character", - b.value.length), c = e.text.length - d
        }
        return {
            offset: c,
            length: d
        }
    }
    function A(a) {
        a.preventDefault(), a.stopPropagation()
    }
    function B(a) {
        a.preventDefault(), a.stopImmediatePropagation()
    }
    function C(b) {
        if (!h) {
            var c = b[0].currentStyle || window.getComputedStyle(b[0], null);
            h = a(document.createElement("div")).css({
                position: "absolute",
                left: "-10000px",
                top: "-10000px",
                display: "none",
                fontSize: c.fontSize,
                fontFamily: c.fontFamily,
                fontStyle: c.fontStyle,
                fontWeight: c.fontWeight,
                letterSpacing: c.letterSpacing,
                textTransform: c.textTransform,
                whiteSpace: "nowrap"
            }), h.attr("class", "select2-sizer"), a("body").append(h)
        }
        return h.text(b.val()), h.width()
    }
    function D(b, c, d) {
        var e, g, f = [];
        e = b.attr("class"), e && (e = "" + e, a(e.split(" ")).each2(function() {
            0 === this.indexOf("select2-") && f.push(this)
        })), e = c.attr("class"), e && (e = "" + e, a(e.split(" ")).each2(function() {
            0 !== this.indexOf("select2-") && (g = d(this), g && f.push(this))
        })), b.attr("class", f.join(" "))
    }
    function E(a, b, c, d) {
        var e = n(a.toUpperCase()).indexOf(n(b.toUpperCase())), f = b.length;
        return 0 > e ? (c.push(d(a)), void 0) : (c.push(d(a.substring(0, e))), c.push("<span class='select2-match'>"), c.push(d(a.substring(e, e + f))), c.push("</span>"), c.push(d(a.substring(e + f, a.length))), void 0)
    }
    function F(a) {
        var b = {
            "\\": "&#92;",
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#39;",
            "/": "&#47;"
        };
        return String(a).replace(/[&<>"'\/\\]/g, function(a) {
            return b[a]
        })
    }
    function G(c) {
        var d, e = null, f = c.quietMillis || 100, g = c.url, h = this;
        return function(i) {
            window.clearTimeout(d), d = window.setTimeout(function() {
                var d = c.data, f = g, j = c.transport || a.fn.select2.ajaxDefaults.transport, k = {
                    type: c.type || "GET",
                    cache: c.cache ||!1,
                    jsonpCallback: c.jsonpCallback || b,
                    dataType: c.dataType || "json"
                }, l = a.extend({}, a.fn.select2.ajaxDefaults.params, k);
                d = d ? d.call(h, i.term, i.page, i.context) : null, f = "function" == typeof f ? f.call(h, i.term, i.page, i.context) : f, e && e.abort(), c.params && (a.isFunction(c.params) ? a.extend(l, c.params.call(h)) : a.extend(l, c.params)), a.extend(l, {
                    url: f,
                    dataType: c.dataType,
                    data: d,
                    success: function(a) {
                        var b = c.results(a, i.page);
                        i.callback(b)
                    }
                }), e = j.call(h, l)
            }, f)
        }
    }
    function H(b) {
        var d, e, c = b, f = function(a) {
            return "" + a.text
        };
        a.isArray(c) && (e = c, c = {
            results: e
        }), a.isFunction(c)===!1 && (e = c, c = function() {
            return e
        });
        var g = c();
        return g.text && (f = g.text, a.isFunction(f) || (d = g.text, f = function(a) {
            return a[d]
        })), function(b) {
            var g, d = b.term, e = {
                results: []
            };
            return "" === d ? (b.callback(c()), void 0) : (g = function(c, e) {
                var h, i;
                if (c = c[0], c.children) {
                    h = {};
                    for (i in c)
                        c.hasOwnProperty(i) && (h[i] = c[i]);
                    h.children = [], a(c.children).each2(function(a, b) {
                        g(b, h.children)
                    }), (h.children.length || b.matcher(d, f(h), c)) && e.push(h)
                } else
                    b.matcher(d, f(c), c) && e.push(c)
            }, a(c().results).each2(function(a, b) {
                g(b, e.results)
            }), b.callback(e), void 0)
        }
    }
    function I(c) {
        var d = a.isFunction(c);
        return function(e) {
            var f = e.term, g = {
                results: []
            };
            a(d ? c() : c).each(function() {
                var a = this.text !== b, c = a ? this.text: this;
                ("" === f || e.matcher(f, c)) && g.results.push(a ? this : {
                    id: this,
                    text: this
                })
            }), e.callback(g)
        }
    }
    function J(b, c) {
        if (a.isFunction(b))
            return !0;
        if (!b)
            return !1;
        throw new Error(c + " must be a function or a falsy value")
    }
    function K(b) {
        return a.isFunction(b) ? b() : b
    }
    function L(b) {
        var c = 0;
        return a.each(b, function(a, b) {
            b.children ? c += L(b.children) : c++
        }), c
    }
    function M(a, c, d, e) {
        var h, i, j, k, l, f = a, g=!1;
        if (!e.createSearchChoice ||!e.tokenSeparators || e.tokenSeparators.length < 1)
            return b;
        for (; ;) {
            for (i =- 1, j = 0, k = e.tokenSeparators.length; k > j && (l = e.tokenSeparators[j], i = a.indexOf(l), !(i >= 0)); j++);
            if (0 > i)
                break;
            if (h = a.substring(0, i), a = a.substring(i + l.length), h.length > 0 && (h = e.createSearchChoice.call(this, h, c), h !== b && null !== h && e.id(h) !== b && null !== e.id(h))) {
                for (g=!1, j = 0, k = c.length; k > j; j++)
                    if (q(e.id(h), e.id(c[j]))) {
                        g=!0;
                        break
                    }
                g || d(h)
            }
        }
        return f !== a ? a : void 0
    }
    function N(b, c) {
        var d = function() {};
        return d.prototype = new b, d.prototype.constructor = d, d.prototype.parent = b.prototype, d.prototype = a.extend(d.prototype, c), d
    }
    if (window.Select2 === b) {
        var c, d, e, f, g, h, j, k, i = {
            x: 0,
            y: 0
        }, c = {
            TAB: 9,
            ENTER: 13,
            ESC: 27,
            SPACE: 32,
            LEFT: 37,
            UP: 38,
            RIGHT: 39,
            DOWN: 40,
            SHIFT: 16,
            CTRL: 17,
            ALT: 18,
            PAGE_UP: 33,
            PAGE_DOWN: 34,
            HOME: 36,
            END: 35,
            BACKSPACE: 8,
            DELETE: 46,
            isArrow: function(a) {
                switch (a = a.which ? a.which : a) {
                case c.LEFT:
                case c.RIGHT:
                case c.UP:
                case c.DOWN:
                    return !0
                }
                return !1
            },
            isControl: function(a) {
                var b = a.which;
                switch (b) {
                case c.SHIFT:
                case c.CTRL:
                case c.ALT:
                    return !0
                }
                return a.metaKey?!0 : !1
            },
            isFunctionKey: function(a) {
                return a = a.which ? a.which : a, a >= 112 && 123 >= a
            }
        }, l = "<div class='select2-measure-scrollbar'></div>", m = {
            "\u24b6": "A",
            "\uff21": "A",
            "\xc0": "A",
            "\xc1": "A",
            "\xc2": "A",
            "\u1ea6": "A",
            "\u1ea4": "A",
            "\u1eaa": "A",
            "\u1ea8": "A",
            "\xc3": "A",
            "\u0100": "A",
            "\u0102": "A",
            "\u1eb0": "A",
            "\u1eae": "A",
            "\u1eb4": "A",
            "\u1eb2": "A",
            "\u0226": "A",
            "\u01e0": "A",
            "\xc4": "A",
            "\u01de": "A",
            "\u1ea2": "A",
            "\xc5": "A",
            "\u01fa": "A",
            "\u01cd": "A",
            "\u0200": "A",
            "\u0202": "A",
            "\u1ea0": "A",
            "\u1eac": "A",
            "\u1eb6": "A",
            "\u1e00": "A",
            "\u0104": "A",
            "\u023a": "A",
            "\u2c6f": "A",
            "\ua732": "AA",
            "\xc6": "AE",
            "\u01fc": "AE",
            "\u01e2": "AE",
            "\ua734": "AO",
            "\ua736": "AU",
            "\ua738": "AV",
            "\ua73a": "AV",
            "\ua73c": "AY",
            "\u24b7": "B",
            "\uff22": "B",
            "\u1e02": "B",
            "\u1e04": "B",
            "\u1e06": "B",
            "\u0243": "B",
            "\u0182": "B",
            "\u0181": "B",
            "\u24b8": "C",
            "\uff23": "C",
            "\u0106": "C",
            "\u0108": "C",
            "\u010a": "C",
            "\u010c": "C",
            "\xc7": "C",
            "\u1e08": "C",
            "\u0187": "C",
            "\u023b": "C",
            "\ua73e": "C",
            "\u24b9": "D",
            "\uff24": "D",
            "\u1e0a": "D",
            "\u010e": "D",
            "\u1e0c": "D",
            "\u1e10": "D",
            "\u1e12": "D",
            "\u1e0e": "D",
            "\u0110": "D",
            "\u018b": "D",
            "\u018a": "D",
            "\u0189": "D",
            "\ua779": "D",
            "\u01f1": "DZ",
            "\u01c4": "DZ",
            "\u01f2": "Dz",
            "\u01c5": "Dz",
            "\u24ba": "E",
            "\uff25": "E",
            "\xc8": "E",
            "\xc9": "E",
            "\xca": "E",
            "\u1ec0": "E",
            "\u1ebe": "E",
            "\u1ec4": "E",
            "\u1ec2": "E",
            "\u1ebc": "E",
            "\u0112": "E",
            "\u1e14": "E",
            "\u1e16": "E",
            "\u0114": "E",
            "\u0116": "E",
            "\xcb": "E",
            "\u1eba": "E",
            "\u011a": "E",
            "\u0204": "E",
            "\u0206": "E",
            "\u1eb8": "E",
            "\u1ec6": "E",
            "\u0228": "E",
            "\u1e1c": "E",
            "\u0118": "E",
            "\u1e18": "E",
            "\u1e1a": "E",
            "\u0190": "E",
            "\u018e": "E",
            "\u24bb": "F",
            "\uff26": "F",
            "\u1e1e": "F",
            "\u0191": "F",
            "\ua77b": "F",
            "\u24bc": "G",
            "\uff27": "G",
            "\u01f4": "G",
            "\u011c": "G",
            "\u1e20": "G",
            "\u011e": "G",
            "\u0120": "G",
            "\u01e6": "G",
            "\u0122": "G",
            "\u01e4": "G",
            "\u0193": "G",
            "\ua7a0": "G",
            "\ua77d": "G",
            "\ua77e": "G",
            "\u24bd": "H",
            "\uff28": "H",
            "\u0124": "H",
            "\u1e22": "H",
            "\u1e26": "H",
            "\u021e": "H",
            "\u1e24": "H",
            "\u1e28": "H",
            "\u1e2a": "H",
            "\u0126": "H",
            "\u2c67": "H",
            "\u2c75": "H",
            "\ua78d": "H",
            "\u24be": "I",
            "\uff29": "I",
            "\xcc": "I",
            "\xcd": "I",
            "\xce": "I",
            "\u0128": "I",
            "\u012a": "I",
            "\u012c": "I",
            "\u0130": "I",
            "\xcf": "I",
            "\u1e2e": "I",
            "\u1ec8": "I",
            "\u01cf": "I",
            "\u0208": "I",
            "\u020a": "I",
            "\u1eca": "I",
            "\u012e": "I",
            "\u1e2c": "I",
            "\u0197": "I",
            "\u24bf": "J",
            "\uff2a": "J",
            "\u0134": "J",
            "\u0248": "J",
            "\u24c0": "K",
            "\uff2b": "K",
            "\u1e30": "K",
            "\u01e8": "K",
            "\u1e32": "K",
            "\u0136": "K",
            "\u1e34": "K",
            "\u0198": "K",
            "\u2c69": "K",
            "\ua740": "K",
            "\ua742": "K",
            "\ua744": "K",
            "\ua7a2": "K",
            "\u24c1": "L",
            "\uff2c": "L",
            "\u013f": "L",
            "\u0139": "L",
            "\u013d": "L",
            "\u1e36": "L",
            "\u1e38": "L",
            "\u013b": "L",
            "\u1e3c": "L",
            "\u1e3a": "L",
            "\u0141": "L",
            "\u023d": "L",
            "\u2c62": "L",
            "\u2c60": "L",
            "\ua748": "L",
            "\ua746": "L",
            "\ua780": "L",
            "\u01c7": "LJ",
            "\u01c8": "Lj",
            "\u24c2": "M",
            "\uff2d": "M",
            "\u1e3e": "M",
            "\u1e40": "M",
            "\u1e42": "M",
            "\u2c6e": "M",
            "\u019c": "M",
            "\u24c3": "N",
            "\uff2e": "N",
            "\u01f8": "N",
            "\u0143": "N",
            "\xd1": "N",
            "\u1e44": "N",
            "\u0147": "N",
            "\u1e46": "N",
            "\u0145": "N",
            "\u1e4a": "N",
            "\u1e48": "N",
            "\u0220": "N",
            "\u019d": "N",
            "\ua790": "N",
            "\ua7a4": "N",
            "\u01ca": "NJ",
            "\u01cb": "Nj",
            "\u24c4": "O",
            "\uff2f": "O",
            "\xd2": "O",
            "\xd3": "O",
            "\xd4": "O",
            "\u1ed2": "O",
            "\u1ed0": "O",
            "\u1ed6": "O",
            "\u1ed4": "O",
            "\xd5": "O",
            "\u1e4c": "O",
            "\u022c": "O",
            "\u1e4e": "O",
            "\u014c": "O",
            "\u1e50": "O",
            "\u1e52": "O",
            "\u014e": "O",
            "\u022e": "O",
            "\u0230": "O",
            "\xd6": "O",
            "\u022a": "O",
            "\u1ece": "O",
            "\u0150": "O",
            "\u01d1": "O",
            "\u020c": "O",
            "\u020e": "O",
            "\u01a0": "O",
            "\u1edc": "O",
            "\u1eda": "O",
            "\u1ee0": "O",
            "\u1ede": "O",
            "\u1ee2": "O",
            "\u1ecc": "O",
            "\u1ed8": "O",
            "\u01ea": "O",
            "\u01ec": "O",
            "\xd8": "O",
            "\u01fe": "O",
            "\u0186": "O",
            "\u019f": "O",
            "\ua74a": "O",
            "\ua74c": "O",
            "\u01a2": "OI",
            "\ua74e": "OO",
            "\u0222": "OU",
            "\u24c5": "P",
            "\uff30": "P",
            "\u1e54": "P",
            "\u1e56": "P",
            "\u01a4": "P",
            "\u2c63": "P",
            "\ua750": "P",
            "\ua752": "P",
            "\ua754": "P",
            "\u24c6": "Q",
            "\uff31": "Q",
            "\ua756": "Q",
            "\ua758": "Q",
            "\u024a": "Q",
            "\u24c7": "R",
            "\uff32": "R",
            "\u0154": "R",
            "\u1e58": "R",
            "\u0158": "R",
            "\u0210": "R",
            "\u0212": "R",
            "\u1e5a": "R",
            "\u1e5c": "R",
            "\u0156": "R",
            "\u1e5e": "R",
            "\u024c": "R",
            "\u2c64": "R",
            "\ua75a": "R",
            "\ua7a6": "R",
            "\ua782": "R",
            "\u24c8": "S",
            "\uff33": "S",
            "\u1e9e": "S",
            "\u015a": "S",
            "\u1e64": "S",
            "\u015c": "S",
            "\u1e60": "S",
            "\u0160": "S",
            "\u1e66": "S",
            "\u1e62": "S",
            "\u1e68": "S",
            "\u0218": "S",
            "\u015e": "S",
            "\u2c7e": "S",
            "\ua7a8": "S",
            "\ua784": "S",
            "\u24c9": "T",
            "\uff34": "T",
            "\u1e6a": "T",
            "\u0164": "T",
            "\u1e6c": "T",
            "\u021a": "T",
            "\u0162": "T",
            "\u1e70": "T",
            "\u1e6e": "T",
            "\u0166": "T",
            "\u01ac": "T",
            "\u01ae": "T",
            "\u023e": "T",
            "\ua786": "T",
            "\ua728": "TZ",
            "\u24ca": "U",
            "\uff35": "U",
            "\xd9": "U",
            "\xda": "U",
            "\xdb": "U",
            "\u0168": "U",
            "\u1e78": "U",
            "\u016a": "U",
            "\u1e7a": "U",
            "\u016c": "U",
            "\xdc": "U",
            "\u01db": "U",
            "\u01d7": "U",
            "\u01d5": "U",
            "\u01d9": "U",
            "\u1ee6": "U",
            "\u016e": "U",
            "\u0170": "U",
            "\u01d3": "U",
            "\u0214": "U",
            "\u0216": "U",
            "\u01af": "U",
            "\u1eea": "U",
            "\u1ee8": "U",
            "\u1eee": "U",
            "\u1eec": "U",
            "\u1ef0": "U",
            "\u1ee4": "U",
            "\u1e72": "U",
            "\u0172": "U",
            "\u1e76": "U",
            "\u1e74": "U",
            "\u0244": "U",
            "\u24cb": "V",
            "\uff36": "V",
            "\u1e7c": "V",
            "\u1e7e": "V",
            "\u01b2": "V",
            "\ua75e": "V",
            "\u0245": "V",
            "\ua760": "VY",
            "\u24cc": "W",
            "\uff37": "W",
            "\u1e80": "W",
            "\u1e82": "W",
            "\u0174": "W",
            "\u1e86": "W",
            "\u1e84": "W",
            "\u1e88": "W",
            "\u2c72": "W",
            "\u24cd": "X",
            "\uff38": "X",
            "\u1e8a": "X",
            "\u1e8c": "X",
            "\u24ce": "Y",
            "\uff39": "Y",
            "\u1ef2": "Y",
            "\xdd": "Y",
            "\u0176": "Y",
            "\u1ef8": "Y",
            "\u0232": "Y",
            "\u1e8e": "Y",
            "\u0178": "Y",
            "\u1ef6": "Y",
            "\u1ef4": "Y",
            "\u01b3": "Y",
            "\u024e": "Y",
            "\u1efe": "Y",
            "\u24cf": "Z",
            "\uff3a": "Z",
            "\u0179": "Z",
            "\u1e90": "Z",
            "\u017b": "Z",
            "\u017d": "Z",
            "\u1e92": "Z",
            "\u1e94": "Z",
            "\u01b5": "Z",
            "\u0224": "Z",
            "\u2c7f": "Z",
            "\u2c6b": "Z",
            "\ua762": "Z",
            "\u24d0": "a",
            "\uff41": "a",
            "\u1e9a": "a",
            "\xe0": "a",
            "\xe1": "a",
            "\xe2": "a",
            "\u1ea7": "a",
            "\u1ea5": "a",
            "\u1eab": "a",
            "\u1ea9": "a",
            "\xe3": "a",
            "\u0101": "a",
            "\u0103": "a",
            "\u1eb1": "a",
            "\u1eaf": "a",
            "\u1eb5": "a",
            "\u1eb3": "a",
            "\u0227": "a",
            "\u01e1": "a",
            "\xe4": "a",
            "\u01df": "a",
            "\u1ea3": "a",
            "\xe5": "a",
            "\u01fb": "a",
            "\u01ce": "a",
            "\u0201": "a",
            "\u0203": "a",
            "\u1ea1": "a",
            "\u1ead": "a",
            "\u1eb7": "a",
            "\u1e01": "a",
            "\u0105": "a",
            "\u2c65": "a",
            "\u0250": "a",
            "\ua733": "aa",
            "\xe6": "ae",
            "\u01fd": "ae",
            "\u01e3": "ae",
            "\ua735": "ao",
            "\ua737": "au",
            "\ua739": "av",
            "\ua73b": "av",
            "\ua73d": "ay",
            "\u24d1": "b",
            "\uff42": "b",
            "\u1e03": "b",
            "\u1e05": "b",
            "\u1e07": "b",
            "\u0180": "b",
            "\u0183": "b",
            "\u0253": "b",
            "\u24d2": "c",
            "\uff43": "c",
            "\u0107": "c",
            "\u0109": "c",
            "\u010b": "c",
            "\u010d": "c",
            "\xe7": "c",
            "\u1e09": "c",
            "\u0188": "c",
            "\u023c": "c",
            "\ua73f": "c",
            "\u2184": "c",
            "\u24d3": "d",
            "\uff44": "d",
            "\u1e0b": "d",
            "\u010f": "d",
            "\u1e0d": "d",
            "\u1e11": "d",
            "\u1e13": "d",
            "\u1e0f": "d",
            "\u0111": "d",
            "\u018c": "d",
            "\u0256": "d",
            "\u0257": "d",
            "\ua77a": "d",
            "\u01f3": "dz",
            "\u01c6": "dz",
            "\u24d4": "e",
            "\uff45": "e",
            "\xe8": "e",
            "\xe9": "e",
            "\xea": "e",
            "\u1ec1": "e",
            "\u1ebf": "e",
            "\u1ec5": "e",
            "\u1ec3": "e",
            "\u1ebd": "e",
            "\u0113": "e",
            "\u1e15": "e",
            "\u1e17": "e",
            "\u0115": "e",
            "\u0117": "e",
            "\xeb": "e",
            "\u1ebb": "e",
            "\u011b": "e",
            "\u0205": "e",
            "\u0207": "e",
            "\u1eb9": "e",
            "\u1ec7": "e",
            "\u0229": "e",
            "\u1e1d": "e",
            "\u0119": "e",
            "\u1e19": "e",
            "\u1e1b": "e",
            "\u0247": "e",
            "\u025b": "e",
            "\u01dd": "e",
            "\u24d5": "f",
            "\uff46": "f",
            "\u1e1f": "f",
            "\u0192": "f",
            "\ua77c": "f",
            "\u24d6": "g",
            "\uff47": "g",
            "\u01f5": "g",
            "\u011d": "g",
            "\u1e21": "g",
            "\u011f": "g",
            "\u0121": "g",
            "\u01e7": "g",
            "\u0123": "g",
            "\u01e5": "g",
            "\u0260": "g",
            "\ua7a1": "g",
            "\u1d79": "g",
            "\ua77f": "g",
            "\u24d7": "h",
            "\uff48": "h",
            "\u0125": "h",
            "\u1e23": "h",
            "\u1e27": "h",
            "\u021f": "h",
            "\u1e25": "h",
            "\u1e29": "h",
            "\u1e2b": "h",
            "\u1e96": "h",
            "\u0127": "h",
            "\u2c68": "h",
            "\u2c76": "h",
            "\u0265": "h",
            "\u0195": "hv",
            "\u24d8": "i",
            "\uff49": "i",
            "\xec": "i",
            "\xed": "i",
            "\xee": "i",
            "\u0129": "i",
            "\u012b": "i",
            "\u012d": "i",
            "\xef": "i",
            "\u1e2f": "i",
            "\u1ec9": "i",
            "\u01d0": "i",
            "\u0209": "i",
            "\u020b": "i",
            "\u1ecb": "i",
            "\u012f": "i",
            "\u1e2d": "i",
            "\u0268": "i",
            "\u0131": "i",
            "\u24d9": "j",
            "\uff4a": "j",
            "\u0135": "j",
            "\u01f0": "j",
            "\u0249": "j",
            "\u24da": "k",
            "\uff4b": "k",
            "\u1e31": "k",
            "\u01e9": "k",
            "\u1e33": "k",
            "\u0137": "k",
            "\u1e35": "k",
            "\u0199": "k",
            "\u2c6a": "k",
            "\ua741": "k",
            "\ua743": "k",
            "\ua745": "k",
            "\ua7a3": "k",
            "\u24db": "l",
            "\uff4c": "l",
            "\u0140": "l",
            "\u013a": "l",
            "\u013e": "l",
            "\u1e37": "l",
            "\u1e39": "l",
            "\u013c": "l",
            "\u1e3d": "l",
            "\u1e3b": "l",
            "\u017f": "l",
            "\u0142": "l",
            "\u019a": "l",
            "\u026b": "l",
            "\u2c61": "l",
            "\ua749": "l",
            "\ua781": "l",
            "\ua747": "l",
            "\u01c9": "lj",
            "\u24dc": "m",
            "\uff4d": "m",
            "\u1e3f": "m",
            "\u1e41": "m",
            "\u1e43": "m",
            "\u0271": "m",
            "\u026f": "m",
            "\u24dd": "n",
            "\uff4e": "n",
            "\u01f9": "n",
            "\u0144": "n",
            "\xf1": "n",
            "\u1e45": "n",
            "\u0148": "n",
            "\u1e47": "n",
            "\u0146": "n",
            "\u1e4b": "n",
            "\u1e49": "n",
            "\u019e": "n",
            "\u0272": "n",
            "\u0149": "n",
            "\ua791": "n",
            "\ua7a5": "n",
            "\u01cc": "nj",
            "\u24de": "o",
            "\uff4f": "o",
            "\xf2": "o",
            "\xf3": "o",
            "\xf4": "o",
            "\u1ed3": "o",
            "\u1ed1": "o",
            "\u1ed7": "o",
            "\u1ed5": "o",
            "\xf5": "o",
            "\u1e4d": "o",
            "\u022d": "o",
            "\u1e4f": "o",
            "\u014d": "o",
            "\u1e51": "o",
            "\u1e53": "o",
            "\u014f": "o",
            "\u022f": "o",
            "\u0231": "o",
            "\xf6": "o",
            "\u022b": "o",
            "\u1ecf": "o",
            "\u0151": "o",
            "\u01d2": "o",
            "\u020d": "o",
            "\u020f": "o",
            "\u01a1": "o",
            "\u1edd": "o",
            "\u1edb": "o",
            "\u1ee1": "o",
            "\u1edf": "o",
            "\u1ee3": "o",
            "\u1ecd": "o",
            "\u1ed9": "o",
            "\u01eb": "o",
            "\u01ed": "o",
            "\xf8": "o",
            "\u01ff": "o",
            "\u0254": "o",
            "\ua74b": "o",
            "\ua74d": "o",
            "\u0275": "o",
            "\u01a3": "oi",
            "\u0223": "ou",
            "\ua74f": "oo",
            "\u24df": "p",
            "\uff50": "p",
            "\u1e55": "p",
            "\u1e57": "p",
            "\u01a5": "p",
            "\u1d7d": "p",
            "\ua751": "p",
            "\ua753": "p",
            "\ua755": "p",
            "\u24e0": "q",
            "\uff51": "q",
            "\u024b": "q",
            "\ua757": "q",
            "\ua759": "q",
            "\u24e1": "r",
            "\uff52": "r",
            "\u0155": "r",
            "\u1e59": "r",
            "\u0159": "r",
            "\u0211": "r",
            "\u0213": "r",
            "\u1e5b": "r",
            "\u1e5d": "r",
            "\u0157": "r",
            "\u1e5f": "r",
            "\u024d": "r",
            "\u027d": "r",
            "\ua75b": "r",
            "\ua7a7": "r",
            "\ua783": "r",
            "\u24e2": "s",
            "\uff53": "s",
            "\xdf": "s",
            "\u015b": "s",
            "\u1e65": "s",
            "\u015d": "s",
            "\u1e61": "s",
            "\u0161": "s",
            "\u1e67": "s",
            "\u1e63": "s",
            "\u1e69": "s",
            "\u0219": "s",
            "\u015f": "s",
            "\u023f": "s",
            "\ua7a9": "s",
            "\ua785": "s",
            "\u1e9b": "s",
            "\u24e3": "t",
            "\uff54": "t",
            "\u1e6b": "t",
            "\u1e97": "t",
            "\u0165": "t",
            "\u1e6d": "t",
            "\u021b": "t",
            "\u0163": "t",
            "\u1e71": "t",
            "\u1e6f": "t",
            "\u0167": "t",
            "\u01ad": "t",
            "\u0288": "t",
            "\u2c66": "t",
            "\ua787": "t",
            "\ua729": "tz",
            "\u24e4": "u",
            "\uff55": "u",
            "\xf9": "u",
            "\xfa": "u",
            "\xfb": "u",
            "\u0169": "u",
            "\u1e79": "u",
            "\u016b": "u",
            "\u1e7b": "u",
            "\u016d": "u",
            "\xfc": "u",
            "\u01dc": "u",
            "\u01d8": "u",
            "\u01d6": "u",
            "\u01da": "u",
            "\u1ee7": "u",
            "\u016f": "u",
            "\u0171": "u",
            "\u01d4": "u",
            "\u0215": "u",
            "\u0217": "u",
            "\u01b0": "u",
            "\u1eeb": "u",
            "\u1ee9": "u",
            "\u1eef": "u",
            "\u1eed": "u",
            "\u1ef1": "u",
            "\u1ee5": "u",
            "\u1e73": "u",
            "\u0173": "u",
            "\u1e77": "u",
            "\u1e75": "u",
            "\u0289": "u",
            "\u24e5": "v",
            "\uff56": "v",
            "\u1e7d": "v",
            "\u1e7f": "v",
            "\u028b": "v",
            "\ua75f": "v",
            "\u028c": "v",
            "\ua761": "vy",
            "\u24e6": "w",
            "\uff57": "w",
            "\u1e81": "w",
            "\u1e83": "w",
            "\u0175": "w",
            "\u1e87": "w",
            "\u1e85": "w",
            "\u1e98": "w",
            "\u1e89": "w",
            "\u2c73": "w",
            "\u24e7": "x",
            "\uff58": "x",
            "\u1e8b": "x",
            "\u1e8d": "x",
            "\u24e8": "y",
            "\uff59": "y",
            "\u1ef3": "y",
            "\xfd": "y",
            "\u0177": "y",
            "\u1ef9": "y",
            "\u0233": "y",
            "\u1e8f": "y",
            "\xff": "y",
            "\u1ef7": "y",
            "\u1e99": "y",
            "\u1ef5": "y",
            "\u01b4": "y",
            "\u024f": "y",
            "\u1eff": "y",
            "\u24e9": "z",
            "\uff5a": "z",
            "\u017a": "z",
            "\u1e91": "z",
            "\u017c": "z",
            "\u017e": "z",
            "\u1e93": "z",
            "\u1e95": "z",
            "\u01b6": "z",
            "\u0225": "z",
            "\u0240": "z",
            "\u2c6c": "z",
            "\ua763": "z"
        };
        j = a(document), g = function() {
            var a = 1;
            return function() {
                return a++
            }
        }(), j.on("mousemove", function(a) {
            i.x = a.pageX, i.y = a.pageY
        }), d = N(Object, {
            bind: function(a) {
                var b = this;
                return function() {
                    a.apply(b, arguments)
                }
            },
            init: function(c) {
                var d, e, h, i, f = ".select2-results";
                this.opts = c = this.prepareOpts(c), this.id = c.id, c.element.data("select2") !== b && null !== c.element.data("select2") && c.element.data("select2").destroy(), this.container = this.createContainer(), this.containerId = "s2id_" + (c.element.attr("id") || "autogen" + g()), this.containerSelector = "#" + this.containerId.replace(/([;&,\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g, "\\$1"), this.container.attr("id", this.containerId), this.body = w(function() {
                    return c.element.closest("body")
                }), D(this.container, this.opts.element, this.opts.adaptContainerCssClass), this.container.attr("style", c.element.attr("style")), this.container.css(K(c.containerCss)), this.container.addClass(K(c.containerCssClass)), this.elementTabIndex = this.opts.element.attr("tabindex"), this.opts.element.data("select2", this).attr("tabindex", "-1").before(this.container), this.container.data("select2", this), this.dropdown = this.container.find(".select2-drop"), this.dropdown.addClass(K(c.dropdownCssClass)), this.dropdown.data("select2", this), D(this.dropdown, this.opts.element, this.opts.adaptDropdownCssClass), this.results = d = this.container.find(f), this.search = e = this.container.find("input.select2-input"), this.queryCount = 0, this.resultsPage = 0, this.context = null, this.initContainer(), u(this.results), this.dropdown.on("mousemove-filtered touchstart touchmove touchend", f, this.bind(this.highlightUnderEvent)), x(80, this.results), this.dropdown.on("scroll-debounced", f, this.bind(this.loadMoreIfNeeded)), a(this.container).on("change", ".select2-input", function(a) {
                    a.stopPropagation()
                }), a(this.dropdown).on("change", ".select2-input", function(a) {
                    a.stopPropagation()
                }), a.fn.mousewheel && d.mousewheel(function(a, b, c, e) {
                    var f = d.scrollTop();
                    e > 0 && 0 >= f - e ? (d.scrollTop(0), A(a)) : 0 > e && d.get(0).scrollHeight - d.scrollTop() + e <= d.height() && (d.scrollTop(d.get(0).scrollHeight - d.height()), A(a))
                }), t(e), e.on("keyup-change input paste", this.bind(this.updateResults)), e.on("focus", function() {
                    e.addClass("select2-focused")
                }), e.on("blur", function() {
                    e.removeClass("select2-focused")
                }), this.dropdown.on("mouseup", f, this.bind(function(b) {
                    a(b.target).closest(".select2-result-selectable").length > 0 && (this.highlightUnderEvent(b), this.selectHighlighted(b))
                })), this.dropdown.on("click mouseup mousedown", function(a) {
                    a.stopPropagation()
                }), a.isFunction(this.opts.initSelection) && (this.initSelection(), this.monitorSource()), null !== c.maximumInputLength && this.search.attr("maxlength", c.maximumInputLength);
                var h = c.element.prop("disabled");
                h === b && (h=!1), this.enable(!h);
                var i = c.element.prop("readonly");
                i === b && (i=!1), this.readonly(i), k = k || p(), this.autofocus = c.element.prop("autofocus"), c.element.prop("autofocus", !1), this.autofocus && this.focus(), this.nextSearchTerm = b
            },
            destroy: function() {
                var a = this.opts.element, c = a.data("select2");
                this.close(), this.propertyObserver && (delete this.propertyObserver, this.propertyObserver = null), c !== b && (c.container.remove(), c.dropdown.remove(), a.removeClass("select2-offscreen").removeData("select2").off(".select2").prop("autofocus", this.autofocus ||!1), this.elementTabIndex ? a.attr({
                    tabindex: this.elementTabIndex
                }) : a.removeAttr("tabindex"), a.show())
            },
            optionToData: function(a) {
                return a.is("option") ? {
                    id: a.prop("value"),
                    text: a.text(),
                    element: a.get(),
                    css: a.attr("class"),
                    disabled: a.prop("disabled"),
                    locked: q(a.attr("locked"), "locked") || q(a.data("locked"), !0)
                } : a.is("optgroup") ? {
                    text: a.attr("label"),
                    children: [],
                    element: a.get(),
                    css: a.attr("class")
                } : void 0
            },
            prepareOpts: function(c) {
                var d, e, f, g, h = this;
                if (d = c.element, "select" === d.get(0).tagName.toLowerCase() && (this.select = e = c.element), e && a.each(["id", "multiple", "ajax", "query", "createSearchChoice", "initSelection", "data", "tags"], function() {
                    if (this in c)
                        throw new Error("Option '" + this + "' is not allowed for Select2 when attached to a <select> element.")
                }), c = a.extend({}, {
                    populateResults: function(d, e, f) {
                        var g, l = this.opts.id;
                        g = function(d, e, i) {
                            var j, k, m, n, o, p, q, r, s, t;
                            for (d = c.sortResults(d, e, f), j = 0, k = d.length; k > j; j += 1)
                                m = d[j], o = m.disabled===!0, n=!o && l(m) !== b, p = m.children && m.children.length > 0, q = a("<li></li>"), q.addClass("select2-results-dept-" + i), q.addClass("select2-result"), q.addClass(n ? "select2-result-selectable" : "select2-result-unselectable"), o && q.addClass("select2-disabled"), p && q.addClass("select2-result-with-children"), q.addClass(h.opts.formatResultCssClass(m)), r = a(document.createElement("div")), r.addClass("select2-result-label"), t = c.formatResult(m, r, f, h.opts.escapeMarkup), t !== b && r.html(t), q.append(r), p && (s = a("<ul></ul>"), s.addClass("select2-result-sub"), g(m.children, s, i + 1), q.append(s)), q.data("select2-data", m), e.append(q)
                        }, g(e, d, 0)
                    }
                }, a.fn.select2.defaults, c), "function" != typeof c.id && (f = c.id, c.id = function(a) {
                    return a[f]
                }), a.isArray(c.element.data("select2Tags"))) {
                    if ("tags"in c)
                        throw "tags specified as both an attribute 'data-select2-tags' and in options of Select2 " + c.element.attr("id");
                    c.tags = c.element.data("select2Tags")
                }
                if (e ? (c.query = this.bind(function(a) {
                    var f, g, i, c = {
                        results: [],
                        more: !1
                    }, e = a.term;
                    i = function(b, c) {
                        var d;
                        b.is("option") ? a.matcher(e, b.text(), b) && c.push(h.optionToData(b)) : b.is("optgroup") && (d = h.optionToData(b), b.children().each2(function(a, b) {
                            i(b, d.children)
                        }), d.children.length > 0 && c.push(d))
                    }, f = d.children(), this.getPlaceholder() !== b && f.length > 0 && (g = this.getPlaceholderOption(), g && (f = f.not(g))), f.each2(function(a, b) {
                        i(b, c.results)
                    }), a.callback(c)
                }), c.id = function(a) {
                    return a.id
                }, c.formatResultCssClass = function(a) {
                    return a.css
                }) : "query"in c || ("ajax"in c ? (g = c.element.data("ajax-url"), g && g.length > 0 && (c.ajax.url = g), c.query = G.call(c.element, c.ajax)) : "data"in c ? c.query = H(c.data) : "tags"in c && (c.query = I(c.tags), c.createSearchChoice === b && (c.createSearchChoice = function(b) {
                    return {
                        id: a.trim(b),
                        text: a.trim(b)
                    }
                }), c.initSelection === b && (c.initSelection = function(b, d) {
                    var e = [];
                    a(r(b.val(), c.separator)).each(function() {
                        var b = this, d = this, f = c.tags;
                        a.isFunction(f) && (f = f()), a(f).each(function() {
                            return q(this.id, b) ? (d = this.text, !1) : void 0
                        }), e.push({
                            id: b,
                            text: d
                        })
                    }), d(e)
                }))), "function" != typeof c.query)
                    throw "query function not defined for Select2 " + c.element.attr("id");
                return c
            },
            monitorSource: function() {
                var c, a = this.opts.element;
                a.on("change.select2", this.bind(function() {
                    this.opts.element.data("select2-change-triggered")!==!0 && this.initSelection()
                })), c = this.bind(function() {
                    var d, f = a.prop("disabled");
                    f === b && (f=!1), this.enable(!f);
                    var d = a.prop("readonly");
                    d === b && (d=!1), this.readonly(d), D(this.container, this.opts.element, this.opts.adaptContainerCssClass), this.container.addClass(K(this.opts.containerCssClass)), D(this.dropdown, this.opts.element, this.opts.adaptDropdownCssClass), this.dropdown.addClass(K(this.opts.dropdownCssClass))
                }), a.on("propertychange.select2 DOMAttrModified.select2", c), this.mutationCallback === b && (this.mutationCallback = function(a) {
                    a.forEach(c)
                }), "undefined" != typeof WebKitMutationObserver && (this.propertyObserver && (delete this.propertyObserver, this.propertyObserver = null), this.propertyObserver = new WebKitMutationObserver(this.mutationCallback), this.propertyObserver.observe(a.get(0), {
                    attributes: !0,
                    subtree: !1
                }))
            },
            triggerSelect: function(b) {
                var c = a.Event("select2-selecting", {
                    val: this.id(b),
                    object: b
                });
                return this.opts.element.trigger(c), !c.isDefaultPrevented()
            },
            triggerChange: function(b) {
                b = b || {}, b = a.extend({}, b, {
                    type: "change",
                    val: this.val()
                }), this.opts.element.data("select2-change-triggered", !0), this.opts.element.trigger(b), this.opts.element.data("select2-change-triggered", !1), this.opts.element.click(), this.opts.blurOnChange && this.opts.element.blur()
            },
            isInterfaceEnabled: function() {
                return this.enabledInterface===!0
            },
            enableInterface: function() {
                var a = this._enabled&&!this._readonly, b=!a;
                return a === this.enabledInterface?!1 : (this.container.toggleClass("select2-container-disabled", b), this.close(), this.enabledInterface = a, !0)
            },
            enable: function(a) {
                a === b && (a=!0), this._enabled !== a && (this._enabled = a, this.opts.element.prop("disabled", !a), this.enableInterface())
            },
            disable: function() {
                this.enable(!1)
            },
            readonly: function(a) {
                return a === b && (a=!1), this._readonly === a?!1 : (this._readonly = a, this.opts.element.prop("readonly", a), this.enableInterface(), !0)
            },
            opened: function() {
                return this.container.hasClass("select2-dropdown-open")
            },
            positionDropdown: function() {
                var q, r, s, t, b = this.dropdown, c = this.container.offset(), d = this.container.outerHeight(!1), e = this.container.outerWidth(!1), f = b.outerHeight(!1), g = a(window).scrollLeft() + a(window).width(), h = a(window).scrollTop() + a(window).height(), i = c.top + d, j = c.left, l = h >= i + f, m = c.top - f >= this.body().scrollTop(), n = b.outerWidth(!1), o = g >= j + n, p = b.hasClass("select2-drop-above");
                this.opts.dropdownAutoWidth ? (t = a(".select2-results", b)[0], b.addClass("select2-drop-auto-width"), b.css("width", ""), n = b.outerWidth(!1) + (t.scrollHeight === t.clientHeight ? 0 : k.width), n > e ? e = n : n = e, o = g >= j + n) : this.container.removeClass("select2-drop-auto-width"), "static" !== this.body().css("position") && (q = this.body().offset(), i -= q.top, j -= q.left), p ? (r=!0, !m && l && (r=!1)) : (r=!1, !l && m && (r=!0)), o || (j = c.left + e - n), r ? (i = c.top - f, this.container.addClass("select2-drop-above"), b.addClass("select2-drop-above")) : (this.container.removeClass("select2-drop-above"), b.removeClass("select2-drop-above")), s = a.extend({
                    top: i,
                    left: j,
                    width: e
                }, K(this.opts.dropdownCss)), b.css(s)
            },
            shouldOpen: function() {
                var b;
                return this.opened()?!1 : this._enabled===!1 || this._readonly===!0?!1 : (b = a.Event("select2-opening"), this.opts.element.trigger(b), !b.isDefaultPrevented())
            },
            clearDropdownAlignmentPreference: function() {
                this.container.removeClass("select2-drop-above"), this.dropdown.removeClass("select2-drop-above")
            },
            open: function() {
                return this.shouldOpen() ? (this.opening(), !0) : !1
            },
            opening: function() {
                var f, b = this.containerId, c = "scroll." + b, d = "resize." + b, e = "orientationchange." + b;
                this.container.addClass("select2-dropdown-open").addClass("select2-container-active"), this.clearDropdownAlignmentPreference(), this.dropdown[0] !== this.body().children().last()[0] && this.dropdown.detach().appendTo(this.body()), f = a("#select2-drop-mask"), 0 == f.length && (f = a(document.createElement("div")), f.attr("id", "select2-drop-mask").attr("class", "select2-drop-mask"), f.hide(), f.appendTo(this.body()), f.on("mousedown touchstart click", function(b) {
                    var d, c = a("#select2-drop");
                    c.length > 0 && (d = c.data("select2"), d.opts.selectOnBlur && d.selectHighlighted({
                        noFocus: !0
                    }), d.close({
                        focus: !1
                    }), b.preventDefault(), b.stopPropagation())
                })), this.dropdown.prev()[0] !== f[0] && this.dropdown.before(f), a("#select2-drop").removeAttr("id"), this.dropdown.attr("id", "select2-drop"), f.show(), this.positionDropdown(), this.dropdown.show(), this.positionDropdown(), this.dropdown.addClass("select2-drop-active");
                var h = this;
                this.container.parents().add(window).each(function() {
                    a(this).on(d + " " + c + " " + e, function() {
                        h.positionDropdown()
                    })
                })
            },
            close: function() {
                if (this.opened()) {
                    var b = this.containerId, c = "scroll." + b, d = "resize." + b, e = "orientationchange." + b;
                    this.container.parents().add(window).each(function() {
                        a(this).off(c).off(d).off(e)
                    }), this.clearDropdownAlignmentPreference(), a("#select2-drop-mask").hide(), this.dropdown.removeAttr("id"), this.dropdown.hide(), this.container.removeClass("select2-dropdown-open"), this.results.empty(), this.clearSearch(), this.search.removeClass("select2-active"), this.opts.element.trigger(a.Event("select2-close"))
                }
            },
            externalSearch: function(a) {
                this.open(), this.search.val(a), this.updateResults(!1)
            },
            clearSearch: function() {},
            getMaximumSelectionSize: function() {
                return K(this.opts.maximumSelectionSize)
            },
            ensureHighlightVisible: function() {
                var c, d, e, f, g, h, i, b = this.results;
                if (d = this.highlight(), !(0 > d)) {
                    if (0 == d)
                        return b.scrollTop(0), void 0;
                    c = this.findHighlightableChoices().find(".select2-result-label"), e = a(c[d]), f = e.offset().top + e.outerHeight(!0), d === c.length - 1 && (i = b.find("li.select2-more-results"), i.length > 0 && (f = i.offset().top + i.outerHeight(!0))), g = b.offset().top + b.outerHeight(!0), f > g && b.scrollTop(b.scrollTop() + (f - g)), h = e.offset().top - b.offset().top, 0 > h && "none" != e.css("display") && b.scrollTop(b.scrollTop() + h)
                }
            },
            findHighlightableChoices: function() {
                return this.results.find(".select2-result-selectable:not(.select2-selected):not(.select2-disabled)")
            },
            moveHighlight: function(b) {
                for (var c = this.findHighlightableChoices(), d = this.highlight(); d>-1 && d < c.length;) {
                    d += b;
                    var e = a(c[d]);
                    if (e.hasClass("select2-result-selectable")&&!e.hasClass("select2-disabled")&&!e.hasClass("select2-selected")) {
                        this.highlight(d);
                        break
                    }
                }
            },
            highlight: function(b) {
                var d, e, c = this.findHighlightableChoices();
                return 0 === arguments.length ? o(c.filter(".select2-highlighted")[0], c.get()) : (b >= c.length && (b = c.length - 1), 0 > b && (b = 0), this.removeHighlight(), d = a(c[b]), d.addClass("select2-highlighted"), this.ensureHighlightVisible(), e = d.data("select2-data"), e && this.opts.element.trigger({
                    type: "select2-highlight",
                    val: this.id(e),
                    choice: e
                }), void 0)
            },
            removeHighlight: function() {
                this.results.find(".select2-highlighted").removeClass("select2-highlighted")
            },
            countSelectableResults: function() {
                return this.findHighlightableChoices().length
            },
            highlightUnderEvent: function(b) {
                var c = a(b.target).closest(".select2-result-selectable");
                if (c.length > 0&&!c.is(".select2-highlighted")) {
                    var d = this.findHighlightableChoices();
                    this.highlight(d.index(c))
                } else
                    0 == c.length && this.removeHighlight()
            },
            loadMoreIfNeeded: function() {
                var c, a = this.results, b = a.find("li.select2-more-results"), e = this.resultsPage + 1, f = this, g = this.search.val(), h = this.context;
                0 !== b.length && (c = b.offset().top - a.offset().top - a.height(), c <= this.opts.loadMorePadding && (b.addClass("select2-active"), this.opts.query({
                    element: this.opts.element,
                    term: g,
                    page: e,
                    context: h,
                    matcher: this.opts.matcher,
                    callback: this.bind(function(c) {
                        f.opened() && (f.opts.populateResults.call(this, a, c.results, {
                            term: g,
                            page: e,
                            context: h
                        }), f.postprocessResults(c, !1, !1), c.more===!0 ? (b.detach().appendTo(a).text(f.opts.formatLoadMore(e + 1)), window.setTimeout(function() {
                            f.loadMoreIfNeeded()
                        }, 10)) : b.remove(), f.positionDropdown(), f.resultsPage = e, f.context = c.context, this.opts.element.trigger({
                            type: "select2-loaded",
                            items: c
                        }))
                    })
                })))
            },
            tokenize: function() {},
            updateResults: function(c) {
                function m() {
                    d.removeClass("select2-active"), h.positionDropdown()
                }
                function n(a) {
                    e.html(a), m()
                }
                var g, i, l, d = this.search, e = this.results, f = this.opts, h = this, j = d.val(), k = a.data(this.container, "select2-last-term");
                if ((c===!0 ||!k ||!q(j, k)) && (a.data(this.container, "select2-last-term", j), c===!0 || this.showSearchInput!==!1 && this.opened())) {
                    l=++this.queryCount;
                    var o = this.getMaximumSelectionSize();
                    if (o >= 1 && (g = this.data(), a.isArray(g) && g.length >= o && J(f.formatSelectionTooBig, "formatSelectionTooBig")))
                        return n("<li class='select2-selection-limit'>" + f.formatSelectionTooBig(o) + "</li>"), void 0;
                    if (d.val().length < f.minimumInputLength)
                        return J(f.formatInputTooShort, "formatInputTooShort") ? n("<li class='select2-no-results'>" + f.formatInputTooShort(d.val(), f.minimumInputLength) + "</li>") : n(""), c && this.showSearch && this.showSearch(!0), void 0;
                    if (f.maximumInputLength && d.val().length > f.maximumInputLength)
                        return J(f.formatInputTooLong, "formatInputTooLong") ? n("<li class='select2-no-results'>" + f.formatInputTooLong(d.val(), f.maximumInputLength) + "</li>") : n(""), void 0;
                    f.formatSearching && 0 === this.findHighlightableChoices().length && n("<li class='select2-searching'>" + f.formatSearching() + "</li>"), d.addClass("select2-active"), this.removeHighlight(), i = this.tokenize(), i != b && null != i && d.val(i), this.resultsPage = 1, f.query({
                        element: f.element,
                        term: d.val(),
                        page: this.resultsPage,
                        context: null,
                        matcher: f.matcher,
                        callback: this.bind(function(g) {
                            var i;
                            if (l == this.queryCount) {
                                if (!this.opened())
                                    return this.search.removeClass("select2-active"), void 0;
                                if (this.context = g.context === b ? null : g.context, this.opts.createSearchChoice && "" !== d.val() && (i = this.opts.createSearchChoice.call(h, d.val(), g.results), i !== b && null !== i && h.id(i) !== b && null !== h.id(i) && 0 === a(g.results).filter(function() {
                                    return q(h.id(this), h.id(i))
                                }).length && g.results.unshift(i)), 0 === g.results.length && J(f.formatNoMatches, "formatNoMatches"))
                                    return n("<li class='select2-no-results'>" + f.formatNoMatches(d.val()) + "</li>"), void 0;
                                e.empty(), h.opts.populateResults.call(this, e, g.results, {
                                    term: d.val(),
                                    page: this.resultsPage,
                                    context: null
                                }), g.more===!0 && J(f.formatLoadMore, "formatLoadMore") && (e.append("<li class='select2-more-results'>" + h.opts.escapeMarkup(f.formatLoadMore(this.resultsPage)) + "</li>"), window.setTimeout(function() {
                                    h.loadMoreIfNeeded()
                                }, 10)), this.postprocessResults(g, c), m(), this.opts.element.trigger({
                                    type: "select2-loaded",
                                    items: g
                                })
                            }
                        })
                    })
                }
            },
            cancel: function() {
                this.close()
            },
            blur: function() {
                this.opts.selectOnBlur && this.selectHighlighted({
                    noFocus: !0
                }), this.close(), this.container.removeClass("select2-container-active"), this.search[0] === document.activeElement && this.search.blur(), this.clearSearch(), this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus")
            },
            focusSearch: function() {
                y(this.search)
            },
            selectHighlighted: function(a) {
                var b = this.highlight(), c = this.results.find(".select2-highlighted"), d = c.closest(".select2-result").data("select2-data");
                d ? (this.highlight(b), this.onSelect(d, a)) : a && a.noFocus && this.close()
            },
            getPlaceholder: function() {
                var a;
                return this.opts.element.attr("placeholder") || this.opts.element.attr("data-placeholder") || this.opts.element.data("placeholder") || this.opts.placeholder || ((a = this.getPlaceholderOption()) !== b ? a.text() : b)
            },
            getPlaceholderOption: function() {
                if (this.select) {
                    var a = this.select.children().first();
                    if (this.opts.placeholderOption !== b)
                        return "first" === this.opts.placeholderOption && a || "function" == typeof this.opts.placeholderOption && this.opts.placeholderOption(this.select);
                    if ("" === a.text() && "" === a.val())
                        return a
                }
            },
            initContainerWidth: function() {
                function c() {
                    var c, d, e, f, g;
                    if ("off" === this.opts.width)
                        return null;
                    if ("element" === this.opts.width)
                        return 0 === this.opts.element.outerWidth(!1) ? "auto" : this.opts.element.outerWidth(!1) + "px";
                    if ("copy" === this.opts.width || "resolve" === this.opts.width) {
                        if (c = this.opts.element.attr("style"), c !== b)
                            for (d = c.split(";"), f = 0, g = d.length; g > f; f += 1)
                                if (e = d[f].replace(/\s/g, "").match(/[^-]width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i), null !== e && e.length >= 1)
                                    return e[1];
                        return "resolve" === this.opts.width ? (c = this.opts.element.css("width"), c.indexOf("%") > 0 ? c : 0 === this.opts.element.outerWidth(!1) ? "auto" : this.opts.element.outerWidth(!1) + "px") : null
                    }
                    return a.isFunction(this.opts.width) ? this.opts.width() : this.opts.width
                }
                var d = c.call(this);
                null !== d && this.container.css("width", d)
            }
        }), e = N(d, {
            createContainer: function() {
                var b = a(document.createElement("div")).attr({
                    "class": "select2-container"
                }).html(["<a href='javascript:void(0)' onclick='return false;' class='select2-choice' tabindex='-1'>", "   <span class='select2-chosen'>&nbsp;</span><abbr class='select2-search-choice-close'></abbr>", "   <span class='select2-arrow'><b></b></span>", "</a>", "<input class='select2-focusser select2-offscreen' type='text'/>", "<div class='select2-drop select2-display-none'>", "   <div class='select2-search'>", "       <input type='text' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' class='select2-input'/>", "   </div>", "   <ul class='select2-results'>", "   </ul>", "</div>"].join(""));
                return b
            },
            enableInterface: function() {
                this.parent.enableInterface.apply(this, arguments) && this.focusser.prop("disabled", !this.isInterfaceEnabled())
            },
            opening: function() {
                var c, d, e;
                this.opts.minimumResultsForSearch >= 0 && this.showSearch(!0), this.parent.opening.apply(this, arguments), this.showSearchInput!==!1 && this.search.val(this.focusser.val()), this.search.focus(), c = this.search.get(0), c.createTextRange ? (d = c.createTextRange(), d.collapse(!1), d.select()) : c.setSelectionRange && (e = this.search.val().length, c.setSelectionRange(e, e)), "" === this.search.val() && this.nextSearchTerm != b && (this.search.val(this.nextSearchTerm), this.search.select()), this.focusser.prop("disabled", !0).val(""), this.updateResults(!0), this.opts.element.trigger(a.Event("select2-open"))
            },
            close: function(a) {
                this.opened() && (this.parent.close.apply(this, arguments), a = a || {
                    focus: !0
                }, this.focusser.removeAttr("disabled"), a.focus && this.focusser.focus())
            },
            focus: function() {
                this.opened() ? this.close() : (this.focusser.removeAttr("disabled"), this.focusser.focus())
            },
            isFocused: function() {
                return this.container.hasClass("select2-container-active")
            },
            cancel: function() {
                this.parent.cancel.apply(this, arguments), this.focusser.removeAttr("disabled"), this.focusser.focus()
            },
            destroy: function() {
                a("label[for='" + this.focusser.attr("id") + "']").attr("for", this.opts.element.attr("id")), this.parent.destroy.apply(this, arguments)
            },
            initContainer: function() {
                var b, d = this.container, e = this.dropdown;
                this.opts.minimumResultsForSearch < 0 ? this.showSearch(!1) : this.showSearch(!0), this.selection = b = d.find(".select2-choice"), this.focusser = d.find(".select2-focusser"), this.focusser.attr("id", "s2id_autogen" + g()), a("label[for='" + this.opts.element.attr("id") + "']").attr("for", this.focusser.attr("id")), this.focusser.attr("tabindex", this.elementTabIndex), this.search.on("keydown", this.bind(function(a) {
                    if (this.isInterfaceEnabled()) {
                        if (a.which === c.PAGE_UP || a.which === c.PAGE_DOWN)
                            return A(a), void 0;
                        switch (a.which) {
                        case c.UP:
                        case c.DOWN:
                            return this.moveHighlight(a.which === c.UP?-1 : 1), A(a), void 0;
                        case c.ENTER:
                            return this.selectHighlighted(), A(a), void 0;
                        case c.TAB:
                            return this.opts.selectOnBlur && this.selectHighlighted({
                                noFocus: !0
                            }), void 0;
                        case c.ESC:
                            return this.cancel(a), A(a), void 0
                        }
                    }
                })), this.search.on("blur", this.bind(function() {
                    document.activeElement === this.body().get(0) && window.setTimeout(this.bind(function() {
                        this.search.focus()
                    }), 0)
                })), this.focusser.on("keydown", this.bind(function(a) {
                    if (this.isInterfaceEnabled() && a.which !== c.TAB&&!c.isControl(a)&&!c.isFunctionKey(a) && a.which !== c.ESC) {
                        if (this.opts.openOnEnter===!1 && a.which === c.ENTER)
                            return A(a), void 0;
                        if (a.which == c.DOWN || a.which == c.UP || a.which == c.ENTER && this.opts.openOnEnter) {
                            if (a.altKey || a.ctrlKey || a.shiftKey || a.metaKey)
                                return;
                            return this.open(), A(a), void 0
                        }
                        return a.which == c.DELETE || a.which == c.BACKSPACE ? (this.opts.allowClear && this.clear(), A(a), void 0) : void 0
                    }
                })), t(this.focusser), this.focusser.on("keyup-change input", this.bind(function(a) {
                    if (this.opts.minimumResultsForSearch >= 0) {
                        if (a.stopPropagation(), this.opened())
                            return;
                        this.open()
                    }
                })), b.on("mousedown", "abbr", this.bind(function(a) {
                    this.isInterfaceEnabled() && (this.clear(), B(a), this.close(), this.selection.focus())
                })), b.on("mousedown", this.bind(function(b) {
                    this.container.hasClass("select2-container-active") || this.opts.element.trigger(a.Event("select2-focus")), this.opened() ? this.close() : this.isInterfaceEnabled() && this.open(), A(b)
                })), e.on("mousedown", this.bind(function() {
                    this.search.focus()
                })), b.on("focus", this.bind(function(a) {
                    A(a)
                })), this.focusser.on("focus", this.bind(function() {
                    this.container.hasClass("select2-container-active") || this.opts.element.trigger(a.Event("select2-focus")), this.container.addClass("select2-container-active")
                })).on("blur", this.bind(function() {
                    this.opened() || (this.container.removeClass("select2-container-active"), this.opts.element.trigger(a.Event("select2-blur")))
                })), this.search.on("focus", this.bind(function() {
                    this.container.hasClass("select2-container-active") || this.opts.element.trigger(a.Event("select2-focus")), this.container.addClass("select2-container-active")
                })), this.initContainerWidth(), this.opts.element.addClass("select2-offscreen"), this.setPlaceholder()
            },
            clear: function(a) {
                var b = this.selection.data("select2-data");
                if (b) {
                    var c = this.getPlaceholderOption();
                    this.opts.element.val(c ? c.val() : ""), this.selection.find(".select2-chosen").empty(), this.selection.removeData("select2-data"), this.setPlaceholder(), a!==!1 && (this.opts.element.trigger({
                        type: "select2-removed",
                        val: this.id(b),
                        choice: b
                    }), this.triggerChange({
                        removed: b
                    }))
                }
            },
            initSelection: function() {
                if (this.isPlaceholderOptionSelected())
                    this.updateSelection(null), this.close(), this.setPlaceholder();
                else {
                    var c = this;
                    this.opts.initSelection.call(null, this.opts.element, function(a) {
                        a !== b && null !== a && (c.updateSelection(a), c.close(), c.setPlaceholder())
                    })
                }
            },
            isPlaceholderOptionSelected: function() {
                var a;
                return this.opts.placeholder ? (a = this.getPlaceholderOption()) !== b && a.is(":selected") || "" === this.opts.element.val() || this.opts.element.val() === b || null === this.opts.element.val() : !1
            },
            prepareOpts: function() {
                var b = this.parent.prepareOpts.apply(this, arguments), c = this;
                return "select" === b.element.get(0).tagName.toLowerCase() ? b.initSelection = function(a, b) {
                    var d = a.find(":selected");
                    b(c.optionToData(d))
                } : "data"in b && (b.initSelection = b.initSelection || function(c, d) {
                    var e = c.val(), f = null;
                    b.query({
                        matcher: function(a, c, d) {
                            var g = q(e, b.id(d));
                            return g && (f = d), g
                        },
                        callback: a.isFunction(d) ? function() {
                            d(f)
                        }
                        : a.noop
                    })
                }), b
            },
            getPlaceholder: function() {
                return this.select && this.getPlaceholderOption() === b ? b : this.parent.getPlaceholder.apply(this, arguments)
            },
            setPlaceholder: function() {
                var a = this.getPlaceholder();
                if (this.isPlaceholderOptionSelected() && a !== b) {
                    if (this.select && this.getPlaceholderOption() === b)
                        return;
                    this.selection.find(".select2-chosen").html(this.opts.escapeMarkup(a)), this.selection.addClass("select2-default"), this.container.removeClass("select2-allowclear")
                }
            },
            postprocessResults: function(a, b, c) {
                var d = 0, e = this;
                if (this.findHighlightableChoices().each2(function(a, b) {
                    return q(e.id(b.data("select2-data")), e.opts.element.val()) ? (d = a, !1) : void 0
                }), c!==!1 && (b===!0 && d >= 0 ? this.highlight(d) : this.highlight(0)), b===!0) {
                    var g = this.opts.minimumResultsForSearch;
                    g >= 0 && this.showSearch(L(a.results) >= g)
                }
            },
            showSearch: function(b) {
                this.showSearchInput !== b && (this.showSearchInput = b, this.dropdown.find(".select2-search").toggleClass("select2-search-hidden", !b), this.dropdown.find(".select2-search").toggleClass("select2-offscreen", !b), a(this.dropdown, this.container).toggleClass("select2-with-searchbox", b))
            },
            onSelect: function(a, b) {
                if (this.triggerSelect(a)) {
                    var c = this.opts.element.val(), d = this.data();
                    this.opts.element.val(this.id(a)), this.updateSelection(a), this.opts.element.trigger({
                        type: "select2-selected",
                        val: this.id(a),
                        choice: a
                    }), this.nextSearchTerm = this.opts.nextSearchTerm(a, this.search.val()), this.close(), b && b.noFocus || this.selection.focus(), q(c, this.id(a)) || this.triggerChange({
                        added: a,
                        removed: d
                    })
                }
            },
            updateSelection: function(a) {
                var d, e, c = this.selection.find(".select2-chosen");
                this.selection.data("select2-data", a), c.empty(), null !== a && (d = this.opts.formatSelection(a, c, this.opts.escapeMarkup)), d !== b && c.append(d), e = this.opts.formatSelectionCssClass(a, c), e !== b && c.addClass(e), this.selection.removeClass("select2-default"), this.opts.allowClear && this.getPlaceholder() !== b && this.container.addClass("select2-allowclear")
            },
            val: function() {
                var a, c=!1, d = null, e = this, f = this.data();
                if (0 === arguments.length)
                    return this.opts.element.val();
                if (a = arguments[0], arguments.length > 1 && (c = arguments[1]), this.select)
                    this.select.val(a).find(":selected").each2(function(a, b) {
                        return d = e.optionToData(b), !1
                    }), this.updateSelection(d), this.setPlaceholder(), c && this.triggerChange({
                        added: d,
                        removed: f
                    });
                else {
                    if (!a && 0 !== a)
                        return this.clear(c), void 0;
                    if (this.opts.initSelection === b)
                        throw new Error("cannot call val() if initSelection() is not defined");
                    this.opts.element.val(a), this.opts.initSelection(this.opts.element, function(a) {
                        e.opts.element.val(a ? e.id(a) : ""), e.updateSelection(a), e.setPlaceholder(), c && e.triggerChange({
                            added: a,
                            removed: f
                        })
                    })
                }
            },
            clearSearch: function() {
                this.search.val(""), this.focusser.val("")
            },
            data: function(a) {
                var c, d=!1;
                return 0 === arguments.length ? (c = this.selection.data("select2-data"), c == b && (c = null), c) : (arguments.length > 1 && (d = arguments[1]), a ? (c = this.data(), this.opts.element.val(a ? this.id(a) : ""), this.updateSelection(a), d && this.triggerChange({
                    added: a,
                    removed: c
                })) : this.clear(d), void 0)
            }
        }), f = N(d, {
            createContainer: function() {
                var b = a(document.createElement("div")).attr({
                    "class": "select2-container select2-container-multi"
                }).html(["<ul class='select2-choices'>", "  <li class='select2-search-field'>", "    <input type='text' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' class='select2-input'>", "  </li>", "</ul>", "<div class='select2-drop select2-drop-multi select2-display-none'>", "   <ul class='select2-results'>", "   </ul>", "</div>"].join(""));
                return b
            },
            prepareOpts: function() {
                var b = this.parent.prepareOpts.apply(this, arguments), c = this;
                return "select" === b.element.get(0).tagName.toLowerCase() ? b.initSelection = function(a, b) {
                    var d = [];
                    a.find(":selected").each2(function(a, b) {
                        d.push(c.optionToData(b))
                    }), b(d)
                } : "data"in b && (b.initSelection = b.initSelection || function(c, d) {
                    var e = r(c.val(), b.separator), f = [];
                    b.query({
                        matcher: function(c, d, g) {
                            var h = a.grep(e, function(a) {
                                return q(a, b.id(g))
                            }).length;
                            return h && f.push(g), h
                        },
                        callback: a.isFunction(d) ? function() {
                            for (var a = [], c = 0; c < e.length; c++)
                                for (var g = e[c], h = 0; h < f.length; h++) {
                                    var i = f[h];
                                    if (q(g, b.id(i))) {
                                        a.push(i), f.splice(h, 1);
                                        break
                                    }
                                }
                            d(a)
                        }
                        : a.noop
                    })
                }), b
            },
            selectChoice: function(a) {
                var b = this.container.find(".select2-search-choice-focus");
                b.length && a && a[0] == b[0] || (b.length && this.opts.element.trigger("choice-deselected", b), b.removeClass("select2-search-choice-focus"), a && a.length && (this.close(), a.addClass("select2-search-choice-focus"), this.opts.element.trigger("choice-selected", a)))
            },
            destroy: function() {
                a("label[for='" + this.search.attr("id") + "']").attr("for", this.opts.element.attr("id")), this.parent.destroy.apply(this, arguments)
            },
            initContainer: function() {
                var d, b = ".select2-choices";
                this.searchContainer = this.container.find(".select2-search-field"), this.selection = d = this.container.find(b);
                var e = this;
                this.selection.on("click", ".select2-search-choice", function() {
                    e.search[0].focus(), e.selectChoice(a(this))
                }), this.search.attr("id", "s2id_autogen" + g()), a("label[for='" + this.opts.element.attr("id") + "']").attr("for", this.search.attr("id")), this.search.on("input paste", this.bind(function() {
                    this.isInterfaceEnabled() && (this.opened() || this.open())
                })), this.search.attr("tabindex", this.elementTabIndex), this.keydowns = 0, this.search.on("keydown", this.bind(function(a) {
                    if (this.isInterfaceEnabled()) {
                        ++this.keydowns;
                        var b = d.find(".select2-search-choice-focus"), e = b.prev(".select2-search-choice:not(.select2-locked)"), f = b.next(".select2-search-choice:not(.select2-locked)"), g = z(this.search);
                        if (b.length && (a.which == c.LEFT || a.which == c.RIGHT || a.which == c.BACKSPACE || a.which == c.DELETE || a.which == c.ENTER)) {
                            var h = b;
                            return a.which == c.LEFT && e.length ? h = e : a.which == c.RIGHT ? h = f.length ? f : null : a.which === c.BACKSPACE ? (this.unselect(b.first()), this.search.width(10), h = e.length ? e : f) : a.which == c.DELETE ? (this.unselect(b.first()), this.search.width(10), h = f.length ? f : null) : a.which == c.ENTER && (h = null), this.selectChoice(h), A(a), h && h.length || this.open(), void 0
                        }
                        if ((a.which === c.BACKSPACE && 1 == this.keydowns || a.which == c.LEFT) && 0 == g.offset&&!g.length)
                            return this.selectChoice(d.find(".select2-search-choice:not(.select2-locked)").last()), A(a), void 0;
                        if (this.selectChoice(null), this.opened())
                            switch (a.which) {
                            case c.UP:
                            case c.DOWN:
                                return this.moveHighlight(a.which === c.UP?-1 : 1), A(a), void 0;
                            case c.ENTER:
                                return this.selectHighlighted(), A(a), void 0;
                            case c.TAB:
                                return this.opts.selectOnBlur && this.selectHighlighted({
                                    noFocus: !0
                                }), this.close(), void 0;
                            case c.ESC:
                                return this.cancel(a), A(a), void 0
                            }
                        if (a.which !== c.TAB&&!c.isControl(a)&&!c.isFunctionKey(a) && a.which !== c.BACKSPACE && a.which !== c.ESC) {
                            if (a.which === c.ENTER) {
                                if (this.opts.openOnEnter===!1)
                                    return;
                                if (a.altKey || a.ctrlKey || a.shiftKey || a.metaKey)
                                    return
                            }
                            this.open(), (a.which === c.PAGE_UP || a.which === c.PAGE_DOWN) && A(a), a.which === c.ENTER && A(a)
                        }
                    }
                })), this.search.on("keyup", this.bind(function() {
                    this.keydowns = 0, this.resizeSearch()
                })), this.search.on("blur", this.bind(function(b) {
                    this.container.removeClass("select2-container-active"), this.search.removeClass("select2-focused"), this.selectChoice(null), this.opened() || this.clearSearch(), b.stopImmediatePropagation(), this.opts.element.trigger(a.Event("select2-blur"))
                })), this.container.on("click", b, this.bind(function(b) {
                    this.isInterfaceEnabled() && (a(b.target).closest(".select2-search-choice").length > 0 || (this.selectChoice(null), this.clearPlaceholder(), this.container.hasClass("select2-container-active") || this.opts.element.trigger(a.Event("select2-focus")), this.open(), this.focusSearch(), b.preventDefault()))
                })), this.container.on("focus", b, this.bind(function() {
                    this.isInterfaceEnabled() && (this.container.hasClass("select2-container-active") || this.opts.element.trigger(a.Event("select2-focus")), this.container.addClass("select2-container-active"), this.dropdown.addClass("select2-drop-active"), this.clearPlaceholder())
                })), this.initContainerWidth(), this.opts.element.addClass("select2-offscreen"), this.clearSearch()
            },
            enableInterface: function() {
                this.parent.enableInterface.apply(this, arguments) && this.search.prop("disabled", !this.isInterfaceEnabled())
            },
            initSelection: function() {
                if ("" === this.opts.element.val() && "" === this.opts.element.text() && (this.updateSelection([]), this.close(), this.clearSearch()), this.select || "" !== this.opts.element.val()) {
                    var c = this;
                    this.opts.initSelection.call(null, this.opts.element, function(a) {
                        a !== b && null !== a && (c.updateSelection(a), c.close(), c.clearSearch())
                    })
                }
            },
            clearSearch: function() {
                var a = this.getPlaceholder(), c = this.getMaxSearchWidth();
                a !== b && 0 === this.getVal().length && this.search.hasClass("select2-focused")===!1 ? (this.search.val(a).addClass("select2-default"), this.search.width(c > 0 ? c : this.container.css("width"))) : this.search.val("").width(10)
            },
            clearPlaceholder: function() {
                this.search.hasClass("select2-default") && this.search.val("").removeClass("select2-default")
            },
            opening: function() {
                this.clearPlaceholder(), this.resizeSearch(), this.parent.opening.apply(this, arguments), this.focusSearch(), this.updateResults(!0), this.search.focus(), this.opts.element.trigger(a.Event("select2-open"))
            },
            close: function() {
                this.opened() && this.parent.close.apply(this, arguments)
            },
            focus: function() {
                this.close(), this.search.focus()
            },
            isFocused: function() {
                return this.search.hasClass("select2-focused")
            },
            updateSelection: function(b) {
                var c = [], d = [], e = this;
                a(b).each(function() {
                    o(e.id(this), c) < 0 && (c.push(e.id(this)), d.push(this))
                }), b = d, this.selection.find(".select2-search-choice").remove(), a(b).each(function() {
                    e.addSelectedChoice(this)
                }), e.postprocessResults()
            },
            tokenize: function() {
                var a = this.search.val();
                a = this.opts.tokenizer.call(this, a, this.data(), this.bind(this.onSelect), this.opts), null != a && a != b && (this.search.val(a), a.length > 0 && this.open())
            },
            onSelect: function(a, b) {
                this.triggerSelect(a) && (this.addSelectedChoice(a), this.opts.element.trigger({
                    type: "selected",
                    val: this.id(a),
                    choice: a
                }), (this.select ||!this.opts.closeOnSelect) && this.postprocessResults(a, !1, this.opts.closeOnSelect===!0), this.opts.closeOnSelect ? (this.close(), this.search.width(10)) : this.countSelectableResults() > 0 ? (this.search.width(10), this.resizeSearch(), this.getMaximumSelectionSize() > 0 && this.val().length >= this.getMaximumSelectionSize() && this.updateResults(!0), this.positionDropdown()) : (this.close(), this.search.width(10)), this.triggerChange({
                    added: a
                }), b && b.noFocus || this.focusSearch())
            },
            cancel: function() {
                this.close(), this.focusSearch()
            },
            addSelectedChoice: function(c) {
                var j, k, d=!c.locked, e = a("<li class='select2-search-choice'>    <div></div>    <a href='#' onclick='return false;' class='select2-search-choice-close' tabindex='-1'></a></li>"), f = a("<li class='select2-search-choice select2-locked'><div></div></li>"), g = d ? e : f, h = this.id(c), i = this.getVal();
                j = this.opts.formatSelection(c, g.find("div"), this.opts.escapeMarkup), j != b && g.find("div").replaceWith("<div>" + j + "</div>"), k = this.opts.formatSelectionCssClass(c, g.find("div")), k != b && g.addClass(k), d && g.find(".select2-search-choice-close").on("mousedown", A).on("click dblclick", this.bind(function(b) {
                    this.isInterfaceEnabled() && (a(b.target).closest(".select2-search-choice").fadeOut("fast", this.bind(function() {
                        this.unselect(a(b.target)), this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus"), this.close(), this.focusSearch()
                    })).dequeue(), A(b))
                })).on("focus", this.bind(function() {
                    this.isInterfaceEnabled() && (this.container.addClass("select2-container-active"), this.dropdown.addClass("select2-drop-active"))
                })), g.data("select2-data", c), g.insertBefore(this.searchContainer), i.push(h), this.setVal(i)
            },
            unselect: function(a) {
                var c, d, b = this.getVal();
                if (a = a.closest(".select2-search-choice"), 0 === a.length)
                    throw "Invalid argument: " + a + ". Must be .select2-search-choice";
                c = a.data("select2-data"), c && (d = o(this.id(c), b), d >= 0 && (b.splice(d, 1), this.setVal(b), this.select && this.postprocessResults()), a.remove(), this.opts.element.trigger({
                    type: "removed",
                    val: this.id(c),
                    choice: c
                }), this.triggerChange({
                    removed: c
                }))
            },
            postprocessResults: function(a, b, c) {
                var d = this.getVal(), e = this.results.find(".select2-result"), f = this.results.find(".select2-result-with-children"), g = this;
                e.each2(function(a, b) {
                    var c = g.id(b.data("select2-data"));
                    o(c, d) >= 0 && (b.addClass("select2-selected"), b.find(".select2-result-selectable").addClass("select2-selected"))
                }), f.each2(function(a, b) {
                    b.is(".select2-result-selectable") || 0 !== b.find(".select2-result-selectable:not(.select2-selected)").length || b.addClass("select2-selected")
                }), - 1 == this.highlight() && c!==!1 && g.highlight(0), !this.opts.createSearchChoice&&!e.filter(".select2-result:not(.select2-selected)").length > 0 && (!a || a&&!a.more && 0 === this.results.find(".select2-no-results").length) && J(g.opts.formatNoMatches, "formatNoMatches") && this.results.append("<li class='select2-no-results'>" + g.opts.formatNoMatches(g.search.val()) + "</li>")
            },
            getMaxSearchWidth: function() {
                return this.selection.width() - s(this.search)
            },
            resizeSearch: function() {
                var a, b, c, d, e, f = s(this.search);
                a = C(this.search) + 10, b = this.search.offset().left, c = this.selection.width(), d = this.selection.offset().left, e = c - (b - d) - f, a > e && (e = c - f), 40 > e && (e = c - f), 0 >= e && (e = a), this.search.width(e)
            },
            getVal: function() {
                var a;
                return this.select ? (a = this.select.val(), null === a ? [] : a) : (a = this.opts.element.val(), r(a, this.opts.separator))
            },
            setVal: function(b) {
                var c;
                this.select ? this.select.val(b) : (c = [], a(b).each(function() {
                    o(this, c) < 0 && c.push(this)
                }), this.opts.element.val(0 === c.length ? "" : c.join(this.opts.separator)))
            },
            buildChangeDetails: function(a, b) {
                for (var b = b.slice(0), a = a.slice(0), c = 0; c < b.length; c++)
                    for (var d = 0; d < a.length; d++)
                        q(this.opts.id(b[c]), this.opts.id(a[d])) && (b.splice(c, 1), c--, a.splice(d, 1), d--);
                return {
                    added: b,
                    removed: a
                }
            },
            val: function(c, d) {
                var e, f = this;
                if (0 === arguments.length)
                    return this.getVal();
                if (e = this.data(), e.length || (e = []), !c && 0 !== c)
                    return this.opts.element.val(""), this.updateSelection([]), this.clearSearch(), d && this.triggerChange({
                        added: this.data(),
                        removed: e
                    }), void 0;
                if (this.setVal(c), this.select)
                    this.opts.initSelection(this.select, this.bind(this.updateSelection)), d && this.triggerChange(this.buildChangeDetails(e, this.data()));
                else {
                    if (this.opts.initSelection === b)
                        throw new Error("val() cannot be called if initSelection() is not defined");
                    this.opts.initSelection(this.opts.element, function(b) {
                        var c = a.map(b, f.id);
                        f.setVal(c), f.updateSelection(b), f.clearSearch(), d && f.triggerChange(f.buildChangeDetails(e, this.data()))
                    })
                }
                this.clearSearch()
            },
            onSortStart: function() {
                if (this.select)
                    throw new Error("Sorting of elements is not supported when attached to <select>. Attach to <input type='hidden'/> instead.");
                this.search.width(0), this.searchContainer.hide()
            },
            onSortEnd: function() {
                var b = [], c = this;
                this.searchContainer.show(), this.searchContainer.appendTo(this.searchContainer.parent()), this.resizeSearch(), this.selection.find(".select2-search-choice").each(function() {
                    b.push(c.opts.id(a(this).data("select2-data")))
                }), this.setVal(b), this.triggerChange()
            },
            data: function(b, c) {
                var e, f, d = this;
                return 0 === arguments.length ? this.selection.find(".select2-search-choice").map(function() {
                    return a(this).data("select2-data")
                }).get() : (f = this.data(), b || (b = []), e = a.map(b, function(a) {
                    return d.opts.id(a)
                }), this.setVal(e), this.updateSelection(b), this.clearSearch(), c && this.triggerChange(this.buildChangeDetails(f, this.data())), void 0)
            }
        }), a.fn.select2 = function() {
            var d, g, h, i, j, c = Array.prototype.slice.call(arguments, 0), k = ["val", "destroy", "opened", "open", "close", "focus", "isFocused", "container", "dropdown", "onSortStart", "onSortEnd", "enable", "disable", "readonly", "positionDropdown", "data", "search"], l = ["opened", "isFocused", "container", "dropdown"], m = ["val", "data"], n = {
                search: "externalSearch"
            };
            return this.each(function() {
                if (0 === c.length || "object" == typeof c[0])
                    d = 0 === c.length ? {} : a.extend({}, c[0]), d.element = a(this), "select" === d.element.get(0).tagName.toLowerCase() ? j = d.element.prop("multiple") : (j = d.multiple ||!1, "tags"in d && (d.multiple = j=!0)), g = j ? new f : new e, g.init(d);
                else {
                    if ("string" != typeof c[0])
                        throw "Invalid arguments to select2 plugin: " + c;
                    if (o(c[0], k) < 0)
                        throw "Unknown method: " + c[0];
                    if (i = b, g = a(this).data("select2"), g === b)
                        return;
                    if (h = c[0], "container" === h ? i = g.container : "dropdown" === h ? i = g.dropdown : (n[h] && (h = n[h]), i = g[h].apply(g, c.slice(1))), o(c[0], l) >= 0 || o(c[0], m) && 1 == c.length)
                        return !1
                }
            }), i === b ? this : i
        }, a.fn.select2.defaults = {
            width: "copy",
            loadMorePadding: 0,
            closeOnSelect: !0,
            openOnEnter: !0,
            containerCss: {},
            dropdownCss: {},
            containerCssClass: "",
            dropdownCssClass: "",
            formatResult: function(a, b, c, d) {
                var e = [];
                return E(a.text, c.term, e, d), e.join("")
            },
            formatSelection: function(a, c, d) {
                return a ? d(a.text) : b
            },
            sortResults: function(a) {
                return a
            },
            formatResultCssClass: function() {
                return b
            },
            formatSelectionCssClass: function() {
                return b
            },
            formatNoMatches: function() {
                return "No matches found"
            },
            formatInputTooShort: function(a, b) {
                var c = b - a.length;
                return "Please enter " + c + " more character" + (1 == c ? "" : "s")
            },
            formatInputTooLong: function(a, b) {
                var c = a.length - b;
                return "Please delete " + c + " character" + (1 == c ? "" : "s")
            },
            formatSelectionTooBig: function(a) {
                return "You can only select " + a + " item" + (1 == a ? "" : "s")
            },
            formatLoadMore: function() {
                return "Loading more results..."
            },
            formatSearching: function() {
                return "Searching..."
            },
            minimumResultsForSearch: 0,
            minimumInputLength: 0,
            maximumInputLength: null,
            maximumSelectionSize: 0,
            id: function(a) {
                return a.id
            },
            matcher: function(a, b) {
                return n("" + b).toUpperCase().indexOf(n("" + a).toUpperCase()) >= 0
            },
            separator: ",",
            tokenSeparators: [],
            tokenizer: M,
            escapeMarkup: F,
            blurOnChange: !1,
            selectOnBlur: !1,
            adaptContainerCssClass: function(a) {
                return a
            },
            adaptDropdownCssClass: function() {
                return null
            },
            nextSearchTerm: function() {
                return b
            }
        }, a.fn.select2.ajaxDefaults = {
            transport: a.ajax,
            params: {
                type: "GET",
                cache: !1,
                dataType: "json"
            }
        }, window.Select2 = {
            query: {
                ajax: G,
                local: H,
                tags: I
            },
            util: {
                debounce: v,
                markMatch: E,
                escapeMarkup: F,
                stripDiacritics: n
            },
            "class": {
                "abstract": d,
                single: e,
                multi: f
            }
        }
    }
}(jQuery);;
/**
* bootstrap.js v3.0.0 by @fat and @mdo
* Copyright 2013 Twitter Inc.
* http://www.apache.org/licenses/LICENSE-2.0
*/
if (!jQuery)
    throw new Error("Bootstrap requires jQuery");
+ function(a) {
    "use strict";
    function b() {
        var a = document.createElement("bootstrap"), b = {
            WebkitTransition: "webkitTransitionEnd",
            MozTransition: "transitionend",
            OTransition: "oTransitionEnd otransitionend",
            transition: "transitionend"
        };
        for (var c in b)
            if (void 0 !== a.style[c])
                return {
                    end: b[c]
                }
    }
    a.fn.emulateTransitionEnd = function(b) {
        var c=!1, d = this;
        a(this).one(a.support.transition.end, function() {
            c=!0
        });
        var e = function() {
            c || a(d).trigger(a.support.transition.end)
        };
        return setTimeout(e, b), this
    }, a(function() {
        a.support.transition = b()
    })
}(window.jQuery), + function(a) {
    "use strict";
    var b = '[data-dismiss="alert"]', c = function(c) {
        a(c).on("click", b, this.close)
    };
    c.prototype.close = function(b) {
        function c() {
            f.trigger("closed.bs.alert").remove()
        }
        var d = a(this), e = d.attr("data-target");
        e || (e = d.attr("href"), e = e && e.replace(/.*(?=#[^\s]*$)/, ""));
        var f = a(e);
        b && b.preventDefault(), f.length || (f = d.hasClass("alert") ? d : d.parent()), f.trigger(b = a.Event("close.bs.alert")), b.isDefaultPrevented() || (f.removeClass("in"), a.support.transition && f.hasClass("fade") ? f.one(a.support.transition.end, c).emulateTransitionEnd(150) : c())
    };
    var d = a.fn.alert;
    a.fn.alert = function(b) {
        return this.each(function() {
            var d = a(this), e = d.data("bs.alert");
            e || d.data("bs.alert", e = new c(this)), "string" == typeof b && e[b].call(d)
        })
    }, a.fn.alert.Constructor = c, a.fn.alert.noConflict = function() {
        return a.fn.alert = d, this
    }, a(document).on("click.bs.alert.data-api", b, c.prototype.close)
}(window.jQuery), + function(a) {
    "use strict";
    var b = function(c, d) {
        this.$element = a(c), this.options = a.extend({}, b.DEFAULTS, d)
    };
    b.DEFAULTS = {
        loadingText: "loading..."
    }, b.prototype.setState = function(a) {
        var b = "disabled", c = this.$element, d = c.is("input") ? "val": "html", e = c.data();
        a += "Text", e.resetText || c.data("resetText", c[d]()), c[d](e[a] || this.options[a]), setTimeout(function() {
            "loadingText" == a ? c.addClass(b).attr(b, b) : c.removeClass(b).removeAttr(b)
        }, 0)
    }, b.prototype.toggle = function() {
        var a = this.$element.closest('[data-toggle="buttons"]');
        if (a.length) {
            var b = this.$element.find("input").prop("checked", !this.$element.hasClass("active")).trigger("change");
            "radio" === b.prop("type") && a.find(".active").removeClass("active")
        }
        this.$element.toggleClass("active")
    };
    var c = a.fn.button;
    a.fn.button = function(c) {
        return this.each(function() {
            var d = a(this), e = d.data("bs.button"), f = "object" == typeof c && c;
            e || d.data("bs.button", e = new b(this, f)), "toggle" == c ? e.toggle() : c && e.setState(c)
        })
    }, a.fn.button.Constructor = b, a.fn.button.noConflict = function() {
        return a.fn.button = c, this
    }, a(document).on("click.bs.button.data-api", "[data-toggle^=button]", function(b) {
        var c = a(b.target);
        c.hasClass("btn") || (c = c.closest(".btn")), c.button("toggle"), b.preventDefault()
    })
}(window.jQuery), + function(a) {
    "use strict";
    var b = function(b, c) {
        this.$element = a(b), this.$indicators = this.$element.find(".carousel-indicators"), this.options = c, this.paused = this.sliding = this.interval = this.$active = this.$items = null, "hover" == this.options.pause && this.$element.on("mouseenter", a.proxy(this.pause, this)).on("mouseleave", a.proxy(this.cycle, this))
    };
    b.DEFAULTS = {
        interval: 5e3,
        pause: "hover",
        wrap: !0
    }, b.prototype.cycle = function(b) {
        return b || (this.paused=!1), this.interval && clearInterval(this.interval), this.options.interval&&!this.paused && (this.interval = setInterval(a.proxy(this.next, this), this.options.interval)), this
    }, b.prototype.getActiveIndex = function() {
        return this.$active = this.$element.find(".item.active"), this.$items = this.$active.parent().children(), this.$items.index(this.$active)
    }, b.prototype.to = function(b) {
        var c = this, d = this.getActiveIndex();
        return b > this.$items.length - 1 || 0 > b ? void 0 : this.sliding ? this.$element.one("slid", function() {
            c.to(b)
        }) : d == b ? this.pause().cycle() : this.slide(b > d ? "next" : "prev", a(this.$items[b]))
    }, b.prototype.pause = function(b) {
        return b || (this.paused=!0), this.$element.find(".next, .prev").length && a.support.transition.end && (this.$element.trigger(a.support.transition.end), this.cycle(!0)), this.interval = clearInterval(this.interval), this
    }, b.prototype.next = function() {
        return this.sliding ? void 0 : this.slide("next")
    }, b.prototype.prev = function() {
        return this.sliding ? void 0 : this.slide("prev")
    }, b.prototype.slide = function(b, c) {
        var d = this.$element.find(".item.active"), e = c || d[b](), f = this.interval, g = "next" == b ? "left": "right", h = "next" == b ? "first": "last", i = this;
        if (!e.length) {
            if (!this.options.wrap)
                return;
            e = this.$element.find(".item")[h]()
        }
        this.sliding=!0, f && this.pause();
        var j = a.Event("slide.bs.carousel", {
            relatedTarget: e[0],
            direction: g
        });
        if (!e.hasClass("active")) {
            if (this.$indicators.length && (this.$indicators.find(".active").removeClass("active"), this.$element.one("slid", function() {
                var b = a(i.$indicators.children()[i.getActiveIndex()]);
                b && b.addClass("active")
            })), a.support.transition && this.$element.hasClass("slide")) {
                if (this.$element.trigger(j), j.isDefaultPrevented())
                    return;
                e.addClass(b), e[0].offsetWidth, d.addClass(g), e.addClass(g), d.one(a.support.transition.end, function() {
                    e.removeClass([b, g].join(" ")).addClass("active"), d.removeClass(["active", g].join(" ")), i.sliding=!1, setTimeout(function() {
                        i.$element.trigger("slid")
                    }, 0)
                }).emulateTransitionEnd(600)
            } else {
                if (this.$element.trigger(j), j.isDefaultPrevented())
                    return;
                d.removeClass("active"), e.addClass("active"), this.sliding=!1, this.$element.trigger("slid")
            }
            return f && this.cycle(), this
        }
    };
    var c = a.fn.carousel;
    a.fn.carousel = function(c) {
        return this.each(function() {
            var d = a(this), e = d.data("bs.carousel"), f = a.extend({}, b.DEFAULTS, d.data(), "object" == typeof c && c), g = "string" == typeof c ? c: f.slide;
            e || d.data("bs.carousel", e = new b(this, f)), "number" == typeof c ? e.to(c) : g ? e[g]() : f.interval && e.pause().cycle()
        })
    }, a.fn.carousel.Constructor = b, a.fn.carousel.noConflict = function() {
        return a.fn.carousel = c, this
    }, a(document).on("click.bs.carousel.data-api", "[data-slide], [data-slide-to]", function(b) {
        var c, d = a(this), e = a(d.attr("data-target") || (c = d.attr("href")) && c.replace(/.*(?=#[^\s]+$)/, "")), f = a.extend({}, e.data(), d.data()), g = d.attr("data-slide-to");
        g && (f.interval=!1), e.carousel(f), (g = d.attr("data-slide-to")) && e.data("bs.carousel").to(g), b.preventDefault()
    }), a(window).on("load", function() {
        a('[data-ride="carousel"]').each(function() {
            var b = a(this);
            b.carousel(b.data())
        })
    })
}(window.jQuery), + function(a) {
    "use strict";
    var b = function(c, d) {
        this.$element = a(c), this.options = a.extend({}, b.DEFAULTS, d), this.transitioning = null, this.options.parent && (this.$parent = a(this.options.parent)), this.options.toggle && this.toggle()
    };
    b.DEFAULTS = {
        toggle: !0
    }, b.prototype.dimension = function() {
        var a = this.$element.hasClass("width");
        return a ? "width" : "height"
    }, b.prototype.show = function() {
        if (!this.transitioning&&!this.$element.hasClass("in")) {
            var b = a.Event("show.bs.collapse");
            if (this.$element.trigger(b), !b.isDefaultPrevented()) {
                var c = this.$parent && this.$parent.find("> .panel > .in");
                if (c && c.length) {
                    var d = c.data("bs.collapse");
                    if (d && d.transitioning)
                        return;
                    c.collapse("hide"), d || c.data("bs.collapse", null)
                }
                var e = this.dimension();
                this.$element.removeClass("collapse").addClass("collapsing")[e](0), this.transitioning = 1;
                var f = function() {
                    this.$element.removeClass("collapsing").addClass("in")[e]("auto"), this.transitioning = 0, this.$element.trigger("shown.bs.collapse")
                };
                if (!a.support.transition)
                    return f.call(this);
                var g = a.camelCase(["scroll", e].join("-"));
                this.$element.one(a.support.transition.end, a.proxy(f, this)).emulateTransitionEnd(350)[e](this.$element[0][g])
            }
        }
    }, b.prototype.hide = function() {
        if (!this.transitioning && this.$element.hasClass("in")) {
            var b = a.Event("hide.bs.collapse");
            if (this.$element.trigger(b), !b.isDefaultPrevented()) {
                var c = this.dimension();
                this.$element[c](this.$element[c]())[0].offsetHeight, this.$element.addClass("collapsing").removeClass("collapse").removeClass("in"), this.transitioning = 1;
                var d = function() {
                    this.transitioning = 0, this.$element.trigger("hidden.bs.collapse").removeClass("collapsing").addClass("collapse")
                };
                return a.support.transition ? (this.$element[c](0).one(a.support.transition.end, a.proxy(d, this)).emulateTransitionEnd(350), void 0) : d.call(this)
            }
        }
    }, b.prototype.toggle = function() {
        this[this.$element.hasClass("in") ? "hide": "show"]()
    };
    var c = a.fn.collapse;
    a.fn.collapse = function(c) {
        return this.each(function() {
            var d = a(this), e = d.data("bs.collapse"), f = a.extend({}, b.DEFAULTS, d.data(), "object" == typeof c && c);
            e || d.data("bs.collapse", e = new b(this, f)), "string" == typeof c && e[c]()
        })
    }, a.fn.collapse.Constructor = b, a.fn.collapse.noConflict = function() {
        return a.fn.collapse = c, this
    }, a(document).on("click.bs.collapse.data-api", "[data-toggle=collapse]", function(b) {
        var c, d = a(this), e = d.attr("data-target") || b.preventDefault() || (c = d.attr("href")) && c.replace(/.*(?=#[^\s]+$)/, ""), f = a(e), g = f.data("bs.collapse"), h = g ? "toggle": d.data(), i = d.attr("data-parent"), j = i && a(i);
        g && g.transitioning || (j && j.find('[data-toggle=collapse][data-parent="' + i + '"]').not(d).addClass("collapsed"), d[f.hasClass("in") ? "addClass": "removeClass"]("collapsed")), f.collapse(h)
    })
}(window.jQuery), + function(a) {
    "use strict";
    function b() {
        a(d).remove(), a(e).each(function(b) {
            var d = c(a(this));
            d.hasClass("open") && (d.trigger(b = a.Event("hide.bs.dropdown")), b.isDefaultPrevented() || d.removeClass("open").trigger("hidden.bs.dropdown"))
        })
    }
    function c(b) {
        var c = b.attr("data-target");
        c || (c = b.attr("href"), c = c && /#/.test(c) && c.replace(/.*(?=#[^\s]*$)/, ""));
        var d = c && a(c);
        return d && d.length ? d : b.parent()
    }
    var d = ".dropdown-backdrop", e = "[data-toggle=dropdown]", f = function(b) {
        a(b).on("click.bs.dropdown", this.toggle)
    };
    f.prototype.toggle = function(d) {
        var e = a(this);
        if (!e.is(".disabled, :disabled")) {
            var f = c(e), g = f.hasClass("open");
            if (b(), !g) {
                if ("ontouchstart"in document.documentElement&&!f.closest(".navbar-nav").length && a('<div class="dropdown-backdrop"/>').insertAfter(a(this)).on("click", b), f.trigger(d = a.Event("show.bs.dropdown")), d.isDefaultPrevented())
                    return;
                f.toggleClass("open").trigger("shown.bs.dropdown"), e.focus()
            }
            return !1
        }
    }, f.prototype.keydown = function(b) {
        if (/(38|40|27)/.test(b.keyCode)) {
            var d = a(this);
            if (b.preventDefault(), b.stopPropagation(), !d.is(".disabled, :disabled")) {
                var f = c(d), g = f.hasClass("open");
                if (!g || g && 27 == b.keyCode)
                    return 27 == b.which && f.find(e).focus(), d.click();
                var h = a("[role=menu] li:not(.divider):visible a", f);
                if (h.length) {
                    var i = h.index(h.filter(":focus"));
                    38 == b.keyCode && i > 0 && i--, 40 == b.keyCode && i < h.length - 1 && i++, ~i || (i = 0), h.eq(i).focus()
                }
            }
        }
    };
    var g = a.fn.dropdown;
    a.fn.dropdown = function(b) {
        return this.each(function() {
            var c = a(this), d = c.data("dropdown");
            d || c.data("dropdown", d = new f(this)), "string" == typeof b && d[b].call(c)
        })
    }, a.fn.dropdown.Constructor = f, a.fn.dropdown.noConflict = function() {
        return a.fn.dropdown = g, this
    }, a(document).on("click.bs.dropdown.data-api", b).on("click.bs.dropdown.data-api", ".dropdown form", function(a) {
        a.stopPropagation()
    }).on("click.bs.dropdown.data-api", e, f.prototype.toggle).on("keydown.bs.dropdown.data-api", e + ", [role=menu]", f.prototype.keydown)
}(window.jQuery), + function(a) {
    "use strict";
    var b = function(b, c) {
        this.options = c, this.$element = a(b), this.$backdrop = this.isShown = null, this.options.remote && this.$element.load(this.options.remote)
    };
    b.DEFAULTS = {
        backdrop: !0,
        keyboard: !0,
        show: !0
    }, b.prototype.toggle = function(a) {
        return this[this.isShown ? "hide": "show"](a)
    }, b.prototype.show = function(b) {
        var c = this, d = a.Event("show.bs.modal", {
            relatedTarget: b
        });
        this.$element.trigger(d), this.isShown || d.isDefaultPrevented() || (this.isShown=!0, this.escape(), this.$element.on("click.dismiss.modal", '[data-dismiss="modal"]', a.proxy(this.hide, this)), this.backdrop(function() {
            var d = a.support.transition && c.$element.hasClass("fade");
            c.$element.parent().length || c.$element.appendTo(document.body), c.$element.show(), d && c.$element[0].offsetWidth, c.$element.addClass("in").attr("aria-hidden", !1), c.enforceFocus();
            var e = a.Event("shown.bs.modal", {
                relatedTarget: b
            });
            d ? c.$element.find(".modal-dialog").one(a.support.transition.end, function() {
                c.$element.focus().trigger(e)
            }).emulateTransitionEnd(300) : c.$element.focus().trigger(e)
        }))
    }, b.prototype.hide = function(b) {
        b && b.preventDefault(), b = a.Event("hide.bs.modal"), this.$element.trigger(b), this.isShown&&!b.isDefaultPrevented() && (this.isShown=!1, this.escape(), a(document).off("focusin.bs.modal"), this.$element.removeClass("in").attr("aria-hidden", !0).off("click.dismiss.modal"), a.support.transition && this.$element.hasClass("fade") ? this.$element.one(a.support.transition.end, a.proxy(this.hideModal, this)).emulateTransitionEnd(300) : this.hideModal())
    }, b.prototype.enforceFocus = function() {
        a(document).off("focusin.bs.modal").on("focusin.bs.modal", a.proxy(function(a) {
            this.$element[0] === a.target || this.$element.has(a.target).length || this.$element.focus()
        }, this))
    }, b.prototype.escape = function() {
        this.isShown && this.options.keyboard ? this.$element.on("keyup.dismiss.bs.modal", a.proxy(function(a) {
            27 == a.which && this.hide()
        }, this)) : this.isShown || this.$element.off("keyup.dismiss.bs.modal")
    }, b.prototype.hideModal = function() {
        var a = this;
        this.$element.hide(), this.backdrop(function() {
            a.removeBackdrop(), a.$element.trigger("hidden.bs.modal")
        })
    }, b.prototype.removeBackdrop = function() {
        this.$backdrop && this.$backdrop.remove(), this.$backdrop = null
    }, b.prototype.backdrop = function(b) {
        var c = this.$element.hasClass("fade") ? "fade": "";
        if (this.isShown && this.options.backdrop) {
            var d = a.support.transition && c;
            if (this.$backdrop = a('<div class="modal-backdrop ' + c + '" />').appendTo(document.body), this.$element.on("click.dismiss.modal", a.proxy(function(a) {
                a.target === a.currentTarget && ("static" == this.options.backdrop ? this.$element[0].focus.call(this.$element[0]) : this.hide.call(this))
            }, this)), d && this.$backdrop[0].offsetWidth, this.$backdrop.addClass("in"), !b)
                return;
            d ? this.$backdrop.one(a.support.transition.end, b).emulateTransitionEnd(150) : b()
        } else
            !this.isShown && this.$backdrop ? (this.$backdrop.removeClass("in"), a.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one(a.support.transition.end, b).emulateTransitionEnd(150) : b()) : b && b()
    };
    var c = a.fn.modal;
    a.fn.modal = function(c, d) {
        return this.each(function() {
            var e = a(this), f = e.data("bs.modal"), g = a.extend({}, b.DEFAULTS, e.data(), "object" == typeof c && c);
            f || e.data("bs.modal", f = new b(this, g)), "string" == typeof c ? f[c](d) : g.show && f.show(d)
        })
    }, a.fn.modal.Constructor = b, a.fn.modal.noConflict = function() {
        return a.fn.modal = c, this
    }, a(document).on("click.bs.modal.data-api", '[data-toggle="modal"]', function(b) {
        var c = a(this), d = c.attr("href"), e = a(c.attr("data-target") || d && d.replace(/.*(?=#[^\s]+$)/, "")), f = e.data("modal") ? "toggle": a.extend({
            remote: !/#/.test(d) && d
        }, e.data(), c.data());
        b.preventDefault(), e.modal(f, this).one("hide", function() {
            c.is(":visible") && c.focus()
        })
    }), a(document).on("show.bs.modal", ".modal", function() {
        a(document.body).addClass("modal-open")
    }).on("hidden.bs.modal", ".modal", function() {
        a(document.body).removeClass("modal-open")
    })
}(window.jQuery), + function(a) {
    "use strict";
    var b = function(a, b) {
        this.type = this.options = this.enabled = this.timeout = this.hoverState = this.$element = null, this.init("tooltip", a, b)
    };
    b.DEFAULTS = {
        animation: !0,
        placement: "top",
        selector: !1,
        template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
        trigger: "hover focus",
        title: "",
        delay: 0,
        html: !1,
        container: !1
    }, b.prototype.init = function(b, c, d) {
        this.enabled=!0, this.type = b, this.$element = a(c), this.options = this.getOptions(d);
        for (var e = this.options.trigger.split(" "), f = e.length; f--;) {
            var g = e[f];
            if ("click" == g)
                this.$element.on("click." + this.type, this.options.selector, a.proxy(this.toggle, this));
            else if ("manual" != g) {
                var h = "hover" == g ? "mouseenter": "focus", i = "hover" == g ? "mouseleave": "blur";
                this.$element.on(h + "." + this.type, this.options.selector, a.proxy(this.enter, this)), this.$element.on(i + "." + this.type, this.options.selector, a.proxy(this.leave, this))
            }
        }
        this.options.selector ? this._options = a.extend({}, this.options, {
            trigger: "manual",
            selector: ""
        }) : this.fixTitle()
    }, b.prototype.getDefaults = function() {
        return b.DEFAULTS
    }, b.prototype.getOptions = function(b) {
        return b = a.extend({}, this.getDefaults(), this.$element.data(), b), b.delay && "number" == typeof b.delay && (b.delay = {
            show: b.delay,
            hide: b.delay
        }), b
    }, b.prototype.getDelegateOptions = function() {
        var b = {}, c = this.getDefaults();
        return this._options && a.each(this._options, function(a, d) {
            c[a] != d && (b[a] = d)
        }), b
    }, b.prototype.enter = function(b) {
        var c = b instanceof this.constructor ? b: a(b.currentTarget)[this.type](this.getDelegateOptions()).data("bs." + this.type);
        return clearTimeout(c.timeout), c.hoverState = "in", c.options.delay && c.options.delay.show ? (c.timeout = setTimeout(function() {
            "in" == c.hoverState && c.show()
        }, c.options.delay.show), void 0) : c.show()
    }, b.prototype.leave = function(b) {
        var c = b instanceof this.constructor ? b: a(b.currentTarget)[this.type](this.getDelegateOptions()).data("bs." + this.type);
        return clearTimeout(c.timeout), c.hoverState = "out", c.options.delay && c.options.delay.hide ? (c.timeout = setTimeout(function() {
            "out" == c.hoverState && c.hide()
        }, c.options.delay.hide), void 0) : c.hide()
    }, b.prototype.show = function() {
        var b = a.Event("show.bs." + this.type);
        if (this.hasContent() && this.enabled) {
            if (this.$element.trigger(b), b.isDefaultPrevented())
                return;
            var c = this.tip();
            this.setContent(), this.options.animation && c.addClass("fade");
            var d = "function" == typeof this.options.placement ? this.options.placement.call(this, c[0], this.$element[0]): this.options.placement, e = /\s?auto?\s?/i, f = e.test(d);
            f && (d = d.replace(e, "") || "top"), c.detach().css({
                top: 0,
                left: 0,
                display: "block"
            }).addClass(d), this.options.container ? c.appendTo(this.options.container) : c.insertAfter(this.$element);
            var g = this.getPosition(), h = c[0].offsetWidth, i = c[0].offsetHeight;
            if (f) {
                var j = this.$element.parent(), k = d, l = document.documentElement.scrollTop || document.body.scrollTop, m = "body" == this.options.container ? window.innerWidth: j.outerWidth(), n = "body" == this.options.container ? window.innerHeight: j.outerHeight(), o = "body" == this.options.container ? 0: j.offset().left;
                d = "bottom" == d && g.top + g.height + i - l > n ? "top" : "top" == d && g.top - l - i < 0 ? "bottom" : "right" == d && g.right + h > m ? "left" : "left" == d && g.left - h < o ? "right" : d, c.removeClass(k).addClass(d)
            }
            var p = this.getCalculatedOffset(d, g, h, i);
            this.applyPlacement(p, d), this.$element.trigger("shown.bs." + this.type)
        }
    }, b.prototype.applyPlacement = function(a, b) {
        var c, d = this.tip(), e = d[0].offsetWidth, f = d[0].offsetHeight, g = parseInt(d.css("margin-top"), 10), h = parseInt(d.css("margin-left"), 10);
        isNaN(g) && (g = 0), isNaN(h) && (h = 0), a.top = a.top + g, a.left = a.left + h, d.offset(a).addClass("in");
        var i = d[0].offsetWidth, j = d[0].offsetHeight;
        if ("top" == b && j != f && (c=!0, a.top = a.top + f - j), /bottom|top/.test(b)) {
            var k = 0;
            a.left < 0 && (k =- 2 * a.left, a.left = 0, d.offset(a), i = d[0].offsetWidth, j = d[0].offsetHeight), this.replaceArrow(k - e + i, i, "left")
        } else
            this.replaceArrow(j - f, j, "top");
        c && d.offset(a)
    }, b.prototype.replaceArrow = function(a, b, c) {
        this.arrow().css(c, a ? 50 * (1 - a / b) + "%" : "")
    }, b.prototype.setContent = function() {
        var a = this.tip(), b = this.getTitle();
        a.find(".tooltip-inner")[this.options.html ? "html": "text"](b), a.removeClass("fade in top bottom left right")
    }, b.prototype.hide = function() {
        function b() {
            "in" != c.hoverState && d.detach()
        }
        var c = this, d = this.tip(), e = a.Event("hide.bs." + this.type);
        return this.$element.trigger(e), e.isDefaultPrevented() ? void 0 : (d.removeClass("in"), a.support.transition && this.$tip.hasClass("fade") ? d.one(a.support.transition.end, b).emulateTransitionEnd(150) : b(), this.$element.trigger("hidden.bs." + this.type), this)
    }, b.prototype.fixTitle = function() {
        var a = this.$element;
        (a.attr("title") || "string" != typeof a.attr("data-original-title")) && a.attr("data-original-title", a.attr("title") || "").attr("title", "")
    }, b.prototype.hasContent = function() {
        return this.getTitle()
    }, b.prototype.getPosition = function() {
        var b = this.$element[0];
        return a.extend({}, "function" == typeof b.getBoundingClientRect ? b.getBoundingClientRect() : {
            width: b.offsetWidth,
            height: b.offsetHeight
        }, this.$element.offset())
    }, b.prototype.getCalculatedOffset = function(a, b, c, d) {
        return "bottom" == a ? {
            top: b.top + b.height,
            left: b.left + b.width / 2 - c / 2
        } : "top" == a ? {
            top: b.top - d,
            left: b.left + b.width / 2 - c / 2
        } : "left" == a ? {
            top: b.top + b.height / 2 - d / 2,
            left: b.left - c
        } : {
            top: b.top + b.height / 2 - d / 2,
            left: b.left + b.width
        }
    }, b.prototype.getTitle = function() {
        var a, b = this.$element, c = this.options;
        return a = b.attr("data-original-title") || ("function" == typeof c.title ? c.title.call(b[0]) : c.title)
    }, b.prototype.tip = function() {
        return this.$tip = this.$tip || a(this.options.template)
    }, b.prototype.arrow = function() {
        return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow")
    }, b.prototype.validate = function() {
        this.$element[0].parentNode || (this.hide(), this.$element = null, this.options = null)
    }, b.prototype.enable = function() {
        this.enabled=!0
    }, b.prototype.disable = function() {
        this.enabled=!1
    }, b.prototype.toggleEnabled = function() {
        this.enabled=!this.enabled
    }, b.prototype.toggle = function(b) {
        var c = b ? a(b.currentTarget)[this.type](this.getDelegateOptions()).data("bs." + this.type): this;
        c.tip().hasClass("in") ? c.leave(c) : c.enter(c)
    }, b.prototype.destroy = function() {
        this.hide().$element.off("." + this.type).removeData("bs." + this.type)
    };
    var c = a.fn.tooltip;
    a.fn.tooltip = function(c) {
        return this.each(function() {
            var d = a(this), e = d.data("bs.tooltip"), f = "object" == typeof c && c;
            e || d.data("bs.tooltip", e = new b(this, f)), "string" == typeof c && e[c]()
        })
    }, a.fn.tooltip.Constructor = b, a.fn.tooltip.noConflict = function() {
        return a.fn.tooltip = c, this
    }
}(window.jQuery), + function(a) {
    "use strict";
    var b = function(a, b) {
        this.init("popover", a, b)
    };
    if (!a.fn.tooltip)
        throw new Error("Popover requires tooltip.js");
    b.DEFAULTS = a.extend({}, a.fn.tooltip.Constructor.DEFAULTS, {
        placement: "right",
        trigger: "click",
        content: "",
        template: '<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
    }), b.prototype = a.extend({}, a.fn.tooltip.Constructor.prototype), b.prototype.constructor = b, b.prototype.getDefaults = function() {
        return b.DEFAULTS
    }, b.prototype.setContent = function() {
        var a = this.tip(), b = this.getTitle(), c = this.getContent();
        a.find(".popover-title")[this.options.html ? "html": "text"](b), a.find(".popover-content")[this.options.html ? "html": "text"](c), a.removeClass("fade top bottom left right in"), a.find(".popover-title").html() || a.find(".popover-title").hide()
    }, b.prototype.hasContent = function() {
        return this.getTitle() || this.getContent()
    }, b.prototype.getContent = function() {
        var a = this.$element, b = this.options;
        return a.attr("data-content") || ("function" == typeof b.content ? b.content.call(a[0]) : b.content)
    }, b.prototype.arrow = function() {
        return this.$arrow = this.$arrow || this.tip().find(".arrow")
    }, b.prototype.tip = function() {
        return this.$tip || (this.$tip = a(this.options.template)), this.$tip
    };
    var c = a.fn.popover;
    a.fn.popover = function(c) {
        return this.each(function() {
            var d = a(this), e = d.data("bs.popover"), f = "object" == typeof c && c;
            e || d.data("bs.popover", e = new b(this, f)), "string" == typeof c && e[c]()
        })
    }, a.fn.popover.Constructor = b, a.fn.popover.noConflict = function() {
        return a.fn.popover = c, this
    }
}(window.jQuery), + function(a) {
    "use strict";
    function b(c, d) {
        var e, f = a.proxy(this.process, this);
        this.$element = a(c).is("body") ? a(window) : a(c), this.$body = a("body"), this.$scrollElement = this.$element.on("scroll.bs.scroll-spy.data-api", f), this.options = a.extend({}, b.DEFAULTS, d), this.selector = (this.options.target || (e = a(c).attr("href")) && e.replace(/.*(?=#[^\s]+$)/, "") || "") + " .nav li > a", this.offsets = a([]), this.targets = a([]), this.activeTarget = null, this.refresh(), this.process()
    }
    b.DEFAULTS = {
        offset: 10
    }, b.prototype.refresh = function() {
        var b = this.$element[0] == window ? "offset": "position";
        this.offsets = a([]), this.targets = a([]);
        var c = this;
        this.$body.find(this.selector).map(function() {
            var d = a(this), e = d.data("target") || d.attr("href"), f = /^#\w/.test(e) && a(e);
            return f && f.length && [[f[b]().top + (!a.isWindow(c.$scrollElement.get(0)) && c.$scrollElement.scrollTop()), e]] || null
        }).sort(function(a, b) {
            return a[0] - b[0]
        }).each(function() {
            c.offsets.push(this[0]), c.targets.push(this[1])
        })
    }, b.prototype.process = function() {
        var a, b = this.$scrollElement.scrollTop() + this.options.offset, c = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight, d = c - this.$scrollElement.height(), e = this.offsets, f = this.targets, g = this.activeTarget;
        if (b >= d)
            return g != (a = f.last()[0]) && this.activate(a);
        for (a = e.length; a--;)
            g != f[a] && b >= e[a] && (!e[a + 1] || b <= e[a + 1]) && this.activate(f[a])
    }, b.prototype.activate = function(b) {
        this.activeTarget = b, a(this.selector).parents(".active").removeClass("active");
        var c = this.selector + '[data-target="' + b + '"],' + this.selector + '[href="' + b + '"]', d = a(c).parents("li").addClass("active");
        d.parent(".dropdown-menu").length && (d = d.closest("li.dropdown").addClass("active")), d.trigger("activate")
    };
    var c = a.fn.scrollspy;
    a.fn.scrollspy = function(c) {
        return this.each(function() {
            var d = a(this), e = d.data("bs.scrollspy"), f = "object" == typeof c && c;
            e || d.data("bs.scrollspy", e = new b(this, f)), "string" == typeof c && e[c]()
        })
    }, a.fn.scrollspy.Constructor = b, a.fn.scrollspy.noConflict = function() {
        return a.fn.scrollspy = c, this
    }, a(window).on("load", function() {
        a('[data-spy="scroll"]').each(function() {
            var b = a(this);
            b.scrollspy(b.data())
        })
    })
}(window.jQuery), + function(a) {
    "use strict";
    var b = function(b) {
        this.element = a(b)
    };
    b.prototype.show = function() {
        var b = this.element, c = b.closest("ul:not(.dropdown-menu)"), d = b.attr("data-target");
        if (d || (d = b.attr("href"), d = d && d.replace(/.*(?=#[^\s]*$)/, "")), !b.parent("li").hasClass("active")) {
            var e = c.find(".active:last a")[0], f = a.Event("show.bs.tab", {
                relatedTarget: e
            });
            if (b.trigger(f), !f.isDefaultPrevented()) {
                var g = a(d);
                this.activate(b.parent("li"), c), this.activate(g, g.parent(), function() {
                    b.trigger({
                        type: "shown.bs.tab",
                        relatedTarget: e
                    })
                })
            }
        }
    }, b.prototype.activate = function(b, c, d) {
        function e() {
            f.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"), b.addClass("active"), g ? (b[0].offsetWidth, b.addClass("in")) : b.removeClass("fade"), b.parent(".dropdown-menu") && b.closest("li.dropdown").addClass("active"), d && d()
        }
        var f = c.find("> .active"), g = d && a.support.transition && f.hasClass("fade");
        g ? f.one(a.support.transition.end, e).emulateTransitionEnd(150) : e(), f.removeClass("in")
    };
    var c = a.fn.tab;
    a.fn.tab = function(c) {
        return this.each(function() {
            var d = a(this), e = d.data("bs.tab");
            e || d.data("bs.tab", e = new b(this)), "string" == typeof c && e[c]()
        })
    }, a.fn.tab.Constructor = b, a.fn.tab.noConflict = function() {
        return a.fn.tab = c, this
    }, a(document).on("click.bs.tab.data-api", '[data-toggle="tab"], [data-toggle="pill"]', function(b) {
        b.preventDefault(), a(this).tab("show")
    })
}(window.jQuery), + function(a) {
    "use strict";
    var b = function(c, d) {
        this.options = a.extend({}, b.DEFAULTS, d), this.$window = a(window).on("scroll.bs.affix.data-api", a.proxy(this.checkPosition, this)).on("click.bs.affix.data-api", a.proxy(this.checkPositionWithEventLoop, this)), this.$element = a(c), this.affixed = this.unpin = null, this.checkPosition()
    };
    b.RESET = "affix affix-top affix-bottom", b.DEFAULTS = {
        offset: 0
    }, b.prototype.checkPositionWithEventLoop = function() {
        setTimeout(a.proxy(this.checkPosition, this), 1)
    }, b.prototype.checkPosition = function() {
        if (this.$element.is(":visible")) {
            var c = a(document).height(), d = this.$window.scrollTop(), e = this.$element.offset(), f = this.options.offset, g = f.top, h = f.bottom;
            "object" != typeof f && (h = g = f), "function" == typeof g && (g = f.top()), "function" == typeof h && (h = f.bottom());
            var i = null != this.unpin && d + this.unpin <= e.top?!1 : null != h && e.top + this.$element.height() >= c - h ? "bottom" : null != g && g >= d ? "top" : !1;
            this.affixed !== i && (this.unpin && this.$element.css("top", ""), this.affixed = i, this.unpin = "bottom" == i ? e.top - d : null, this.$element.removeClass(b.RESET).addClass("affix" + (i ? "-" + i : "")), "bottom" == i && this.$element.offset({
                top: document.body.offsetHeight - h - this.$element.height()
            }))
        }
    };
    var c = a.fn.affix;
    a.fn.affix = function(c) {
        return this.each(function() {
            var d = a(this), e = d.data("bs.affix"), f = "object" == typeof c && c;
            e || d.data("bs.affix", e = new b(this, f)), "string" == typeof c && e[c]()
        })
    }, a.fn.affix.Constructor = b, a.fn.affix.noConflict = function() {
        return a.fn.affix = c, this
    }, a(window).on("load", function() {
        a('[data-spy="affix"]').each(function() {
            var b = a(this), c = b.data();
            c.offset = c.offset || {}, c.offsetBottom && (c.offset.bottom = c.offsetBottom), c.offsetTop && (c.offset.top = c.offsetTop), b.affix(c)
        })
    })
}(window.jQuery);;
/* =========================================================
 * bootstrap-datepicker.js
 * http://www.eyecon.ro/bootstrap-datepicker
 * =========================================================
 * Copyright 2012 Stefan Petre
 * Improvements by Andrew Rowls
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */

(function( $ ) {

    var $window = $(window);

    function UTCDate() {
        return new Date(Date.UTC.apply(Date, arguments));
    }
    function UTCToday() {
        var today = new Date();
        return UTCDate(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate());
    }


    // Picker object

    var Datepicker = function(element, options) {
        var that = this;

        this._process_options(options);

        this.element = $(element);
        this.isInline = false;
        this.isInput = this.element.is('input');
        this.component = this.element.is('.date') ? this.element.find('.add-on, .btn') : false;
        this.hasInput = this.component && this.element.find('input').length;
        if (this.component && this.component.length === 0)
            this.component = false;

        this.picker = $(DPGlobal.template);
        this._buildEvents();
        this._attachEvents();

        if (this.isInline) {
            this.picker.addClass('datepicker-inline').appendTo(this.element);
        } else {
            this.picker.addClass('datepicker-dropdown dropdown-menu');
        }

        if (this.o.rtl) {
            this.picker.addClass('datepicker-rtl');
            this.picker.find('.prev i, .next i')
            .toggleClass('icon-arrow-left icon-arrow-right');
        }


        this.viewMode = this.o.startView;

        if (this.o.calendarWeeks)
            this.picker.find('tfoot th.today')
            .attr('colspan', function(i, val) {
                return parseInt(val) + 1;
            });

        this._allow_update = false;

        this.setStartDate(this._o.startDate);
        this.setEndDate(this._o.endDate);
        this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled);

        this.fillDow();
        this.fillMonths();

        this._allow_update = true;

        this.update();
        this.showMode();

        if (this.isInline) {
            this.show();
        }
    };

    Datepicker.prototype = {
        constructor: Datepicker,

        _process_options: function(opts) {
            // Store raw options for reference
            this._o = $.extend({}, this._o, opts);
            // Processed options
            var o = this.o = $.extend({}, this._o);

            // Check if "de-DE" style date is available, if not language should
            // fallback to 2 letter code eg "de"
            var lang = o.language;
            if (!dates[lang]) {
                lang = lang.split('-')[0];
                if (!dates[lang])
                    lang = defaults.language;
            }
            o.language = lang;

            switch (o.startView) {
            case 2:
            case 'decade':
                o.startView = 2;
                break;
            case 1:
            case 'year':
                o.startView = 1;
                break;
            default:
                o.startView = 0;
            }

            switch (o.minViewMode) {
            case 1:
            case 'months':
                o.minViewMode = 1;
                break;
            case 2:
            case 'years':
                o.minViewMode = 2;
                break;
            default:
                o.minViewMode = 0;
            }

            o.startView = Math.max(o.startView, o.minViewMode);

            o.weekStart %= 7;
            o.weekEnd = ((o.weekStart + 6) % 7);

            var format = DPGlobal.parseFormat(o.format);
            if (o.startDate !== - Infinity) {
                if (!!o.startDate) {
                    if (o.startDate instanceof Date)
                        o.startDate = this._local_to_utc(this._zero_time(o.startDate));
                    else
                        o.startDate = DPGlobal.parseDate(o.startDate, format, o.language);
                } else {
                    o.startDate = - Infinity;
                }
            }
            if (o.endDate !== Infinity) {
                if (!!o.endDate) {
                    if (o.endDate instanceof Date)
                        o.endDate = this._local_to_utc(this._zero_time(o.endDate));
                    else
                        o.endDate = DPGlobal.parseDate(o.endDate, format, o.language);
                } else {
                    o.endDate = Infinity;
                }
            }

            o.daysOfWeekDisabled = o.daysOfWeekDisabled || [];
            if (!$.isArray(o.daysOfWeekDisabled))
                o.daysOfWeekDisabled = o.daysOfWeekDisabled.split(/[,\s]*/);
            o.daysOfWeekDisabled = $.map(o.daysOfWeekDisabled, function (d) {
                return parseInt(d, 10);
            });

            var plc = String(o.orientation).toLowerCase().split(/\s+/g),
            _plc = o.orientation.toLowerCase();
            plc = $.grep(plc, function(word) {
                return (/^auto|left|right|top|bottom$/).test(word);
            });
            o.orientation = {
                x: 'auto',
                y: 'auto'
            };
            if (!_plc || _plc === 'auto')
            ; // no action
            else if (plc.length === 1) {
                switch (plc[0]) {
                case 'top':
                case 'bottom':
                    o.orientation.y = plc[0];
                    break;
                case 'left':
                case 'right':
                    o.orientation.x = plc[0];
                    break;
                }
            } else {
                _plc = $.grep(plc, function(word) {
                    return (/^left|right$/).test(word);
                });
                o.orientation.x = _plc[0] || 'auto';

                _plc = $.grep(plc, function(word) {
                    return (/^top|bottom$/).test(word);
                });
                o.orientation.y = _plc[0] || 'auto';
            }
        },
        _events: [],
        _secondaryEvents: [],
        _applyEvents: function(evs) {
            for (var i = 0, el, ev; i < evs.length; i++) {
                el = evs[i][0];
                ev = evs[i][1];
                el.on(ev);
            }
        },
        _unapplyEvents: function(evs) {
            for (var i = 0, el, ev; i < evs.length; i++) {
                el = evs[i][0];
                ev = evs[i][1];
                el.off(ev);
            }
        },
        _buildEvents: function() {
            if (this.isInput) {
                // single input
                this._events = [
                [this.element, {
                    focus: $.proxy(this.show, this),
                    keyup: $.proxy(this.update, this),
                    keydown: $.proxy(this.keydown, this)
                }
                ]
                ];
            } else if (this.component && this.hasInput) {
                // component: input + button
                this._events = [
                // For components that are not readonly, allow keyboard nav
                [this.element.find('input'), {
                    focus: $.proxy(this.show, this),
                    keyup: $.proxy(this.update, this),
                    keydown: $.proxy(this.keydown, this)
                }
                ],
                [this.component, {
                    click: $.proxy(this.show, this)
                }
                ]
                ];
            } else if (this.element.is('div')) {
                // inline datepicker
                this.isInline = true;
            } else {
                this._events = [
                [this.element, {
                    click: $.proxy(this.show, this)
                }
                ]
                ];
            }

            this._secondaryEvents = [
            [this.picker, {
                click: $.proxy(this.click, this)
            }
            ],
            [$(window), {
                resize: $.proxy(this.place, this)
            }
            ],
            [$(document), {
                'mousedown touchstart': $.proxy(function (e) {
                    // Clicked outside the datepicker, hide it
                    if (!(
                    this.element.is(e.target) ||
                    this.element.find(e.target).length ||
                    this.picker.is(e.target) ||
                    this.picker.find(e.target).length
                    )) {
                        this.hide();
                    }
                }, this)
            }
            ]
            ];
        },
        _attachEvents: function() {
            this._detachEvents();
            this._applyEvents(this._events);
        },
        _detachEvents: function() {
            this._unapplyEvents(this._events);
        },
        _attachSecondaryEvents: function() {
            this._detachSecondaryEvents();
            this._applyEvents(this._secondaryEvents);
        },
        _detachSecondaryEvents: function() {
            this._unapplyEvents(this._secondaryEvents);
        },
        _trigger: function(event, altdate) {
            var date = altdate || this.date,
            local_date = this._utc_to_local(date);

            this.element.trigger({
                type: event,
                date: local_date,
                format: $.proxy(function(altformat) {
                    var format = altformat || this.o.format;
                    return DPGlobal.formatDate(date, format, this.o.language);
                }, this)
            });
        },

        show: function(e) {
            if (!this.isInline)
                this.picker.appendTo('body');
            this.picker.show();
            this.height = this.component ? this.component.outerHeight() : this.element.outerHeight();
            this.place();
            this._attachSecondaryEvents();
            if (e) {
                e.preventDefault();
            }
            this._trigger('show');
        },

        hide: function(e) {
            if (this.isInline)
                return;
            if (!this.picker.is(':visible'))
                return;
            this.picker.hide().detach();
            this._detachSecondaryEvents();
            this.viewMode = this.o.startView;
            this.showMode();

            if (
            this.o.forceParse &&
            (
            this.isInput && this.element.val() ||
            this.hasInput && this.element.find('input').val()
            )
            )
                this.setValue();
            this._trigger('hide');
        },

        remove: function() {
            this.hide();
            this._detachEvents();
            this._detachSecondaryEvents();
            this.picker.remove();
            delete this.element.data().datepicker;
            if (!this.isInput) {
                delete this.element.data().date;
            }
        },

        _utc_to_local: function(utc) {
            return new Date(utc.getTime() + (utc.getTimezoneOffset() * 60000));
        },
        _local_to_utc: function(local) {
            return new Date(local.getTime() - (local.getTimezoneOffset() * 60000));
        },
        _zero_time: function(local) {
            return new Date(local.getFullYear(), local.getMonth(), local.getDate());
        },
        _zero_utc_time: function(utc) {
            return new Date(Date.UTC(utc.getUTCFullYear(), utc.getUTCMonth(), utc.getUTCDate()));
        },

        getDate: function() {
            return this._utc_to_local(this.getUTCDate());
        },

        getUTCDate: function() {
            return this.date;
        },

        setDate: function(d) {
            this.setUTCDate(this._local_to_utc(d));
        },

        setUTCDate: function(d) {
            this.date = d;
            this.setValue();
        },

        setValue: function() {
            var formatted = this.getFormattedDate();
            if (!this.isInput) {
                if (this.component) {
                    this.element.find('input').val(formatted).change();
                }
            } else {
                this.element.val(formatted).change();
            }
        },

        getFormattedDate: function(format) {
            if (format === undefined)
                format = this.o.format;
            return DPGlobal.formatDate(this.date, format, this.o.language);
        },

        setStartDate: function(startDate) {
            this._process_options({
                startDate: startDate
            });
            this.update();
            this.updateNavArrows();
        },

        setEndDate: function(endDate) {
            this._process_options({
                endDate: endDate
            });
            this.update();
            this.updateNavArrows();
        },

        setDaysOfWeekDisabled: function(daysOfWeekDisabled) {
            this._process_options({
                daysOfWeekDisabled: daysOfWeekDisabled
            });
            this.update();
            this.updateNavArrows();
        },

        place: function() {
            if (this.isInline)
                return;
            var calendarWidth = this.picker.outerWidth(),
            calendarHeight = this.picker.outerHeight(),
            visualPadding = 10,
            windowWidth = $window.width(),
            windowHeight = $window.height(),
            scrollTop = $window.scrollTop();

            var zIndex = parseInt(this.element.parents().filter(function() {
                return $(this).css('z-index') != 'auto';
            }).first().css('z-index')) + 10;
            var offset = this.component ? this.component.parent().offset() : this.element.offset();
            var height = this.component ? this.component.outerHeight(true) : this.element.outerHeight(false);
            var width = this.component ? this.component.outerWidth(true) : this.element.outerWidth(false);
            var left = offset.left,
            top = offset.top;

            this.picker.removeClass(
            'datepicker-orient-top datepicker-orient-bottom ' +
            'datepicker-orient-right datepicker-orient-left'
            );

            if (this.o.orientation.x !== 'auto') {
                this.picker.addClass('datepicker-orient-' + this.o.orientation.x);
                if (this.o.orientation.x === 'right')
                    left -= calendarWidth - width;
            }
            // auto x orientation is best-placement: if it crosses a window
            // edge, fudge it sideways
            else {
                // Default to left
                this.picker.addClass('datepicker-orient-left');
                if (offset.left < 0)
                    left -= offset.left - visualPadding;
                else if (offset.left + calendarWidth > windowWidth)
                    left = windowWidth - calendarWidth - visualPadding;
            }

            // auto y orientation is best-situation: top or bottom, no fudging,
            // decision based on which shows more of the calendar
            var yorient = this.o.orientation.y,
            top_overflow, bottom_overflow;
            if (yorient === 'auto') {
                top_overflow = - scrollTop + offset.top - calendarHeight;
                bottom_overflow = scrollTop + windowHeight - (offset.top + height + calendarHeight);
                if (Math.max(top_overflow, bottom_overflow) === bottom_overflow)
                    yorient = 'top';
                else
                    yorient = 'bottom';
            }
            this.picker.addClass('datepicker-orient-' + yorient);
            if (yorient === 'top')
                top += height;
            else
                top -= calendarHeight + parseInt(this.picker.css('padding-top'));

            this.picker.css({
                top: top,
                left: left,
                zIndex: zIndex
            });
        },

        _allow_update: true,
        update: function() {
            if (!this._allow_update)
                return;

            var oldDate = new Date(this.date),
            date, fromArgs = false;
            if (arguments && arguments.length && (typeof arguments[0] === 'string' || arguments[0] instanceof Date)) {
                date = arguments[0];
                if (date instanceof Date)
                    date = this._local_to_utc(date);
                fromArgs = true;
            } else {
                date = this.isInput ? this.element.val() : this.element.data('date') || this.element.find('input').val();
                delete this.element.data().date;
            }

            this.date = DPGlobal.parseDate(date, this.o.format, this.o.language);

            if (fromArgs) {
                // setting date by clicking
                this.setValue();
            } else if (date) {
                // setting date by typing
                if (oldDate.getTime() !== this.date.getTime())
                    this._trigger('changeDate');
            } else {
                // clearing date
                this._trigger('clearDate');
            }

            if (this.date < this.o.startDate) {
                this.viewDate = new Date(this.o.startDate);
                this.date = new Date(this.o.startDate);
            } else if (this.date > this.o.endDate) {
                this.viewDate = new Date(this.o.endDate);
                this.date = new Date(this.o.endDate);
            } else {
                this.viewDate = new Date(this.date);
                this.date = new Date(this.date);
            }
            this.fill();
        },

        fillDow: function() {
            var dowCnt = this.o.weekStart,
            html = '<tr>';
            if (this.o.calendarWeeks) {
                var cell = '<th class="cw">&nbsp;</th>';
                html += cell;
                this.picker.find('.datepicker-days thead tr:first-child').prepend(cell);
            }
            while (dowCnt < this.o.weekStart + 7) {
                html += '<th class="dow">' + dates[this.o.language].daysMin[(dowCnt++)%7] + '</th>';
            }
            html += '</tr>';
            this.picker.find('.datepicker-days thead').append(html);
        },

        fillMonths: function() {
            var html = '',
            i = 0;
            while (i < 12) {
                html += '<span class="month">' + dates[this.o.language].monthsShort[i++] + '</span>';
            }
            this.picker.find('.datepicker-months td').html(html);
        },

        setRange: function(range) {
            if (!range || !range.length)
                delete this.range;
            else
                this.range = $.map(range, function(d) {
                    return d.valueOf();
                });
            this.fill();
        },

        getClassNames: function(date) {
            var cls = [],
            year = this.viewDate.getUTCFullYear(),
            month = this.viewDate.getUTCMonth(),
            currentDate = this.date.valueOf(),
            today = new Date();
            if (date.getUTCFullYear() < year || (date.getUTCFullYear() == year && date.getUTCMonth() < month)) {
                cls.push('old');
            } else if (date.getUTCFullYear() > year || (date.getUTCFullYear() == year && date.getUTCMonth() > month)) {
                cls.push('new');
            }
            // Compare internal UTC date with local today, not UTC today
            if (this.o.todayHighlight &&
            date.getUTCFullYear() == today.getFullYear() &&
            date.getUTCMonth() == today.getMonth() &&
            date.getUTCDate() == today.getDate()) {
                cls.push('today');
            }
            if (date.valueOf() == currentDate) {
                cls.push('active');
            }
            if (date.valueOf() < this.o.startDate || date.valueOf() > this.o.endDate ||
            $.inArray(date.getUTCDay(), this.o.daysOfWeekDisabled) !== - 1) {
                cls.push('disabled');
            }
            if (this.range) {
                if (date > this.range[0] && date < this.range[this.range.length - 1]) {
                    cls.push('range');
                }
                if ($.inArray(date.valueOf(), this.range) != - 1) {
                    cls.push('selected');
                }
            }
            return cls;
        },

        fill: function() {
            var d = new Date(this.viewDate),
            year = d.getUTCFullYear(),
            month = d.getUTCMonth(),
            startYear = this.o.startDate !== - Infinity ? this.o.startDate.getUTCFullYear() : - Infinity,
            startMonth = this.o.startDate !== - Infinity ? this.o.startDate.getUTCMonth() : - Infinity,
            endYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity,
            endMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity,
            currentDate = this.date && this.date.valueOf(),
            tooltip;
            this.picker.find('.datepicker-days thead th.datepicker-switch')
            .text(dates[this.o.language].months[month] + ' ' + year);
            this.picker.find('tfoot th.today')
            .text(dates[this.o.language].today)
            .toggle(this.o.todayBtn !== false);
            this.picker.find('tfoot th.clear')
            .text(dates[this.o.language].clear)
            .toggle(this.o.clearBtn !== false);
            this.updateNavArrows();
            this.fillMonths();
            var prevMonth = UTCDate(year, month - 1, 28, 0, 0, 0, 0),
            day = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());
            prevMonth.setUTCDate(day);
            prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.o.weekStart + 7)%7);
            var nextMonth = new Date(prevMonth);
            nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);
            nextMonth = nextMonth.valueOf();
            var html = [];
            var clsName;
            while (prevMonth.valueOf() < nextMonth) {
                if (prevMonth.getUTCDay() == this.o.weekStart) {
                    html.push('<tr>');
                    if (this.o.calendarWeeks) {
                        // ISO 8601: First week contains first thursday.
                        // ISO also states week starts on Monday, but we can be more abstract here.
                        var
                        // Start of current week: based on weekstart/current date
                        ws = new Date( + prevMonth + (this.o.weekStart - prevMonth.getUTCDay() - 7) % 7 * 864e5),
                        // Thursday of this week
                        th = new Date( + ws + (7 + 4 - ws.getUTCDay()) % 7 * 864e5),
                        // First Thursday of year, year from thursday
                        yth = new Date( + (yth = UTCDate(th.getUTCFullYear(), 0, 1)) + (7 + 4 - yth.getUTCDay())%7 * 864e5),
                        // Calendar week: ms between thursdays, div ms per day, div 7 days
                        calWeek = (th - yth) / 864e5 / 7 + 1;
                        html.push('<td class="cw">' + calWeek + '</td>');

                    }
                }
                clsName = this.getClassNames(prevMonth);
                clsName.push('day');

                if (this.o.beforeShowDay !== $.noop) {
                    var before = this.o.beforeShowDay(this._utc_to_local(prevMonth));
                    if (before === undefined)
                        before = {};
                    else if (typeof(before) === 'boolean')
                        before = {
                            enabled: before
                        };
                    else if (typeof(before) === 'string')
                        before = {
                            classes: before
                        };
                    if (before.enabled === false)
                        clsName.push('disabled');
                    if (before.classes)
                        clsName = clsName.concat(before.classes.split(/\s+/));
                    if (before.tooltip)
                        tooltip = before.tooltip;
                }

                clsName = $.unique(clsName);
                html.push('<td class="' + clsName.join(' ') + '"' + (tooltip ? ' title="' + tooltip + '"' : '') + '>' + prevMonth.getUTCDate() + '</td>');
                if (prevMonth.getUTCDay() == this.o.weekEnd) {
                    html.push('</tr>');
                }
                prevMonth.setUTCDate(prevMonth.getUTCDate() + 1);
            }
            this.picker.find('.datepicker-days tbody').empty().append(html.join(''));
            var currentYear = this.date && this.date.getUTCFullYear();

            var months = this.picker.find('.datepicker-months')
            .find('th:eq(1)')
            .text(year)
            .end()
            .find('span').removeClass('active');
            if (currentYear && currentYear == year) {
                months.eq(this.date.getUTCMonth()).addClass('active');
            }
            if (year < startYear || year > endYear) {
                months.addClass('disabled');
            }
            if (year == startYear) {
                months.slice(0, startMonth).addClass('disabled');
            }
            if (year == endYear) {
                months.slice(endMonth + 1).addClass('disabled');
            }

            html = '';
            year = parseInt(year / 10, 10) * 10;
            var yearCont = this.picker.find('.datepicker-years')
            .find('th:eq(1)')
            .text(year + '-' + (year + 9))
            .end()
            .find('td');
            year -= 1;
            for (var i = - 1; i < 11; i++) {
                html += '<span class="year' + (i == - 1 ? ' old' : i == 10 ? ' new' : '') + (currentYear == year ? ' active' : '') + (year < startYear || year > endYear ? ' disabled' : '') + '">' + year + '</span>';
                year += 1;
            }
            yearCont.html(html);
        },

        updateNavArrows: function() {
            if (!this._allow_update)
                return;

            var d = new Date(this.viewDate),
            year = d.getUTCFullYear(),
            month = d.getUTCMonth();
            switch (this.viewMode) {
            case 0:
                if (this.o.startDate !== - Infinity && year <= this.o.startDate.getUTCFullYear() && month <= this.o.startDate.getUTCMonth()) {
                    this.picker.find('.prev').css({
                        visibility: 'hidden'
                    });
                } else {
                    this.picker.find('.prev').css({
                        visibility: 'visible'
                    });
                }
                if (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear() && month >= this.o.endDate.getUTCMonth()) {
                    this.picker.find('.next').css({
                        visibility: 'hidden'
                    });
                } else {
                    this.picker.find('.next').css({
                        visibility: 'visible'
                    });
                }
                break;
            case 1:
            case 2:
                if (this.o.startDate !== - Infinity && year <= this.o.startDate.getUTCFullYear()) {
                    this.picker.find('.prev').css({
                        visibility: 'hidden'
                    });
                } else {
                    this.picker.find('.prev').css({
                        visibility: 'visible'
                    });
                }
                if (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear()) {
                    this.picker.find('.next').css({
                        visibility: 'hidden'
                    });
                } else {
                    this.picker.find('.next').css({
                        visibility: 'visible'
                    });
                }
                break;
            }
        },

        click: function(e) {
            e.preventDefault();
            var target = $(e.target).closest('span, td, th');
            if (target.length == 1) {
                switch (target[0].nodeName.toLowerCase()) {
                case 'th':
                    switch (target[0].className) {
                    case 'datepicker-switch':
                        this.showMode(1);
                        break;
                    case 'prev':
                    case 'next':
                        var dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className == 'prev' ? - 1 : 1);
                        switch (this.viewMode) {
                        case 0:
                            this.viewDate = this.moveMonth(this.viewDate, dir);
                            this._trigger('changeMonth', this.viewDate);
                            break;
                        case 1:
                        case 2:
                            this.viewDate = this.moveYear(this.viewDate, dir);
                            if (this.viewMode === 1)
                                this._trigger('changeYear', this.viewDate);
                            break;
                        }
                        this.fill();
                        break;
                    case 'today':
                        var date = new Date();
                        date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);

                        this.showMode( - 2);
                        var which = this.o.todayBtn == 'linked' ? null : 'view';
                        this._setDate(date, which);
                        break;
                    case 'clear':
                        var element;
                        if (this.isInput)
                            element = this.element;
                        else if (this.component)
                            element = this.element.find('input');
                        if (element)
                            element.val("").change();
                        this._trigger('changeDate');
                        this.update();
                        if (this.o.autoclose)
                            this.hide();
                        break;
                    }
                    break;
                case 'span':
                    if (!target.is('.disabled')) {
                        this.viewDate.setUTCDate(1);
                        if (target.is('.month')) {
                            var day = 1;
                            var month = target.parent().find('span').index(target);
                            var year = this.viewDate.getUTCFullYear();
                            this.viewDate.setUTCMonth(month);
                            this._trigger('changeMonth', this.viewDate);
                            if (this.o.minViewMode === 1) {
                                this._setDate(UTCDate(year, month, day, 0, 0, 0, 0));
                            }
                        } else {
                            var year = parseInt(target.text(), 10) || 0;
                            var day = 1;
                            var month = 0;
                            this.viewDate.setUTCFullYear(year);
                            this._trigger('changeYear', this.viewDate);
                            if (this.o.minViewMode === 2) {
                                this._setDate(UTCDate(year, month, day, 0, 0, 0, 0));
                            }
                        }
                        this.showMode( - 1);
                        this.fill();
                    }
                    break;
                case 'td':
                    if (target.is('.day') && !target.is('.disabled')) {
                        var day = parseInt(target.text(), 10) || 1;
                        var year = this.viewDate.getUTCFullYear(),
                        month = this.viewDate.getUTCMonth();
                        if (target.is('.old')) {
                            if (month === 0) {
                                month = 11;
                                year -= 1;
                            } else {
                                month -= 1;
                            }
                        } else if (target.is('.new')) {
                            if (month == 11) {
                                month = 0;
                                year += 1;
                            } else {
                                month += 1;
                            }
                        }
                        this._setDate(UTCDate(year, month, day, 0, 0, 0, 0));
                    }
                    break;
                }
            }
        },

        _setDate: function(date, which) {
            if (!which || which == 'date')
                this.date = new Date(date);
            if (!which || which == 'view')
                this.viewDate = new Date(date);
            this.fill();
            this.setValue();
            this._trigger('changeDate');
            var element;
            if (this.isInput) {
                element = this.element;
            } else if (this.component) {
                element = this.element.find('input');
            }
            if (element) {
                element.change();
            }
            if (this.o.autoclose && (!which || which == 'date')) {
                this.hide();
            }
        },

        moveMonth: function(date, dir) {
            if (!dir)
                return date;
            var new_date = new Date(date.valueOf()),
            day = new_date.getUTCDate(),
            month = new_date.getUTCMonth(),
            mag = Math.abs(dir),
            new_month, test;
            dir = dir > 0 ? 1 : - 1;
            if (mag == 1) {
                test = dir == - 1
                // If going back one month, make sure month is not current month
                // (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)
                ? function() {
                    return new_date.getUTCMonth() == month;
                }
                // If going forward one month, make sure month is as expected
                // (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)
                : function() {
                    return new_date.getUTCMonth() != new_month;
                };
                new_month = month + dir;
                new_date.setUTCMonth(new_month);
                // Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11
                if (new_month < 0 || new_month > 11)
                    new_month = (new_month + 12) % 12;
            } else {
                // For magnitudes >1, move one month at a time...
                for (var i = 0; i < mag; i++)
                // ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...
                new_date = this.moveMonth(new_date, dir);
                // ...then reset the day, keeping it in the new month
                new_month = new_date.getUTCMonth();
                new_date.setUTCDate(day);
                test = function() {
                    return new_month != new_date.getUTCMonth();
                };
            }
            // Common date-resetting loop -- if date is beyond end of month, make it
            // end of month
            while (test()) {
                new_date.setUTCDate(--day);
                new_date.setUTCMonth(new_month);
            }
            return new_date;
        },

        moveYear: function(date, dir) {
            return this.moveMonth(date, dir * 12);
        },

        dateWithinRange: function(date) {
            return date >= this.o.startDate && date <= this.o.endDate;
        },

        keydown: function(e) {
            if (this.picker.is(':not(:visible)')) {
                if (e.keyCode == 27) // allow escape to hide and re-show picker
                this.show();
                return;
            }
            var dateChanged = false,
            dir, day, month,
            newDate, newViewDate;
            switch (e.keyCode) {
            case 27:
                // escape
                this.hide();
                e.preventDefault();
                break;
            case 37:
                // left
            case 39:
                // right
                if (!this.o.keyboardNavigation)
                    break;
                dir = e.keyCode == 37 ? - 1 : 1;
                if (e.ctrlKey) {
                    newDate = this.moveYear(this.date, dir);
                    newViewDate = this.moveYear(this.viewDate, dir);
                    this._trigger('changeYear', this.viewDate);
                } else if (e.shiftKey) {
                    newDate = this.moveMonth(this.date, dir);
                    newViewDate = this.moveMonth(this.viewDate, dir);
                    this._trigger('changeMonth', this.viewDate);
                } else {
                    newDate = new Date(this.date);
                    newDate.setUTCDate(this.date.getUTCDate() + dir);
                    newViewDate = new Date(this.viewDate);
                    newViewDate.setUTCDate(this.viewDate.getUTCDate() + dir);
                }
                if (this.dateWithinRange(newDate)) {
                    this.date = newDate;
                    this.viewDate = newViewDate;
                    this.setValue();
                    this.update();
                    e.preventDefault();
                    dateChanged = true;
                }
                break;
            case 38:
                // up
            case 40:
                // down
                if (!this.o.keyboardNavigation)
                    break;
                dir = e.keyCode == 38 ? - 1 : 1;
                if (e.ctrlKey) {
                    newDate = this.moveYear(this.date, dir);
                    newViewDate = this.moveYear(this.viewDate, dir);
                    this._trigger('changeYear', this.viewDate);
                } else if (e.shiftKey) {
                    newDate = this.moveMonth(this.date, dir);
                    newViewDate = this.moveMonth(this.viewDate, dir);
                    this._trigger('changeMonth', this.viewDate);
                } else {
                    newDate = new Date(this.date);
                    newDate.setUTCDate(this.date.getUTCDate() + dir * 7);
                    newViewDate = new Date(this.viewDate);
                    newViewDate.setUTCDate(this.viewDate.getUTCDate() + dir * 7);
                }
                if (this.dateWithinRange(newDate)) {
                    this.date = newDate;
                    this.viewDate = newViewDate;
                    this.setValue();
                    this.update();
                    e.preventDefault();
                    dateChanged = true;
                }
                break;
            case 13:
                // enter
                this.hide();
                e.preventDefault();
                break;
            case 9:
                // tab
                this.hide();
                break;
            }
            if (dateChanged) {
                this._trigger('changeDate');
                var element;
                if (this.isInput) {
                    element = this.element;
                } else if (this.component) {
                    element = this.element.find('input');
                }
                if (element) {
                    element.change();
                }
            }
        },

        showMode: function(dir) {
            if (dir) {
                this.viewMode = Math.max(this.o.minViewMode, Math.min(2, this.viewMode + dir));
            }
            /*
            				vitalets: fixing bug of very special conditions:
            				jquery 1.7.1 + webkit + show inline datepicker in bootstrap popover.
            				Method show() does not set display css correctly and datepicker is not shown.
            				Changed to .css('display', 'block') solve the problem.
            				See https://github.com/vitalets/x-editable/issues/37

            				In jquery 1.7.2+ everything works fine.
            			*/
            //this.picker.find('>div').hide().filter('.datepicker-'+DPGlobal.modes[this.viewMode].clsName).show();
            this.picker.find('>div').hide().filter('.datepicker-' + DPGlobal.modes[this.viewMode].clsName).css('display', 'block');
            this.updateNavArrows();
        }
    };

    var DateRangePicker = function(element, options) {
        this.element = $(element);
        this.inputs = $.map(options.inputs, function(i) {
            return i.jquery ? i[0] : i;
        });
        delete options.inputs;

        $(this.inputs)
        .datepicker(options)
        .bind('changeDate', $.proxy(this.dateUpdated, this));

        this.pickers = $.map(this.inputs, function(i) {
            return $(i).data('datepicker');
        });
        this.updateDates();
    };
    DateRangePicker.prototype = {
        updateDates: function() {
            this.dates = $.map(this.pickers, function(i) {
                return i.date;
            });
            this.updateRanges();
        },
        updateRanges: function() {
            var range = $.map(this.dates, function(d) {
                return d.valueOf();
            });
            $.each(this.pickers, function(i, p) {
                p.setRange(range);
            });
        },
        dateUpdated: function(e) {
            var dp = $(e.target).data('datepicker'),
            new_date = dp.getUTCDate(),
            i = $.inArray(e.target, this.inputs),
            l = this.inputs.length;
            if (i == - 1)
                return;

            if (new_date < this.dates[i]) {
                // Date being moved earlier/left
                while (i >= 0 && new_date < this.dates[i]) {
                    this.pickers[i--].setUTCDate(new_date);
                }
            } else if (new_date > this.dates[i]) {
                // Date being moved later/right
                while (i < l && new_date > this.dates[i]) {
                    this.pickers[i++].setUTCDate(new_date);
                }
            }
            this.updateDates();
        },
        remove: function() {
            $.map(this.pickers, function(p) {
                p.remove();
            });
            delete this.element.data().datepicker;
        }
    };

    function opts_from_el(el, prefix) {
        // Derive options from element data-attrs
        var data = $(el).data(),
        out = {}, inkey,
        replace = new RegExp('^' + prefix.toLowerCase() + '([A-Z])'),
        prefix = new RegExp('^' + prefix.toLowerCase());
        for (var key in data)
            if (prefix.test(key)) {
                inkey = key.replace(replace, function(_, a) {
                    return a.toLowerCase();
                });
                out[inkey] = data[key];
            }
        return out;
    }

    function opts_from_locale(lang) {
        // Derive options from locale plugins
        var out = {};
        // Check if "de-DE" style date is available, if not language should
        // fallback to 2 letter code eg "de"
        if (!dates[lang]) {
            lang = lang.split('-')[0]
            if (!dates[lang])
                return;
        }
        var d = dates[lang];
        $.each(locale_opts, function(i, k) {
            if (k in d)
                out[k] = d[k];
        });
        return out;
    }

    var old = $.fn.datepicker;
    $.fn.datepicker = function ( option ) {
        var args = Array.apply(null, arguments);
        args.shift();
        var internal_return,
        this_return;
        this.each(function () {
            var $this = $(this),
            data = $this.data('datepicker'),
            options = typeof option == 'object' && option;
            if (!data) {
                var elopts = opts_from_el(this, 'date'),
                // Preliminary otions
                xopts = $.extend({}, defaults, elopts, options),
                locopts = opts_from_locale(xopts.language),
                // Options priority: js args, data-attrs, locales, defaults
                opts = $.extend({}, defaults, locopts, elopts, options);
                if ($this.is('.input-daterange') || opts.inputs) {
                    var ropts = {
                        inputs: opts.inputs || $this.find('input').toArray()
                    };
                    $this.data('datepicker', (data = new DateRangePicker(this, $.extend(opts, ropts))));
                } else {
                    $this.data('datepicker', (data = new Datepicker(this, opts)));
                }
            }
            if (typeof option == 'string' && typeof data[option] == 'function') {
                internal_return = data[option].apply(data, args);
                if (internal_return !== undefined)
                    return false;
            }
        });
        if (internal_return !== undefined)
            return internal_return;
        else
            return this;
    };

    var defaults = $.fn.datepicker.defaults = {
        autoclose: false,
        beforeShowDay: $.noop,
        calendarWeeks: false,
        clearBtn: false,
        daysOfWeekDisabled: [],
        endDate: Infinity,
        forceParse: true,
        format: 'mm/dd/yyyy',
        keyboardNavigation: true,
        language: 'en',
        minViewMode: 0,
        orientation: "auto",
        rtl: false,
        startDate: - Infinity,
        startView: 0,
        todayBtn: false,
        todayHighlight: false,
        weekStart: 0
    };
    var locale_opts = $.fn.datepicker.locale_opts = [
    'format',
    'rtl',
    'weekStart'
    ];
    $.fn.datepicker.Constructor = Datepicker;
    var dates = $.fn.datepicker.dates = {
        en: {
            days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
            daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
            daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"],
            months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            today: "Today",
            clear: "Clear"
        }
    };

    var DPGlobal = {
        modes: [
        {
            clsName: 'days',
            navFnc: 'Month',
            navStep: 1
        },
        {
            clsName: 'months',
            navFnc: 'FullYear',
            navStep: 1
        },
        {
            clsName: 'years',
            navFnc: 'FullYear',
            navStep: 10
        }
        ],
        isLeapYear: function (year) {
            return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));
        },
        getDaysInMonth: function (year, month) {
            return [31, (DPGlobal.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
        },
        validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,
        nonpunctuation: /[^ -\/:-@\[\u3400-\u9fff-`{-~\t\n\r]+/g,
        parseFormat: function(format) {
            // IE treats \0 as a string end in inputs (truncating the value),
            // so it's a bad format delimiter, anyway
            var separators = format.replace(this.validParts, '\0').split('\0'),
            parts = format.match(this.validParts);
            if (!separators || !separators.length || !parts || parts.length === 0) {
                throw new Error("Invalid date format.");
            }
            return {
                separators: separators,
                parts: parts
            };
        },
        parseDate: function(date, format, language) {
            if (date instanceof Date)
                return date;
            if (typeof format === 'string')
                format = DPGlobal.parseFormat(format);
            if (/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(date)) {
                var part_re = /([\-+]\d+)([dmwy])/,
                parts = date.match(/([\-+]\d+)([dmwy])/g),
                part, dir;
                date = new Date();
                for (var i = 0; i < parts.length; i++) {
                    part = part_re.exec(parts[i]);
                    dir = parseInt(part[1]);
                    switch (part[2]) {
                    case 'd':
                        date.setUTCDate(date.getUTCDate() + dir);
                        break;
                    case 'm':
                        date = Datepicker.prototype.moveMonth.call(Datepicker.prototype, date, dir);
                        break;
                    case 'w':
                        date.setUTCDate(date.getUTCDate() + dir * 7);
                        break;
                    case 'y':
                        date = Datepicker.prototype.moveYear.call(Datepicker.prototype, date, dir);
                        break;
                    }
                }
                return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0);
            }
            var parts = date && date.match(this.nonpunctuation) || [],
            date = new Date(),
            parsed = {},
            setters_order = ['yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'd', 'dd'],
            setters_map = {
                yyyy: function(d, v) {
                    return d.setUTCFullYear(v);
                },
                yy: function(d, v) {
                    return d.setUTCFullYear(2000 + v);
                },
                m: function(d, v) {
                    if (isNaN(d))
                        return d;
                    v -= 1;
                    while (v < 0)
                        v += 12;
                    v %= 12;
                    d.setUTCMonth(v);
                    while (d.getUTCMonth() != v)
                        d.setUTCDate(d.getUTCDate() - 1);
                    return d;
                },
                d: function(d, v) {
                    return d.setUTCDate(v);
                }
            },
            val, filtered, part;
            setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];
            setters_map['dd'] = setters_map['d'];
            date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);
            var fparts = format.parts.slice();
            // Remove noop parts
            if (parts.length != fparts.length) {
                fparts = $(fparts).filter(function(i, p) {
                    return $.inArray(p, setters_order) !== - 1;
                }).toArray();
            }
            // Process remainder
            if (parts.length == fparts.length) {
                for (var i = 0, cnt = fparts.length; i < cnt; i++) {
                    val = parseInt(parts[i], 10);
                    part = fparts[i];
                    if (isNaN(val)) {
                        switch (part) {
                        case 'MM':
                            filtered = $(dates[language].months).filter(function() {
                                var m = this.slice(0, parts[i].length),
                                p = parts[i].slice(0, m.length);
                                return m == p;
                            });
                            val = $.inArray(filtered[0], dates[language].months) + 1;
                            break;
                        case 'M':
                            filtered = $(dates[language].monthsShort).filter(function() {
                                var m = this.slice(0, parts[i].length),
                                p = parts[i].slice(0, m.length);
                                return m == p;
                            });
                            val = $.inArray(filtered[0], dates[language].monthsShort) + 1;
                            break;
                        }
                    }
                    parsed[part] = val;
                }
                for (var i = 0, _date, s; i < setters_order.length; i++) {
                    s = setters_order[i];
                    if (s in parsed && !isNaN(parsed[s])) {
                        _date = new Date(date);
                        setters_map[s](_date, parsed[s]);
                        if (!isNaN(_date))
                            date = _date;
                    }
                }
            }
            return date;
        },
        formatDate: function(date, format, language) {
            if (typeof format === 'string')
                format = DPGlobal.parseFormat(format);
            var val = {
                d: date.getUTCDate(),
                D: dates[language].daysShort[date.getUTCDay()],
                DD: dates[language].days[date.getUTCDay()],
                m: date.getUTCMonth() + 1,
                M: dates[language].monthsShort[date.getUTCMonth()],
                MM: dates[language].months[date.getUTCMonth()],
                yy: date.getUTCFullYear().toString().substring(2),
                yyyy: date.getUTCFullYear()
            };
            val.dd = (val.d < 10 ? '0' : '') + val.d;
            val.mm = (val.m < 10 ? '0' : '') + val.m;
            var date = [],
            seps = $.extend([], format.separators);
            for (var i = 0, cnt = format.parts.length; i <= cnt; i++) {
                if (seps.length)
                    date.push(seps.shift());
                date.push(val[format.parts[i]]);
            }
            return date.join('');
        },
        headTemplate: '<thead>' +
        '<tr>' +
        '<th class="prev">&laquo;</th>' +
        '<th colspan="5" class="datepicker-switch"></th>' +
        '<th class="next">&raquo;</th>' +
        '</tr>' +
        '</thead>',
        contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',
        footTemplate: '<tfoot><tr><th colspan="7" class="today"></th></tr><tr><th colspan="7" class="clear"></th></tr></tfoot>'
    };
    DPGlobal.template = '<div class="datepicker">' +
    '<div class="datepicker-days">' +
    '<table class=" table-condensed">' +
    DPGlobal.headTemplate +
    '<tbody></tbody>' +
    DPGlobal.footTemplate +
    '</table>' +
    '</div>' +
    '<div class="datepicker-months">' +
    '<table class="table-condensed">' +
    DPGlobal.headTemplate +
    DPGlobal.contTemplate +
    DPGlobal.footTemplate +
    '</table>' +
    '</div>' +
    '<div class="datepicker-years">' +
    '<table class="table-condensed">' +
    DPGlobal.headTemplate +
    DPGlobal.contTemplate +
    DPGlobal.footTemplate +
    '</table>' +
    '</div>' +
    '</div>';

    $.fn.datepicker.DPGlobal = DPGlobal;


    /* DATEPICKER NO CONFLICT
    	* =================== */

    $.fn.datepicker.noConflict = function() {
        $.fn.datepicker = old;
        return this;
    };


    /* DATEPICKER DATA-API
    	* ================== */

    $(document).on(
    'focus.datepicker.data-api click.datepicker.data-api',
    '[data-provide="datepicker"]',
    function(e) {
        var $this = $(this);
        if ($this.data('datepicker'))
            return;
        e.preventDefault();
        // component click requires us to explicitly show it
        $this.datepicker('show');
    });
    $(function() {
        $('[data-provide="datepicker-inline"]').datepicker();
    });

}( window.jQuery ));;
/*!
* @copyright Copyright &copy; Kartik Visweswaran, Krajee.com, 2014
* @version 2.8.0
* bootstrap-fileinput
* For more JQuery Plugins visit http://plugins.krajee.com
*/
!function(e) {
    var i = 'style="width:{width};height:{height};"', t = '   <div class="text-center"><small>{caption}</small></div>\n', a = '      <param name="controller" value="true" />\n      <param name="allowFullScreen" value="true" />\n      <param name="allowScriptAccess" value="always" />\n      <param name="autoPlay" value="false" />\n      <param name="autoStart" value="false" />\n      <param name="quality" value="high" />\n', n = '<div class="file-preview-other" ' + i + '>\n       <h2><i class="glyphicon glyphicon-file"></i></h2>\n   </div>', r = {
        main1: '{preview}\n<div class="input-group {class}">\n   {caption}\n   <div class="input-group-btn">\n       {remove}\n       {upload}\n       {browse}\n   </div>\n</div>',
        main2: "{preview}\n{remove}\n{upload}\n{browse}\n",
        preview: '<div class="file-preview {class}">\n   <div class="close fileinput-remove text-right">&times;</div>\n   <div class="file-preview-thumbnails"></div>\n   <div class="clearfix"></div>   <div class="file-preview-status text-center text-success"></div>\n   <div class="kv-fileinput-error"></div>\n</div>',
        icon: '<span class="glyphicon glyphicon-file kv-caption-icon"></span>',
        caption: '<div tabindex="-1" class="form-control file-caption {class}">\n   <div class="file-caption-name"></div>\n</div>',
        modal: '<div id="{id}" class="modal fade">\n  <div class="modal-dialog modal-lg">\n    <div class="modal-content">\n      <div class="modal-header">\n        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>\n        <h3 class="modal-title">Detailed Preview <small>{title}</small></h3>\n      </div>\n      <div class="modal-body">\n        <textarea class="form-control" style="font-family:Monaco,Consolas,monospace; height: {height}px;" readonly>{body}</textarea>\n      </div>\n    </div>\n  </div>\n</div>\n'
    }, l = ["image", "html", "text", "video", "audio", "flash", "object"], o = {
        generic: '<div class="file-preview-frame" id="{previewId}">\n   {content}\n</div>\n',
        html: '<div class="file-preview-frame" id="{previewId}">\n    <object data="{data}" type="{type}" width="{width}" height="{height}">\n       ' + n + "\n    </object>\n" + t + "</div>",
        image: '<div class="file-preview-frame" id="{previewId}">\n   <img src="{data}" class="file-preview-image" title="{caption}" alt="{caption}" ' + i + ">\n</div>\n",
        text: '<div class="file-preview-frame" id="{previewId}">\n   <div class="file-preview-text" title="{caption}" ' + i + ">\n       {data}\n   </div>\n</div>\n",
        video: '<div class="file-preview-frame" id="{previewId}" title="{caption}" ' + i + '>\n   <video width="{width}" height="{height}" controls>\n       <source src="{data}" type="{type}">\n       ' + n + "\n   </video>\n" + t + "</div>\n",
        audio: '<div class="file-preview-frame" id="{previewId}" title="{caption}" ' + i + '>\n   <audio controls>\n       <source src="{data}" type="{type}">\n       ' + n + "\n   </audio>\n" + t + "</div>\n",
        flash: '<div class="file-preview-frame" id="{previewId}" title="{caption}" ' + i + '>\n   <object type="application/x-shockwave-flash" width="{width}" height="{height}" data="{data}">\n' + a + "       " + n + "\n   </object>\n" + t + "</div>\n",
        object: '<div class="file-preview-frame" id="{previewId}" title="{caption}" ' + i + '>\n    <object data="{data}" type="{type}" width="{width}" height="{height}">\n      <param name="movie" value="{caption}" />\n' + a + "           " + n + "\n   </object>\n" + t + "</div>",
        other: '<div class="file-preview-frame" id="{previewId}" title="{caption}" ' + i + ">\n   " + n + "\n" + t + "</div>"
    }, s = {
        image: {
            width: "auto",
            height: "160px"
        },
        html: {
            width: "320px",
            height: "180px"
        },
        text: {
            width: "160px",
            height: "160px"
        },
        video: {
            width: "320px",
            height: "240px"
        },
        audio: {
            width: "320px",
            height: "80px"
        },
        flash: {
            width: "320px",
            height: "240px"
        },
        object: {
            width: "320px",
            height: "300px"
        },
        other: {
            width: "160px",
            height: "120px"
        }
    }, p = {
        image: function(e, i) {
            return "undefined" != typeof e ? e.match("image.*") : i.match(/\.(gif|png|jpe?g)$/i)
        },
        html: function(e, i) {
            return "undefined" != typeof e ? "text/html" == e : i.match(/\.(htm|html)$/i)
        },
        text: function(e, i) {
            return "undefined" != typeof e && e.match("text.*") || i.match(/\.(txt|md|csv|nfo|php|ini)$/i)
        },
        video: function(e, i) {
            return "undefined" != typeof e && e.match(/\.video\/(ogg|mp4|webm)$/i) || i.match(/\.(og?|mp4|webm)$/i)
        },
        audio: function(e, i) {
            return "undefined" != typeof e && e.match(/\.audio\/(ogg|mp3|wav)$/i) || i.match(/\.(ogg|mp3|wav)$/i)
        },
        flash: function(e, i) {
            return "undefined" != typeof e && "application/x-shockwave-flash" == e || i.match(/\.(swf)$/i)
        },
        object: function() {
            return !0
        },
        other: function() {
            return !0
        }
    }, d = function(i, t) {
        return null === i || void 0 === i || i == [] || "" === i || t && "" === e.trim(i)
    }, c = function(e) {
        return Array.isArray(e) || "[object Array]" === Object.prototype.toString.call(e)
    }, v = function(e, i) {
        return "object" == typeof i && e in i
    }, m = function(i, t, a) {
        return d(i) || d(i[t]) ? a : e(i[t])
    }, u = function() {
        return Math.round((new Date).getTime() + 100 * Math.random())
    }, g = function() {
        return window.File && window.FileReader && window.FileList && window.Blob
    }, w = function(e) {
        return String(e).replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;")
    }, f = window.URL || window.webkitURL, h = function(i, t) {
        this.$element = e(i), g() ? (this.init(t), this.listen()) : this.$element.removeClass("file-loading")
    };
    h.prototype = {
        constructor: h,
        init: function(e) {
            var i = this;
            i.reader = null, i.showCaption = e.showCaption, i.showPreview = e.showPreview, i.autoFitCaption = e.autoFitCaption, i.maxFileSize = e.maxFileSize, i.maxFileCount = e.maxFileCount, i.msgSizeTooLarge = e.msgSizeTooLarge, i.msgFilesTooMany = e.msgFilesTooMany, i.msgFileNotFound = e.msgFileNotFound, i.msgFileNotReadable = e.msgFileNotReadable, i.msgFilePreviewAborted = e.msgFilePreviewAborted, i.msgFilePreviewError = e.msgFilePreviewError, i.msgValidationError = e.msgValidationError, i.msgErrorClass = e.msgErrorClass, i.initialDelimiter = e.initialDelimiter, i.initialPreview = e.initialPreview, i.initialCaption = e.initialCaption, i.initialPreviewCount = e.initialPreviewCount, i.initialPreviewContent = e.initialPreviewContent, i.overwriteInitial = e.overwriteInitial, i.layoutTemplates = e.layoutTemplates, i.previewTemplates = e.previewTemplates, i.allowedPreviewTypes = d(e.allowedPreviewTypes) ? l : e.allowedPreviewTypes, i.allowedPreviewMimeTypes = e.allowedPreviewMimeTypes, i.allowedFileTypes = e.allowedFileTypes, i.allowedFileExtensions = e.allowedFileExtensions, i.previewSettings = e.previewSettings, i.fileTypeSettings = e.fileTypeSettings, i.showRemove = e.showRemove, i.showUpload = e.showUpload, i.captionClass = e.captionClass, i.previewClass = e.previewClass, i.mainClass = e.mainClass, i.mainTemplate = i.getLayoutTemplate(i.showCaption ? "main1" : "main2"), i.captionTemplate = i.getLayoutTemplate("caption"), i.previewGenericTemplate = i.getPreviewTemplate("generic"), i.browseLabel = e.browseLabel, i.browseIcon = e.browseIcon, i.browseClass = e.browseClass, i.removeLabel = e.removeLabel, i.removeIcon = e.removeIcon, i.removeClass = e.removeClass, i.uploadLabel = e.uploadLabel, i.uploadIcon = e.uploadIcon, i.uploadClass = e.uploadClass, i.uploadUrl = e.uploadUrl, i.msgLoading = e.msgLoading, i.msgProgress = e.msgProgress, i.msgSelected = e.msgSelected, i.msgInvalidFileType = e.msgInvalidFileType, i.msgInvalidFileExtension = e.msgInvalidFileExtension, i.previewFileType = e.previewFileType, i.wrapTextLength = e.wrapTextLength, i.wrapIndicator = e.wrapIndicator, i.isError=!1, i.isDisabled = i.$element.attr("disabled") || i.$element.attr("readonly"), d(i.$element.attr("id")) && i.$element.attr("id", u()), "undefined" == typeof i.$container ? i.$container = i.createContainer() : i.refreshContainer(), i.$captionContainer = m(e, "elCaptionContainer", i.$container.find(".file-caption")), i.$caption = m(e, "elCaptionText", i.$container.find(".file-caption-name")), i.$previewContainer = m(e, "elPreviewContainer", i.$container.find(".file-preview")), i.$preview = m(e, "elPreviewImage", i.$container.find(".file-preview-thumbnails")), i.$previewStatus = m(e, "elPreviewStatus", i.$container.find(".file-preview-status")), i.$errorContainer = m(e, "elErrorContainer", i.$previewContainer.find(".kv-fileinput-error")), d(i.msgErrorClass) || i.$errorContainer.removeClass(i.msgErrorClass).addClass(i.msgErrorClass), i.$errorContainer.hide();
            var t = i.initialPreview;
            i.initialPreviewCount = c(t) ? t.length : t.length > 0 ? t.split(i.initialDelimiter).length : 0, i.initPreview(), i.original = {
                preview: i.$preview.html(),
                caption: i.$caption.html()
            }, i.options = e, i.autoSizeCaption(), i.$element.removeClass("file-loading")
        },
        getLayoutTemplate: function(e) {
            var i = this;
            return v(e, i.layoutTemplates) ? i.layoutTemplates[e] : r[e]
        },
        getPreviewTemplate: function(e) {
            var i = this;
            return v(e, i.previewTemplates) ? i.previewTemplates[e] : o[e]
        },
        listen: function() {
            var i = this, t = i.$element, a = i.$captionContainer, n = i.$btnFile;
            t.on("change", e.proxy(i.change, i)), e(window).on("resize", function() {
                setTimeout(function() {
                    i.autoSizeCaption()
                }, 100)
            }), n.on("click", function() {
                i.clear(!1), a.focus()
            }), t.closest("form").on("reset", e.proxy(i.reset, i)), i.$container.on("click", ".fileinput-remove:not([disabled])", e.proxy(i.clear, i))
        },
        refresh: function(i) {
            var t = this, a = arguments.length ? e.extend(t.options, i): t.options;
            t.$element.off(), t.init(a)
        },
        initPreview: function() {
            var e = this, i = "", t = e.initialPreview, a = e.initialPreviewCount, n = e.initialCaption.length, r = "preview-" + u(), l = n > 0 ? e.initialCaption: e.msgSelected.replace(/\{n\}/g, a);
            if (c(t) && a > 0) {
                for (var o = 0; a > o; o++)
                    r += "-" + o, i += e.previewGenericTemplate.replace(/\{previewId\}/g, r).replace(/\{content\}/g, t[o]);
                a > 1 && 0 == n && (l = e.msgSelected.replace(/\{n\}/g, a))
            } else {
                if (!(a > 0))
                    return n > 0 ? void e.setCaption(l) : void 0;
                for (var s = t.split(e.initialDelimiter), o = 0; a > o; o++)
                    r += "-" + o, i += e.previewGenericTemplate.replace(/\{previewId\}/g, r).replace(/\{content\}/g, s[o]);
                a > 1 && 0 == n && (l = e.msgSelected.replace(/\{n\}/g, a))
            }
            e.initialPreviewContent = i, e.$preview.html(i), e.setCaption(l), e.$container.removeClass("file-input-new")
        },
        clearObjects: function() {
            var i = this, t = i.$preview;
            t.find("video audio").each(function() {
                this.pause(), delete this, e(this).remove()
            }), t.find("img object div").each(function() {
                delete this, e(this).remove()
            })
        },
        clearFileInput: function() {
            var i = this, t = i.$element;
            if (!d(t.val()))
                if (/MSIE/.test(navigator.userAgent)) {
                    var a = t.closest("form");
                    if (a.length) {
                        t.wrap("<form>");
                        var n = t.closest("form"), r = e(document.createElement("div"));
                        n.before(r).after(a).trigger("reset"), t.unwrap().appendTo(r).unwrap()
                    } else
                        t.wrap("<form>").closest("form").trigger("reset").unwrap()
                } else
                    t.val("")
            },
        clear: function() {
            var e = this, i = arguments.length && arguments[0];
            if (i && i.preventDefault(), e.reader instanceof FileReader && e.reader.abort(), e.autoSizeCaption(), e.clearFileInput(), e.resetErrors(!0), i!==!1 && (e.$element.trigger("change"), e.$element.trigger("fileclear")), e.overwriteInitial && (e.initialPreviewCount = 0), e.overwriteInitial || d(e.initialPreviewContent)) {
                e.clearObjects(), e.$preview.html("");
                var t=!e.overwriteInitial && e.initialCaption.length > 0 ? e.original.caption : "";
                e.$caption.html(t), e.$caption.attr("title", ""), e.$container.removeClass("file-input-new").addClass("file-input-new")
            } else
                e.showFileIcon(), e.$preview.html(e.original.preview), e.$caption.html(e.original.caption), e.$container.removeClass("file-input-new");
            e.hideFileIcon(), e.$element.trigger("filecleared"), e.$captionContainer.focus()
        },
        reset: function() {
            var e = this;
            e.clear(!1), e.$preview.html(e.original.preview), e.$caption.html(e.original.caption), e.$container.find(".fileinput-filename").text(""), e.$element.trigger("filereset"), e.initialPreview.length > 0 && e.$container.removeClass("file-input-new")
        },
        disable: function() {
            var e = this;
            e.isDisabled=!0, e.$element.attr("disabled", "disabled"), e.$container.find(".kv-fileinput-caption").addClass("file-caption-disabled"), e.$container.find(".btn-file, .fileinput-remove, .kv-fileinput-upload").attr("disabled", !0)
        },
        enable: function() {
            var e = this;
            e.isDisabled=!1, e.$element.removeAttr("disabled"), e.$container.find(".kv-fileinput-caption").removeClass("file-caption-disabled"), e.$container.find(".btn-file, .fileinput-remove, .kv-fileinput-upload").removeAttr("disabled")
        },
        hideFileIcon: function() {
            this.overwriteInitial && this.$captionContainer.find(".kv-caption-icon").hide()
        },
        showFileIcon: function() {
            this.$captionContainer.find(".kv-caption-icon").show()
        },
        resetErrors: function(e) {
            var i = this, t = i.$errorContainer;
            i.isError=!1, i.$container.removeClass("has-error"), e ? t.fadeOut("slow") : t.hide()
        },
        showError: function(e, i, t, a) {
            var n = this, r = n.$errorContainer, l = n.$element;
            return r.html(e), r.fadeIn(800), l.trigger("fileerror", [i, t, a]), n.clearFileInput(), n.$container.removeClass("has-error").addClass("has-error"), !0
        },
        errorHandler: function(e, i) {
            var t = this;
            switch (e.target.error.code) {
            case e.target.error.NOT_FOUND_ERR:
                t.addError(t.msgFileNotFound.replace(/\{name\}/g, i));
                break;
            case e.target.error.NOT_READABLE_ERR:
                t.addError(t.msgFileNotReadable.replace(/\{name\}/g, i));
                break;
            case e.target.error.ABORT_ERR:
                t.addError(t.msgFilePreviewAborted.replace(/\{name\}/g, i));
                break;
            default:
                t.addError(t.msgFilePreviewError.replace(/\{name\}/g, i))
            }
        },
        parseFileType: function(e) {
            for (var i, t, a = 0; a < l.length; a++)
                if (cat = l[a], i = v(cat, self.fileTypeSettings) ? self.fileTypeSettings[cat] : p[cat], t = i(e.type, e.name) ? cat : "", "" != t)
                    return t;
            return "other"
        },
        previewDefault: function(i, t) {
            var a = this, n = f.createObjectURL(i), r = e("#" + t), l = v("other", a.previewTemplates) ? a.previewTemplates.other: o.other;
            a.$preview.append("\n" + l.replace(/\{previewId\}/g, t).replace(/\{caption\}/g, a.slug(i.name)).replace(/\{type\}/g, i.type).replace(/\{data\}/g, n)), r.on("load", function() {
                f.revokeObjectURL(r.attr("data"))
            })
        },
        previewFile: function(e, i, t, a) {
            var a, n, r = this, l = r.parseFileType(e), p = r.slug(e.name), c = r.allowedPreviewTypes, m = r.allowedPreviewMimeTypes, g = (e.type, v(l, r.previewTemplates) ? r.previewTemplates[l] : o[l]), h = v(l, r.previewSettings) ? r.previewSettings[l]: s[l], b = parseInt(r.wrapTextLength), y = r.wrapIndicator, C = r.$preview, $ = c.indexOf(l) >= 0, x = d(m) ||!d(m) && v(e.type, m);
            if ($ && x) {
                if ("text" == l) {
                    var F = w(i.target.result);
                    if (f.revokeObjectURL(a), F.length > b) {
                        var T = "text-" + u(), I = .75 * window.innerHeight, P = r.getLayoutTemplate("modal").replace(/\{id\}/g, T).replace(/\{title\}/g, p).replace(/\{height\}/g, I).replace(/\{body\}/g, F);
                        y = y.replace(/\{title\}/g, p).replace(/\{dialog\}/g, "$('#" + T + "').modal('show')"), F = F.substring(0, b - 1) + y
                    }
                    n = g.replace(/\{previewId\}/g, t).replace(/\{caption\}/g, p).replace(/\{type\}/g, e.type).replace(/\{width\}/g, h.width).replace(/\{height\}/g, h.height).replace(/\{data\}/g, F) + P
                } else
                    n = g.replace(/\{previewId\}/g, t).replace(/\{caption\}/g, p).replace(/\{type\}/g, e.type).replace(/\{data\}/g, a).replace(/\{width\}/g, h.width).replace(/\{height\}/g, h.height);
                C.append("\n" + n), r.autoSizeImage(t)
            } else
                r.previewDefault(e, t)
        },
        readFiles: function(e) {
            function i(p) {
                if (p >= w)
                    return l.removeClass("loading"), void o.html("");
                var v, u, y, C, $, x = g + "-" + p, F = e[p], T = t.slug(F.name), I = (F.size ? F.size : 0) / 1e3, P = f.createObjectURL(F), E = 0, S = t.allowedFileTypes, L = d(S) ? "": S.join(", "), R = t.allowedFileExtensions, j = d(R) ? "": R.join(", "), k = d(R) ? "": new RegExp("\\.(" + R.join("|") + ")$", "i");
                if (I = I.toFixed(2), t.maxFileSize > 0 && I > t.maxFileSize)
                    return y = t.msgSizeTooLarge.replace(/\{name\}/g, T).replace(/\{size\}/g, I).replace(/\{maxSize\}/g, t.maxFileSize), void(t.isError = t.showError(y, F, x, p));
                if (!d(S) && c(S)) {
                    for (u = 0; u < S.length; u++)
                        C = S[u], v = h[C], $ = void 0 !== v && v(F.type, T), E += d($) ? 0 : $.length;
                    if (0 == E)
                        return y = t.msgInvalidFileType.replace(/\{name\}/g, T).replace(/\{types\}/g, L), void(t.isError = t.showError(y, F, x, p))
                }
                return 0 != E || d(R) ||!c(R) || d(k) || ($ = T.match(k), E += d($) ? 0 : $.length, 0 != E) ? t.showPreview ? void(n.length > 0 && "undefined" != typeof FileReader ? (o.html(s.replace(/\{index\}/g, p + 1).replace(/\{files\}/g, w)), l.addClass("loading"), r.onerror = function(e) {
                    t.errorHandler(e, T)
                }, r.onload = function(e) {
                    t.previewFile(F, e, x, P)
                }, r.onloadend = function() {
                    var e = m.replace(/\{index\}/g, p + 1).replace(/\{files\}/g, w).replace(/\{percent\}/g, 100).replace(/\{name\}/g, T);
                    setTimeout(function() {
                        o.html(e), f.revokeObjectURL(P)
                    }, 1e3), setTimeout(function() {
                        i(p + 1)
                    }, 1500), a.trigger("fileloaded", [F, x, p])
                }, r.onprogress = function(e) {
                    if (e.lengthComputable) {
                        var i = parseInt(e.loaded / e.total * 100, 10), t = m.replace(/\{index\}/g, p + 1).replace(/\{files\}/g, w).replace(/\{percent\}/g, i).replace(/\{name\}/g, T);
                        setTimeout(function() {
                            o.html(t)
                        }, 1e3)
                    }
                }, b(F.type, T) ? r.readAsText(F) : r.readAsArrayBuffer(F)) : (t.previewDefault(F, x), a.trigger("fileloaded", [F, x, p]), setTimeout(i(p + 1), 1e3))) : (a.trigger("fileloaded", [F, x, p]), void setTimeout(i(p + 1), 1e3)) : (y = t.msgInvalidFileExtension.replace(/\{name\}/g, T).replace(/\{extensions\}/g, j), void(t.isError = t.showError(y, F, x, p)))
            }
            this.reader = new FileReader;
            var t = this, a = t.$element, n = t.$preview, r = t.reader, l = t.$previewContainer, o = t.$previewStatus, s = t.msgLoading, m = t.msgProgress, g = (t.msgSelected, t.previewFileType, parseInt(t.wrapTextLength), t.wrapIndicator, "preview-" + u()), w = e.length, h = t.fileTypeSettings, b = v("text", h) ? h.text: p.text;
            i(0)
        },
        slug: function(e) {
            return d(e) ? "" : e.split(/(\\|\/)/g).pop().replace(/[^\w-.\\\/ ]+/g, "")
        },
        setCaption: function(i) {
            var t = this, a = e("<div>" + i + "</div>").text(), n = t.layoutTemplates.icon, r = n + a;
            0 != t.$caption.length && (t.$caption.html(r), t.$caption.attr("title", a), t.autoSizeCaption())
        },
        autoSizeImage: function(e) {
            var i = this, t = i.$preview, a = t.find("#" + e), n = a.find("img");
            n.length && n.on("load", function() {
                var r = a.width(), l = t.width();
                r > l && (n.css("width", "100%"), a.css("width", "97%")), i.$element.trigger("fileimageloaded", e)
            })
        },
        autoSizeCaption: function() {
            var e = this;
            0 != e.$caption.length && e.autoFitCaption && (e.$caption.css("width", 0), setTimeout(function() {
                var i = e.$captionContainer.width();
                e.$caption.css("width", .98 * i)
            }, 100))
        },
        change: function(e) {
            var i, t = this, a = t.$element, n = t.slug(a.val()), r = 0, l = t.$preview, o = a.get(0).files, s = t.msgSelected, p = d(o) ? 1: o.length + t.initialPreviewCount;
            if (t.hideFileIcon(), i = void 0 === e.target.files ? e.target && e.target.value ? [{
                name : e.target.value.replace(/^.+\\/, "")
                }
            ] : [] : e.target.files, 0 !== i.length) {
                t.resetErrors(), l.html(""), t.overwriteInitial || l.html(t.initialPreviewContent);
                var r = i.length;
                if (t.maxFileCount > 0 && r > t.maxFileCount) {
                    var c = t.msgFilesTooMany.replace(/\{m\}/g, t.maxFileCount).replace(/\{n\}/g, r);
                    return t.isError = t.showError(c, null, null, null), t.$captionContainer.find(".kv-caption-icon").hide(), t.$caption.html(t.msgValidationError), void t.$container.removeClass("file-input-new")
                }
                t.readFiles(o), t.reader = null;
                var v = p > 1 ? s.replace(/\{n\}/g, p): n;
                t.isError ? (t.$captionContainer.find(".kv-caption-icon").hide(), v = t.msgValidationError) : t.showFileIcon(), t.setCaption(v), t.$container.removeClass("file-input-new"), a.trigger("fileselect", [p, n])
            }
        },
        initBrowse: function(e) {
            var i = this;
            i.$btnFile = e.find(".btn-file"), i.$btnFile.append(i.$element)
        },
        createContainer: function() {
            var i = this, t = e(document.createElement("span")).attr({
                "class": "file-input file-input-new"
            }).html(i.renderMain());
            return i.$element.before(t), i.initBrowse(t), t
        },
        refreshContainer: function() {
            var e = this, i = e.$container;
            i.before(e.$element), i.html(e.renderMain()), e.initBrowse(i)
        },
        renderMain: function() {
            var e = this, i = e.showPreview ? e.getLayoutTemplate("preview").replace(/\{class\}/g, e.previewClass): "", t = e.isDisabled ? e.captionClass + " file-caption-disabled": e.captionClass, a = e.captionTemplate.replace(/\{class\}/g, t + " kv-fileinput-caption");
            return e.mainTemplate.replace(/\{class\}/g, e.mainClass).replace(/\{preview\}/g, i).replace(/\{caption\}/g, a).replace(/\{upload\}/g, e.renderUpload()).replace(/\{remove\}/g, e.renderRemove()).replace(/\{browse\}/g, e.renderBrowse())
        },
        renderBrowse: function() {
            var e = this, i = e.browseClass + " btn-file", t = "";
            return e.isDisabled && (t = " disabled "), '<div class="' + i + '"' + t + "> " + e.browseIcon + e.browseLabel + " </div>"
        },
        renderRemove: function() {
            var e = this, i = e.removeClass + " fileinput-remove fileinput-remove-button", t = "";
            return e.showRemove ? (e.isDisabled && (t = " disabled "), '<button type="button" class="' + i + '"' + t + ">" + e.removeIcon + e.removeLabel + "</button>") : ""
        },
        renderUpload: function() {
            var e = this, i = e.uploadClass + " kv-fileinput-upload", t = "", a = "";
            return e.showUpload ? (e.isDisabled && (a = " disabled "), t = d(e.uploadUrl) ? '<button type="submit" class="' + i + '"' + a + ">" + e.uploadIcon + e.uploadLabel + "</button>" : '<a href="' + e.uploadUrl + '" class="' + e.uploadClass + '"' + a + ">" + e.uploadIcon + e.uploadLabel + "</a>") : ""
        }
    }, e.fn.fileinput = function(i) {
        if (g()) {
            var t = Array.apply(null, arguments);
            return t.shift(), this.each(function() {
                var a = e(this), n = a.data("fileinput"), r = "object" == typeof i && i;
                n || a.data("fileinput", n = new h(this, e.extend({}, e.fn.fileinput.defaults, r, e(this).data()))), "string" == typeof i && n[i].apply(n, t)
            })
        }
    }, e.fn.fileinput.defaults = {
        showCaption: !0,
        showPreview: !0,
        showRemove: !0,
        showUpload: !0,
        autoFitCaption: !0,
        mainClass: "",
        previewClass: "",
        captionClass: "",
        mainTemplate: null,
        initialDelimiter: "*$$*",
        initialPreview: "",
        initialCaption: "",
        initialPreviewCount: 0,
        initialPreviewContent: "",
        overwriteInitial: !0,
        layoutTemplates: r,
        previewTemplates: o,
        allowedPreviewTypes: l,
        allowedPreviewMimeTypes: null,
        allowedFileTypes: null,
        allowedFileExtensions: null,
        previewSettings: s,
        fileTypeSettings: p,
        browseLabel: "Browse &hellip;",
        browseIcon: '<i class="glyphicon glyphicon-folder-open"></i> &nbsp;',
        browseClass: "btn btn-primary",
        removeLabel: "Remove",
        removeIcon: '<i class="glyphicon glyphicon-ban-circle"></i> ',
        removeClass: "btn btn-default",
        uploadLabel: "Upload",
        uploadIcon: '<i class="glyphicon glyphicon-upload"></i> ',
        uploadClass: "btn btn-default",
        uploadUrl: null,
        maxFileSize: 0,
        maxFileCount: 0,
        msgSizeTooLarge: 'File "{name}" (<b>{size} KB</b>) exceeds maximum allowed upload size of <b>{maxSize} KB</b>. Please retry your upload!',
        msgFilesTooMany: "Number of files selected for upload <b>({n})</b> exceeds maximum allowed limit of <b>{m}</b>. Please retry your upload!",
        msgFileNotFound: 'File "{name}" not found!',
        msgFileNotReadable: 'File "{name}" is not readable.',
        msgFilePreviewAborted: 'File preview aborted for "{name}".',
        msgFilePreviewError: 'An error occurred while reading the file "{name}".',
        msgInvalidFileType: 'Invalid type for file "{name}". Only "{types}" files are supported.',
        msgInvalidFileExtension: 'Invalid extension for file "{name}". Only "{extensions}" files are supported.',
        msgValidationError: '<span class="text-danger"><i class="glyphicon glyphicon-exclamation-sign"></i> File Upload Error</span>',
        msgErrorClass: "file-error-message",
        msgLoading: "Loading  file {index} of {files} &hellip;",
        msgProgress: "Loading file {index} of {files} - {name} - {percent}% completed.",
        msgSelected: "{n} files selected",
        previewFileType: "image",
        wrapTextLength: 250,
        wrapIndicator: ' <span class="wrap-indicator" title="{title}" onclick="{dialog}">[&hellip;]</span>',
        elCaptionContainer: null,
        elCaptionText: null,
        elPreviewContainer: null,
        elPreviewImage: null,
        elPreviewStatus: null,
        elErrorContainer: null
    }, e(document).ready(function() {
        var i = e("input.file[type=file]"), t = null != i.attr("type") ? i.length: 0;
        t > 0 && i.fileinput()
    })
}(window.jQuery);;
/*
 AngularJS v1.3.3
 (c) 2010-2014 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(T, U, t) {
    'use strict';
    function v(b) {
        return function() {
            var a = arguments[0], c;
            c = "[" + (b ? b + ":" : "") + a + "] http://errors.angularjs.org/1.3.3/" + (b ? b + "/" : "") + a;
            for (a = 1; a < arguments.length; a++) {
                c = c + (1 == a ? "?" : "&") + "p" + (a - 1) + "=";
                var d = encodeURIComponent, e;
                e = arguments[a];
                e = "function" == typeof e ? e.toString().replace(/ \{[\s\S]*$/, "") : "undefined" == typeof e ? "undefined" : "string" != typeof e ? JSON.stringify(e) : e;
                c += d(e)
            }
            return Error(c)
        }
    }
    function Ra(b) {
        if (null == b || Sa(b))
            return !1;
        var a = b.length;
        return b.nodeType ===
        la && a?!0 : I(b) || G(b) || 0 === a || "number" === typeof a && 0 < a && a - 1 in b
    }
    function r(b, a, c) {
        var d, e;
        if (b)
            if (u(b))
                for (d in b)
                    "prototype" == d || "length" == d || "name" == d || b.hasOwnProperty&&!b.hasOwnProperty(d) || a.call(c, b[d], d, b);
            else if (G(b) || Ra(b)) {
                var f = "object" !== typeof b;
                d = 0;
                for (e = b.length; d < e; d++)(f || d in b)
                    && a.call(c, b[d], d, b)
            } else if (b.forEach && b.forEach !== r)
                b.forEach(a, c, b);
            else
                for (d in b)
                    b.hasOwnProperty(d) && a.call(c, b[d], d, b);
        return b
    }
    function Cd(b, a, c) {
        for (var d = Object.keys(b).sort(), e = 0; e < d.length; e++)
            a.call(c,
            b[d[e]], d[e]);
        return d
    }
    function kc(b) {
        return function(a, c) {
            b(c, a)
        }
    }
    function Dd() {
        return ++kb
    }
    function lc(b, a) {
        a ? b.$$hashKey = a : delete b.$$hashKey
    }
    function H(b) {
        for (var a = b.$$hashKey, c = 1, d = arguments.length; c < d; c++) {
            var e = arguments[c];
            if (e)
                for (var f = Object.keys(e), g = 0, h = f.length; g < h; g++) {
                    var k = f[g];
                    b[k] = e[k]
                }
        }
        lc(b, a);
        return b
    }
    function aa(b) {
        return parseInt(b, 10)
    }
    function mc(b, a) {
        return H(new (H(function() {}, {
            prototype: b
        })), a)
    }
    function w() {}
    function ma(b) {
        return b
    }
    function ba(b) {
        return function() {
            return b
        }
    }
    function D(b) {
        return "undefined" === typeof b
    }
    function A(b) {
        return "undefined" !== typeof b
    }
    function L(b) {
        return null !== b && "object" === typeof b
    }
    function I(b) {
        return "string" === typeof b
    }
    function W(b) {
        return "number" === typeof b
    }
    function ea(b) {
        return "[object Date]" === Ja.call(b)
    }
    function u(b) {
        return "function" === typeof b
    }
    function lb(b) {
        return "[object RegExp]" === Ja.call(b)
    }
    function Sa(b) {
        return b && b.window === b
    }
    function Ta(b) {
        return b && b.$evalAsync && b.$watch
    }
    function Ua(b) {
        return "boolean" === typeof b
    }
    function nc(b) {
        return !(!b ||
        !(b.nodeName || b.prop && b.attr && b.find))
    }
    function Ed(b) {
        var a = {};
        b = b.split(",");
        var c;
        for (c = 0; c < b.length; c++)
            a[b[c]]=!0;
        return a
    }
    function sa(b) {
        return Q(b.nodeName || b[0].nodeName)
    }
    function Va(b, a) {
        var c = b.indexOf(a);
        0 <= c && b.splice(c, 1);
        return a
    }
    function Ca(b, a, c, d) {
        if (Sa(b) || Ta(b))
            throw Wa("cpws");
        if (a) {
            if (b === a)
                throw Wa("cpi");
            c = c || [];
            d = d || [];
            if (L(b)) {
                var e = c.indexOf(b);
                if ( - 1 !== e)
                    return d[e];
                c.push(b);
                d.push(a)
            }
            if (G(b))
                for (var f = a.length = 0; f < b.length; f++)
                    e = Ca(b[f], null, c, d), L(b[f]) && (c.push(b[f]),
                    d.push(e)), a.push(e);
            else {
                var g = a.$$hashKey;
                G(a) ? a.length = 0 : r(a, function(b, c) {
                    delete a[c]
                });
                for (f in b)
                    b.hasOwnProperty(f) && (e = Ca(b[f], null, c, d), L(b[f]) && (c.push(b[f]), d.push(e)), a[f] = e);
                lc(a, g)
            }
        } else if (a = b)
            G(b) ? a = Ca(b, [], c, d) : ea(b) ? a = new Date(b.getTime()) : lb(b) ? (a = new RegExp(b.source, b.toString().match(/[^\/]*$/)[0]), a.lastIndex = b.lastIndex) : L(b) && (e = Object.create(Object.getPrototypeOf(b)), a = Ca(b, e, c, d));
        return a
    }
    function ta(b, a) {
        if (G(b)) {
            a = a || [];
            for (var c = 0, d = b.length; c < d; c++)
                a[c] = b[c]
        } else if (L(b))
            for (c in a =
            a || {}, b)
                if ("$" !== c.charAt(0) || "$" !== c.charAt(1))
                    a[c] = b[c];
        return a || b
    }
    function na(b, a) {
        if (b === a)
            return !0;
        if (null === b || null === a)
            return !1;
        if (b !== b && a !== a)
            return !0;
        var c = typeof b, d;
        if (c == typeof a && "object" == c)
            if (G(b)) {
                if (!G(a))
                    return !1;
                    if ((c = b.length) == a.length) {
                        for (d = 0; d < c; d++)
                            if (!na(b[d], a[d]))
                                return !1;
                                return !0
                    }
            } else {
                if (ea(b))
                    return ea(a) ? na(b.getTime(), a.getTime()) : !1;
                    if (lb(b) && lb(a))
                        return b.toString() == a.toString();
                        if (Ta(b) || Ta(a) || Sa(b) || Sa(a) || G(a))
                            return !1;
                            c = {};
                            for (d in b)
                                if ("$" !== d.charAt(0) &&
                                !u(b[d])) {
                                    if (!na(b[d], a[d]))
                                        return !1;
                                        c[d]=!0
                                }
                                for (d in a)
                                    if (!c.hasOwnProperty(d) && "$" !== d.charAt(0) && a[d] !== t&&!u(a[d]))
                                        return !1;
                                        return !0
            }
        return !1
    }
    function Xa(b, a, c) {
        return b.concat(Ya.call(a, c))
    }
    function oc(b, a) {
        var c = 2 < arguments.length ? Ya.call(arguments, 2): [];
        return !u(a) || a instanceof RegExp ? a : c.length ? function() {
            return arguments.length ? a.apply(b, Xa(c, arguments, 0)) : a.apply(b, c)
        } : function() {
            return arguments.length ? a.apply(b, arguments) : a.call(b)
        }
    }
    function Fd(b, a) {
        var c = a;
        "string" === typeof b && "$" ===
        b.charAt(0) && "$" === b.charAt(1) ? c = t : Sa(a) ? c = "$WINDOW" : a && U === a ? c = "$DOCUMENT" : Ta(a) && (c = "$SCOPE");
        return c
    }
    function Za(b, a) {
        return "undefined" === typeof b ? t : JSON.stringify(b, Fd, a ? "  " : null)
    }
    function pc(b) {
        return I(b) ? JSON.parse(b) : b
    }
    function ua(b) {
        b = y(b).clone();
        try {
            b.empty()
        } catch (a) {}
        var c = y("<div>").append(b).html();
        try {
            return b[0].nodeType === mb ? Q(c) : c.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/, function(a, b) {
                return "<" + Q(b)
            })
        } catch (d) {
            return Q(c)
        }
    }
    function qc(b) {
        try {
            return decodeURIComponent(b)
        } catch (a) {}
    }
    function rc(b) {
        var a = {}, c, d;
        r((b || "").split("&"), function(b) {
            b && (c = b.replace(/\+/g, "%20").split("="), d = qc(c[0]), A(d) && (b = A(c[1]) ? qc(c[1]) : !0, Jb.call(a, d) ? G(a[d]) ? a[d].push(b) : a[d] = [a[d], b] : a[d] = b))
        });
        return a
    }
    function Kb(b) {
        var a = [];
        r(b, function(b, d) {
            G(b) ? r(b, function(b) {
                a.push(Da(d, !0) + (!0 === b ? "" : "=" + Da(b, !0)))
            }) : a.push(Da(d, !0) + (!0 === b ? "" : "=" + Da(b, !0)))
        });
        return a.length ? a.join("&") : ""
    }
    function nb(b) {
        return Da(b, !0).replace(/%26/gi, "&").replace(/%3D/gi, "=").replace(/%2B/gi, "+")
    }
    function Da(b, a) {
        return encodeURIComponent(b).replace(/%40/gi,
        "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%3B/gi, ";").replace(/%20/g, a ? "%20" : "+")
    }
    function Gd(b, a) {
        var c, d, e = ob.length;
        b = y(b);
        for (d = 0; d < e; ++d)
            if (c = ob[d] + a, I(c = b.attr(c)))
                return c;
        return null
    }
    function Hd(b, a) {
        var c, d, e = {};
        r(ob, function(a) {
            a += "app";
            !c && b.hasAttribute && b.hasAttribute(a) && (c = b, d = b.getAttribute(a))
        });
        r(ob, function(a) {
            a += "app";
            var e;
            !c && (e = b.querySelector("[" + a.replace(":", "\\:") + "]")) && (c = e, d = e.getAttribute(a))
        });
        c && (e.strictDi = null !== Gd(c, "strict-di"),
        a(c, d ? [d] : [], e))
    }
    function sc(b, a, c) {
        L(c) || (c = {});
        c = H({
            strictDi: !1
        }, c);
        var d = function() {
            b = y(b);
            if (b.injector()) {
                var d = b[0] === U ? "document": ua(b);
                throw Wa("btstrpd", d.replace(/</, "&lt;").replace(/>/, "&gt;"));
            }
            a = a || [];
            a.unshift(["$provide", function(a) {
                a.value("$rootElement", b)
            }
            ]);
            c.debugInfoEnabled && a.push(["$compileProvider", function(a) {
                a.debugInfoEnabled(!0)
            }
            ]);
            a.unshift("ng");
            d = Lb(a, c.strictDi);
            d.invoke(["$rootScope", "$rootElement", "$compile", "$injector", function(a, b, c, d) {
                a.$apply(function() {
                    b.data("$injector",
                    d);
                    c(b)(a)
                })
            }
            ]);
            return d
        }, e = /^NG_ENABLE_DEBUG_INFO!/, f = /^NG_DEFER_BOOTSTRAP!/;
        T && e.test(T.name) && (c.debugInfoEnabled=!0, T.name = T.name.replace(e, ""));
        if (T&&!f.test(T.name))
            return d();
        T.name = T.name.replace(f, "");
        va.resumeBootstrap = function(b) {
            r(b, function(b) {
                a.push(b)
            });
            d()
        }
    }
    function Id() {
        T.name = "NG_ENABLE_DEBUG_INFO!" + T.name;
        T.location.reload()
    }
    function Jd(b) {
        return va.element(b).injector().get("$$testability")
    }
    function Mb(b, a) {
        a = a || "_";
        return b.replace(Kd, function(b, d) {
            return (d ? a : "") + b.toLowerCase()
        })
    }
    function Ld() {
        var b;
        tc || ((oa = T.jQuery) && oa.fn.on ? (y = oa, H(oa.fn, {
            scope: Ka.scope,
            isolateScope: Ka.isolateScope,
            controller: Ka.controller,
            injector: Ka.injector,
            inheritedData: Ka.inheritedData
        }), b = oa.cleanData, oa.cleanData = function(a) {
            var c;
            if (Nb)
                Nb=!1;
            else
                for (var d = 0, e; null != (e = a[d]); d++)(c = oa._data(e, "events")
                    ) && c.$destroy && oa(e).triggerHandler("$destroy");
            b(a)
        }) : y = R, va.element = y, tc=!0)
    }
    function Ob(b, a, c) {
        if (!b)
            throw Wa("areq", a || "?", c || "required");
        return b
    }
    function pb(b, a, c) {
        c && G(b) && (b = b[b.length - 1]);
        Ob(u(b), a, "not a function, got " + (b && "object" === typeof b ? b.constructor.name || "Object" : typeof b));
        return b
    }
    function La(b, a) {
        if ("hasOwnProperty" === b)
            throw Wa("badname", a);
    }
    function uc(b, a, c) {
        if (!a)
            return b;
        a = a.split(".");
        for (var d, e = b, f = a.length, g = 0; g < f; g++)
            d = a[g], b && (b = (e = b)[d]);
        return !c && u(b) ? oc(e, b) : b
    }
    function qb(b) {
        var a = b[0];
        b = b[b.length - 1];
        var c = [a];
        do {
            a = a.nextSibling;
            if (!a)
                break;
            c.push(a)
        }
        while (a !== b);
        return y(c)
    }
    function pa() {
        return Object.create(null)
    }
    function Md(b) {
        function a(a, b, c) {
            return a[b] ||
            (a[b] = c())
        }
        var c = v("$injector"), d = v("ng");
        b = a(b, "angular", Object);
        b.$$minErr = b.$$minErr || v;
        return a(b, "module", function() {
            var b = {};
            return function(f, g, h) {
                if ("hasOwnProperty" === f)
                    throw d("badname", "module");
                g && b.hasOwnProperty(f) && (b[f] = null);
                return a(b, f, function() {
                    function a(c, d, e, f) {
                        f || (f = b);
                        return function() {
                            f[e || "push"]([c, d, arguments]);
                            return n
                        }
                    }
                    if (!g)
                        throw c("nomod", f);
                    var b = [], d = [], e = [], q = a("$injector", "invoke", "push", d), n = {
                        _invokeQueue: b,
                        _configBlocks: d,
                        _runBlocks: e,
                        requires: g,
                        name: f,
                        provider: a("$provide",
                        "provider"),
                        factory: a("$provide", "factory"),
                        service: a("$provide", "service"),
                        value: a("$provide", "value"),
                        constant: a("$provide", "constant", "unshift"),
                        animation: a("$animateProvider", "register"),
                        filter: a("$filterProvider", "register"),
                        controller: a("$controllerProvider", "register"),
                        directive: a("$compileProvider", "directive"),
                        config: q,
                        run: function(a) {
                            e.push(a);
                            return this
                        }
                    };
                    h && q(h);
                    return n
                })
            }
        })
    }
    function Nd(b) {
        H(b, {
            bootstrap: sc,
            copy: Ca,
            extend: H,
            equals: na,
            element: y,
            forEach: r,
            injector: Lb,
            noop: w,
            bind: oc,
            toJson: Za,
            fromJson: pc,
            identity: ma,
            isUndefined: D,
            isDefined: A,
            isString: I,
            isFunction: u,
            isObject: L,
            isNumber: W,
            isElement: nc,
            isArray: G,
            version: Od,
            isDate: ea,
            lowercase: Q,
            uppercase: rb,
            callbacks: {
                counter: 0
            },
            getTestability: Jd,
            $$minErr: v,
            $$csp: $a,
            reloadWithDebugInfo: Id
        });
        ab = Md(T);
        try {
            ab("ngLocale")
        } catch (a) {
            ab("ngLocale", []).provider("$locale", Pd)
        }
        ab("ng", ["ngLocale"], ["$provide", function(a) {
            a.provider({
                $$sanitizeUri: Qd
            });
            a.provider("$compile", vc).directive({
                a: Rd,
                input: wc,
                textarea: wc,
                form: Sd,
                script: Td,
                select: Ud,
                style: Vd,
                option: Wd,
                ngBind: Xd,
                ngBindHtml: Yd,
                ngBindTemplate: Zd,
                ngClass: $d,
                ngClassEven: ae,
                ngClassOdd: be,
                ngCloak: ce,
                ngController: de,
                ngForm: ee,
                ngHide: fe,
                ngIf: ge,
                ngInclude: he,
                ngInit: ie,
                ngNonBindable: je,
                ngPluralize: ke,
                ngRepeat: le,
                ngShow: me,
                ngStyle: ne,
                ngSwitch: oe,
                ngSwitchWhen: pe,
                ngSwitchDefault: qe,
                ngOptions: re,
                ngTransclude: se,
                ngModel: te,
                ngList: ue,
                ngChange: ve,
                pattern: xc,
                ngPattern: xc,
                required: yc,
                ngRequired: yc,
                minlength: zc,
                ngMinlength: zc,
                maxlength: Ac,
                ngMaxlength: Ac,
                ngValue: we,
                ngModelOptions: xe
            }).directive({
                ngInclude: ye
            }).directive(sb).directive(Bc);
            a.provider({
                $anchorScroll: ze,
                $animate: Ae,
                $browser: Be,
                $cacheFactory: Ce,
                $controller: De,
                $document: Ee,
                $exceptionHandler: Fe,
                $filter: Cc,
                $interpolate: Ge,
                $interval: He,
                $http: Ie,
                $httpBackend: Je,
                $location: Ke,
                $log: Le,
                $parse: Me,
                $rootScope: Ne,
                $q: Oe,
                $$q: Pe,
                $sce: Qe,
                $sceDelegate: Re,
                $sniffer: Se,
                $templateCache: Te,
                $templateRequest: Ue,
                $$testability: Ve,
                $timeout: We,
                $window: Xe,
                $$rAF: Ye,
                $$asyncCallback: Ze
            })
        }
        ])
    }
    function bb(b) {
        return b.replace($e, function(a, b, d, e) {
            return e ? d.toUpperCase() : d
        }).replace(af, "Moz$1")
    }
    function Dc(b) {
        b =
        b.nodeType;
        return b === la ||!b || 9 === b
    }
    function Ec(b, a) {
        var c, d, e = a.createDocumentFragment(), f = [];
        if (Pb.test(b)) {
            c = c || e.appendChild(a.createElement("div"));
            d = (bf.exec(b) || ["", ""])[1].toLowerCase();
            d = ha[d] || ha._default;
            c.innerHTML = d[1] + b.replace(cf, "<$1></$2>") + d[2];
            for (d = d[0]; d--;)
                c = c.lastChild;
            f = Xa(f, c.childNodes);
            c = e.firstChild;
            c.textContent = ""
        } else
            f.push(a.createTextNode(b));
        e.textContent = "";
        e.innerHTML = "";
        r(f, function(a) {
            e.appendChild(a)
        });
        return e
    }
    function R(b) {
        if (b instanceof R)
            return b;
        var a;
        I(b) && (b = P(b), a=!0);
        if (!(this instanceof R)) {
            if (a && "<" != b.charAt(0))
                throw Qb("nosel");
            return new R(b)
        }
        if (a) {
            a = U;
            var c;
            b = (c = df.exec(b)) ? [a.createElement(c[1])] : (c = Ec(b, a)) ? c.childNodes : []
        }
        Fc(this, b)
    }
    function Rb(b) {
        return b.cloneNode(!0)
    }
    function tb(b, a) {
        a || ub(b);
        if (b.querySelectorAll)
            for (var c = b.querySelectorAll("*"), d = 0, e = c.length; d < e; d++)
                ub(c[d])
    }
    function Gc(b, a, c, d) {
        if (A(d))
            throw Qb("offargs");
        var e = (d = vb(b)) && d.events, f = d && d.handle;
        if (f)
            if (a)
                r(a.split(" "), function(a) {
                    if (A(c)) {
                        var d = e[a];
                        Va(d ||
                        [], c);
                        if (d && 0 < d.length)
                            return
                    }
                    b.removeEventListener(a, f, !1);
                    delete e[a]
                });
                else
                    for (a in e)
                        "$destroy" !== a && b.removeEventListener(a, f, !1), delete e[a]
    }
    function ub(b, a) {
        var c = b.ng339, d = c && wb[c];
        d && (a ? delete d.data[a] : (d.handle && (d.events.$destroy && d.handle({}, "$destroy"), Gc(b)), delete wb[c], b.ng339 = t))
    }
    function vb(b, a) {
        var c = b.ng339, c = c && wb[c];
        a&&!c && (b.ng339 = c=++ef, c = wb[c] = {
            events : {}, data : {}, handle : t
        });
        return c
    }
    function Sb(b, a, c) {
        if (Dc(b)) {
            var d = A(c), e=!d && a&&!L(a), f=!a;
            b = (b = vb(b, !e)) && b.data;
            if (d)
                b[a] =
                c;
            else {
                if (f)
                    return b;
                if (e)
                    return b && b[a];
                H(b, a)
            }
        }
    }
    function Tb(b, a) {
        return b.getAttribute?-1 < (" " + (b.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ").indexOf(" " + a + " ") : !1
    }
    function Ub(b, a) {
        a && b.setAttribute && r(a.split(" "), function(a) {
            b.setAttribute("class", P((" " + (b.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ").replace(" " + P(a) + " ", " ")))
        })
    }
    function Vb(b, a) {
        if (a && b.setAttribute) {
            var c = (" " + (b.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ");
            r(a.split(" "), function(a) {
                a = P(a);
                - 1 ===
                c.indexOf(" " + a + " ") && (c += a + " ")
            });
            b.setAttribute("class", P(c))
        }
    }
    function Fc(b, a) {
        if (a)
            if (a.nodeType)
                b[b.length++] = a;
            else {
                var c = a.length;
                if ("number" === typeof c && a.window !== a) {
                    if (c)
                        for (var d = 0; d < c; d++)
                            b[b.length++] = a[d]
                } else
                    b[b.length++] = a
            }
    }
    function Hc(b, a) {
        return xb(b, "$" + (a || "ngController") + "Controller")
    }
    function xb(b, a, c) {
        9 == b.nodeType && (b = b.documentElement);
        for (a = G(a) ? a : [a]; b;) {
            for (var d = 0, e = a.length; d < e; d++)
                if ((c = y.data(b, a[d])) !== t)
                    return c;
            b = b.parentNode || 11 === b.nodeType && b.host
        }
    }
    function Ic(b) {
        for (tb(b,
        !0);
        b.firstChild;
        )b.removeChild(b.firstChild)
    }
    function Jc(b, a) {
        a || tb(b);
        var c = b.parentNode;
        c && c.removeChild(b)
    }
    function ff(b, a) {
        a = a || T;
        if ("complete" === a.document.readyState)
            a.setTimeout(b);
        else
            y(a).on("load", b)
    }
    function Kc(b, a) {
        var c = yb[a.toLowerCase()];
        return c && Lc[sa(b)] && c
    }
    function gf(b, a) {
        var c = b.nodeName;
        return ("INPUT" === c || "TEXTAREA" === c) && Mc[a]
    }
    function hf(b, a) {
        var c = function(c, e) {
            c.isDefaultPrevented = function() {
                return c.defaultPrevented
            };
            var f = a[e || c.type], g = f ? f.length: 0;
            if (g) {
                if (D(c.immediatePropagationStopped)) {
                    var h =
                    c.stopImmediatePropagation;
                    c.stopImmediatePropagation = function() {
                        c.immediatePropagationStopped=!0;
                        c.stopPropagation && c.stopPropagation();
                        h && h.call(c)
                    }
                }
                c.isImmediatePropagationStopped = function() {
                    return !0 === c.immediatePropagationStopped
                };
                1 < g && (f = ta(f));
                for (var k = 0; k < g; k++)
                    c.isImmediatePropagationStopped() || f[k].call(b, c)
            }
        };
        c.elem = b;
        return c
    }
    function Ma(b, a) {
        var c = b && b.$$hashKey;
        if (c)
            return "function" === typeof c && (c = b.$$hashKey()), c;
        c = typeof b;
        return c = "function" == c || "object" == c && null !== b ? b.$$hashKey =
        c + ":" + (a || Dd)() : c + ":" + b
    }
    function cb(b, a) {
        if (a) {
            var c = 0;
            this.nextUid = function() {
                return ++c
            }
        }
        r(b, this.put, this)
    }
    function jf(b) {
        return (b = b.toString().replace(Nc, "").match(Oc)) ? "function(" + (b[1] || "").replace(/[\s\r\n]+/, " ") + ")" : "fn"
    }
    function Wb(b, a, c) {
        var d;
        if ("function" === typeof b) {
            if (!(d = b.$inject)) {
                d = [];
                if (b.length) {
                    if (a)
                        throw I(c) && c || (c = b.name || jf(b)), Ea("strictdi", c);
                    a = b.toString().replace(Nc, "");
                    a = a.match(Oc);
                    r(a[1].split(kf), function(a) {
                        a.replace(lf, function(a, b, c) {
                            d.push(c)
                        })
                    })
                }
                b.$inject = d
            }
        } else
            G(b) ?
            (a = b.length - 1, pb(b[a], "fn"), d = b.slice(0, a)) : pb(b, "fn", !0);
        return d
    }
    function Lb(b, a) {
        function c(a) {
            return function(b, c) {
                if (L(b))
                    r(b, kc(a));
                else
                    return a(b, c)
            }
        }
        function d(a, b) {
            La(a, "service");
            if (u(b) || G(b))
                b = q.instantiate(b);
            if (!b.$get)
                throw Ea("pget", a);
            return p[a + "Provider"] = b
        }
        function e(a, b) {
            return function() {
                var c = s.invoke(b, this, t, a);
                if (D(c))
                    throw Ea("undef", a);
                return c
            }
        }
        function f(a, b, c) {
            return d(a, {
                $get: !1 !== c ? e(a, b): b
            })
        }
        function g(a) {
            var b = [], c;
            r(a, function(a) {
                function d(a) {
                    var b, c;
                    b = 0;
                    for (c =
                    a.length; b < c; b++) {
                        var e = a[b], f = q.get(e[0]);
                        f[e[1]].apply(f, e[2])
                    }
                }
                if (!m.get(a)) {
                    m.put(a, !0);
                    try {
                        I(a) ? (c = ab(a), b = b.concat(g(c.requires)).concat(c._runBlocks), d(c._invokeQueue), d(c._configBlocks)) : u(a) ? b.push(q.invoke(a)) : G(a) ? b.push(q.invoke(a)) : pb(a, "module")
                    } catch (e) {
                        throw G(a) && (a = a[a.length - 1]), e.message && e.stack&&-1 == e.stack.indexOf(e.message) && (e = e.message + "\n" + e.stack), Ea("modulerr", a, e.stack || e.message || e);
                    }
                }
            });
            return b
        }
        function h(b, c) {
            function d(a) {
                if (b.hasOwnProperty(a)) {
                    if (b[a] === k)
                        throw Ea("cdep",
                        a + " <- " + l.join(" <- "));
                    return b[a]
                }
                try {
                    return l.unshift(a), b[a] = k, b[a] = c(a)
                } catch (e) {
                    throw b[a] === k && delete b[a], e;
                } finally {
                    l.shift()
                }
            }
            function e(b, c, f, g) {
                "string" === typeof f && (g = f, f = null);
                var k = [];
                g = Wb(b, a, g);
                var h, l, n;
                l = 0;
                for (h = g.length; l < h; l++) {
                    n = g[l];
                    if ("string" !== typeof n)
                        throw Ea("itkn", n);
                    k.push(f && f.hasOwnProperty(n) ? f[n] : d(n))
                }
                G(b) && (b = b[h]);
                return b.apply(c, k)
            }
            return {
                invoke: e,
                instantiate: function(a, b, c) {
                    var d = function() {};
                    d.prototype = (G(a) ? a[a.length - 1] : a).prototype;
                    d = new d;
                    a = e(a, d, b,
                    c);
                    return L(a) || u(a) ? a : d
                },
                get: d,
                annotate: Wb,
                has: function(a) {
                    return p.hasOwnProperty(a + "Provider") || b.hasOwnProperty(a)
                }
            }
        }
        a=!0 === a;
        var k = {}, l = [], m = new cb([], !0), p = {
            $provide: {
                provider: c(d),
                factory: c(f),
                service: c(function(a, b) {
                    return f(a, ["$injector", function(a) {
                        return a.instantiate(b)
                    }
                    ])
                }),
                value: c(function(a, b) {
                    return f(a, ba(b), !1)
                }),
                constant: c(function(a, b) {
                    La(a, "constant");
                    p[a] = b;
                    n[a] = b
                }),
                decorator: function(a, b) {
                    var c = q.get(a + "Provider"), d = c.$get;
                    c.$get = function() {
                        var a = s.invoke(d, c);
                        return s.invoke(b,
                        null, {
                            $delegate: a
                        })
                    }
                }
            }
        }, q = p.$injector = h(p, function() {
            throw Ea("unpr", l.join(" <- "));
        }), n = {}, s = n.$injector = h(n, function(a) {
            var b = q.get(a + "Provider");
            return s.invoke(b.$get, b, t, a)
        });
        r(g(b), function(a) {
            s.invoke(a || w)
        });
        return s
    }
    function ze() {
        var b=!0;
        this.disableAutoScrolling = function() {
            b=!1
        };
        this.$get = ["$window", "$location", "$rootScope", function(a, c, d) {
            function e(a) {
                var b = null;
                Array.prototype.some.call(a, function(a) {
                    if ("a" === sa(a))
                        return b = a, !0
                });
                return b
            }
            function f(b) {
                if (b) {
                    b.scrollIntoView();
                    var c;
                    c = g.yOffset;
                    u(c) ? c = c() : nc(c) ? (c = c[0], c = "fixed" !== a.getComputedStyle(c).position ? 0 : c.getBoundingClientRect().bottom) : W(c) || (c = 0);
                    c && (b = b.getBoundingClientRect().top, a.scrollBy(0, b - c))
                } else
                    a.scrollTo(0, 0)
            }
            function g() {
                var a = c.hash(), b;
                a ? (b = h.getElementById(a)) ? f(b) : (b = e(h.getElementsByName(a))) ? f(b) : "top" === a && f(null) : f(null)
            }
            var h = a.document;
            b && d.$watch(function() {
                return c.hash()
            }, function(a, b) {
                a === b && "" === a || ff(function() {
                    d.$evalAsync(g)
                })
            });
            return g
        }
        ]
    }
    function Ze() {
        this.$get = ["$$rAF", "$timeout",
        function(b, a) {
            return b.supported ? function(a) {
                return b(a)
            } : function(b) {
                return a(b, 0, !1)
            }
        }
        ]
    }
    function mf(b, a, c, d) {
        function e(a) {
            try {
                a.apply(null, Ya.call(arguments, 1))
            } finally {
                if (x--, 0 === x)
                    for (; B.length;)
                        try {
                            B.pop()()
                        } catch (b) {
                    c.error(b)
                }
            }
        }
        function f(a, b) {
            (function ya() {
                r(J, function(a) {
                    a()
                });
                z = b(ya, a)
            })()
        }
        function g() {
            h();
            k()
        }
        function h() {
            F = b.history.state;
            F = D(F) ? null : F;
            na(F, S) && (F = S);
            S = F
        }
        function k() {
            if (C !== m.url() || N !== F)
                C = m.url(), N = F, r(V, function(a) {
                    a(m.url(), F)
                })
        }
        function l(a) {
            try {
                return decodeURIComponent(a)
            } catch (b) {
                return a
            }
        }
        var m = this, p = a[0], q = b.location, n = b.history, s = b.setTimeout, O = b.clearTimeout, E = {};
        m.isMock=!1;
        var x = 0, B = [];
        m.$$completeOutstandingRequest = e;
        m.$$incOutstandingRequestCount = function() {
            x++
        };
        m.notifyWhenNoOutstandingRequests = function(a) {
            r(J, function(a) {
                a()
            });
            0 === x ? a() : B.push(a)
        };
        var J = [], z;
        m.addPollFn = function(a) {
            D(z) && f(100, s);
            J.push(a);
            return a
        };
        var F, N, C = q.href, ca = a.find("base"), M = null;
        h();
        N = F;
        m.url = function(a, c, e) {
            D(e) && (e = null);
            q !== b.location && (q = b.location);
            n !== b.history && (n = b.history);
            if (a) {
                var f =
                N === e;
                if (C !== a || d.history&&!f) {
                    var g = C && Fa(C) === Fa(a);
                    C = a;
                    N = e;
                    !d.history || g && f ? (g || (M = a), c ? q.replace(a) : q.href = a) : (n[c ? "replaceState": "pushState"](e, "", a), h(), N = F);
                    return m
                }
            } else
                return M || q.href.replace(/%27/g, "'")
        };
        m.state = function() {
            return F
        };
        var V = [], X=!1, S = null;
        m.onUrlChange = function(a) {
            if (!X) {
                if (d.history)
                    y(b).on("popstate", g);
                y(b).on("hashchange", g);
                X=!0
            }
            V.push(a);
            return a
        };
        m.$$checkUrlChange = k;
        m.baseHref = function() {
            var a = ca.attr("href");
            return a ? a.replace(/^(https?\:)?\/\/[^\/]*/, "") : ""
        };
        var da = {}, A = "", fa = m.baseHref();
        m.cookies = function(a, b) {
            var d, e, f, g;
            if (a)
                b === t ? p.cookie = encodeURIComponent(a) + "=;path=" + fa + ";expires=Thu, 01 Jan 1970 00:00:00 GMT" : I(b) && (d = (p.cookie = encodeURIComponent(a) + "=" + encodeURIComponent(b) + ";path=" + fa).length + 1, 4096 < d && c.warn("Cookie '" + a + "' possibly not set or overflowed because it was too large (" + d + " > 4096 bytes)!"));
            else {
                if (p.cookie !== A)
                    for (A = p.cookie, d = A.split("; "), da = {}, f = 0; f < d.length; f++)
                        e = d[f], g = e.indexOf("="), 0 < g && (a = l(e.substring(0, g)), da[a] ===
                        t && (da[a] = l(e.substring(g + 1))));
                return da
            }
        };
        m.defer = function(a, b) {
            var c;
            x++;
            c = s(function() {
                delete E[c];
                e(a)
            }, b || 0);
            E[c]=!0;
            return c
        };
        m.defer.cancel = function(a) {
            return E[a] ? (delete E[a], O(a), e(w), !0) : !1
        }
    }
    function Be() {
        this.$get = ["$window", "$log", "$sniffer", "$document", function(b, a, c, d) {
            return new mf(b, d, a, c)
        }
        ]
    }
    function Ce() {
        this.$get = function() {
            function b(b, d) {
                function e(a) {
                    a != p && (q ? q == a && (q = a.n) : q = a, f(a.n, a.p), f(a, p), p = a, p.n = null)
                }
                function f(a, b) {
                    a != b && (a && (a.p = b), b && (b.n = a))
                }
                if (b in a)
                    throw v("$cacheFactory")("iid",
                    b);
                var g = 0, h = H({}, d, {
                    id: b
                }), k = {}, l = d && d.capacity || Number.MAX_VALUE, m = {}, p = null, q = null;
                return a[b] = {
                    put: function(a, b) {
                        if (l < Number.MAX_VALUE) {
                            var c = m[a] || (m[a] = {
                                key: a
                            });
                            e(c)
                        }
                        if (!D(b))
                            return a in k || g++, k[a] = b, g > l && this.remove(q.key), b
                    },
                    get: function(a) {
                        if (l < Number.MAX_VALUE) {
                            var b = m[a];
                            if (!b)
                                return;
                            e(b)
                        }
                        return k[a]
                    },
                    remove: function(a) {
                        if (l < Number.MAX_VALUE) {
                            var b = m[a];
                            if (!b)
                                return;
                            b == p && (p = b.p);
                            b == q && (q = b.n);
                            f(b.n, b.p);
                            delete m[a]
                        }
                        delete k[a];
                        g--
                    },
                    removeAll: function() {
                        k = {};
                        g = 0;
                        m = {};
                        p = q = null
                    },
                    destroy: function() {
                        m =
                        h = k = null;
                        delete a[b]
                    },
                    info: function() {
                        return H({}, h, {
                            size: g
                        })
                    }
                }
            }
            var a = {};
            b.info = function() {
                var b = {};
                r(a, function(a, e) {
                    b[e] = a.info()
                });
                return b
            };
            b.get = function(b) {
                return a[b]
            };
            return b
        }
    }
    function Te() {
        this.$get = ["$cacheFactory", function(b) {
            return b("templates")
        }
        ]
    }
    function vc(b, a) {
        function c(a, b) {
            var c = /^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/, d = {};
            r(a, function(a, e) {
                var f = a.match(c);
                if (!f)
                    throw ia("iscp", b, e, a);
                d[e] = {
                    mode: f[1][0],
                    collection: "*" === f[2],
                    optional: "?" === f[3],
                    attrName: f[4] || e
                }
            });
            return d
        }
        var d =
        {}, e = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/, f = /(([\w\-]+)(?:\:([^;]+))?;?)/, g = Ed("ngSrc,ngSrcset,src,srcset"), h = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/, k = /^(on[a-z]+|formaction)$/;
        this.directive = function p(a, e) {
            La(a, "directive");
            I(a) ? (Ob(e, "directiveFactory"), d.hasOwnProperty(a) || (d[a] = [], b.factory(a + "Directive", ["$injector", "$exceptionHandler", function(b, e) {
                var f = [];
                r(d[a], function(d, g) {
                    try {
                        var h = b.invoke(d);
                        u(h) ? h = {
                            compile: ba(h)
                        } : !h.compile && h.link && (h.compile = ba(h.link));
                        h.priority = h.priority || 0;
                        h.index =
                        g;
                        h.name = h.name || a;
                        h.require = h.require || h.controller && h.name;
                        h.restrict = h.restrict || "EA";
                        L(h.scope) && (h.$$isolateBindings = c(h.scope, h.name));
                        f.push(h)
                    } catch (k) {
                        e(k)
                    }
                });
                return f
            }
            ])), d[a].push(e)) : r(a, kc(p));
            return this
        };
        this.aHrefSanitizationWhitelist = function(b) {
            return A(b) ? (a.aHrefSanitizationWhitelist(b), this) : a.aHrefSanitizationWhitelist()
        };
        this.imgSrcSanitizationWhitelist = function(b) {
            return A(b) ? (a.imgSrcSanitizationWhitelist(b), this) : a.imgSrcSanitizationWhitelist()
        };
        var l=!0;
        this.debugInfoEnabled =
        function(a) {
            return A(a) ? (l = a, this) : l
        };
        this.$get = ["$injector", "$interpolate", "$exceptionHandler", "$templateRequest", "$parse", "$controller", "$rootScope", "$document", "$sce", "$animate", "$$sanitizeUri", function(a, b, c, s, O, E, x, B, J, z, F) {
            function N(a, b) {
                try {
                    a.addClass(b)
                } catch (c) {}
            }
            function C(a, b, c, d, e) {
                a instanceof y || (a = y(a));
                r(a, function(b, c) {
                    b.nodeType == mb && b.nodeValue.match(/\S+/) && (a[c] = y(b).wrap("<span></span>").parent()[0])
                });
                var f = ca(a, b, a, c, d, e);
                C.$$addScopeClass(a);
                var g = null;
                return function(b,
                c, d) {
                    Ob(b, "scope");
                    d = d || {};
                    var e = d.parentBoundTranscludeFn, h = d.transcludeControllers;
                    d = d.futureParentElement;
                    e && e.$$boundTransclude && (e = e.$$boundTransclude);
                    g || (g = (d = d && d[0]) ? "foreignobject" !== sa(d) && d.toString().match(/SVG/) ? "svg" : "html" : "html");
                    d = "html" !== g ? y(T(g, y("<div>").append(a).html())) : c ? Ka.clone.call(a) : a;
                    if (h)
                        for (var k in h)
                            d.data("$" + k + "Controller", h[k].instance);
                    C.$$addScopeInfo(d, b);
                    c && c(d, b);
                    f && f(b, d, d, e);
                    return d
                }
            }
            function ca(a, b, c, d, e, f) {
                function g(a, c, d, e) {
                    var f, k, l, q, s, p, B;
                    if (n)
                        for (B =
                        Array(c.length), q = 0; q < h.length; q += 3)
                            f = h[q], B[f] = c[f];
                    else
                        B = c;
                    q = 0;
                    for (s = h.length; q < s;)
                        k = B[h[q++]], c = h[q++], f = h[q++], c ? (c.scope ? (l = a.$new(), C.$$addScopeInfo(y(k), l)) : l = a, p = c.transcludeOnThisElement ? M(a, c.transclude, e, c.elementTranscludeOnThisElement) : !c.templateOnThisElement && e ? e : !e && b ? M(a, b) : null, c(f, l, k, d, p)) : f && f(a, k.childNodes, t, e)
                }
                for (var h = [], k, l, q, s, n, p = 0; p < a.length; p++) {
                    k = new W;
                    l = V(a[p], [], k, 0 === p ? d : t, e);
                    (f = l.length ? A(l, a[p], k, b, c, null, [], [], f) : null) && f.scope && C.$$addScopeClass(k.$$element);
                    k = f && f.terminal ||!(q = a[p].childNodes) ||!q.length ? null : ca(q, f ? (f.transcludeOnThisElement ||!f.templateOnThisElement) && f.transclude : b);
                    if (f || k)
                        h.push(p, f, k), s=!0, n = n || f;
                    f = null
                }
                return s ? g : null
            }
            function M(a, b, c, d) {
                return function(d, e, f, g, h) {
                    d || (d = a.$new(!1, h), d.$$transcluded=!0);
                    return b(d, e, {
                        parentBoundTranscludeFn: c,
                        transcludeControllers: f,
                        futureParentElement: g
                    })
                }
            }
            function V(b, c, g, h, k) {
                var l = g.$attr, q;
                switch (b.nodeType) {
                case la:
                    fa(c, wa(sa(b)), "E", h, k);
                    for (var s, n, B, O = b.attributes, E = 0, J = O && O.length; E <
                    J; E++) {
                        var F=!1, x=!1;
                        s = O[E];
                        q = s.name;
                        s = P(s.value);
                        n = wa(q);
                        if (B = za.test(n))
                            q = Mb(n.substr(6), "-");
                        var N = n.replace(/(Start|End)$/, ""), C;
                        a:
                        {
                            var z = N;
                            if (d.hasOwnProperty(z)) {
                                C = void 0;
                                for (var z = a.get(z + "Directive"), V = 0, r = z.length; V < r; V++)
                                    if (C = z[V], C.multiElement) {
                                        C=!0;
                                        break a
                                    }
                            }
                            C=!1
                        }
                        C && n === N + "Start" && (F = q, x = q.substr(0, q.length - 5) + "end", q = q.substr(0, q.length - 6));
                        n = wa(q.toLowerCase());
                        l[n] = q;
                        if (B ||!g.hasOwnProperty(n))
                            g[n] = s, Kc(b, n) && (g[n]=!0);
                        R(b, c, s, n, B);
                        fa(c, n, "A", h, k, F, x)
                    }
                    b = b.className;
                    if (I(b) && "" !== b)
                        for (; q =
                        f.exec(b);)
                            n = wa(q[2]), fa(c, n, "C", h, k) && (g[n] = P(q[3])), b = b.substr(q.index + q[0].length);
                    break;
                case mb:
                    Y(c, b.nodeValue);
                    break;
                case 8:
                    try {
                        if (q = e.exec(b.nodeValue))
                            n = wa(q[1]), fa(c, n, "M", h, k) && (g[n] = P(q[2]))
                        } catch (ca) {}
                }
                c.sort(v);
                return c
            }
            function X(a, b, c) {
                var d = [], e = 0;
                if (b && a.hasAttribute && a.hasAttribute(b)) {
                    do {
                        if (!a)
                            throw ia("uterdir", b, c);
                        a.nodeType == la && (a.hasAttribute(b) && e++, a.hasAttribute(c) && e--);
                        d.push(a);
                        a = a.nextSibling
                    }
                    while (0 < e)
                    } else
                        d.push(a);
                return y(d)
            }
            function S(a, b, c) {
                return function(d,
                e, f, g, h) {
                    e = X(e[0], b, c);
                    return a(d, e, f, g, h)
                }
            }
            function A(a, d, e, f, g, k, l, s, p) {
                function B(a, b, c, d) {
                    if (a) {
                        c && (a = S(a, c, d));
                        a.require = K.require;
                        a.directiveName = ga;
                        if (M === K || K.$$isolateScope)
                            a = Z(a, {
                                isolateScope: !0
                            });
                        l.push(a)
                    }
                    if (b) {
                        c && (b = S(b, c, d));
                        b.require = K.require;
                        b.directiveName = ga;
                        if (M === K || K.$$isolateScope)
                            b = Z(b, {
                                isolateScope: !0
                            });
                        s.push(b)
                    }
                }
                function J(a, b, c, d) {
                    var e, f = "data", g=!1, k = c, l;
                    if (I(b)) {
                        l = b.match(h);
                        b = b.substring(l[0].length);
                        l[3] && (l[1] ? l[3] = null : l[1] = l[3]);
                        "^" === l[1] ? f = "inheritedData" : "^^" ===
                        l[1] && (f = "inheritedData", k = c.parent());
                        "?" === l[2] && (g=!0);
                        e = null;
                        d && "data" === f && (e = d[b]) && (e = e.instance);
                        e = e || k[f]("$" + b + "Controller");
                        if (!e&&!g)
                            throw ia("ctreq", b, a);
                        return e || null
                    }
                    G(b) && (e = [], r(b, function(b) {
                        e.push(J(a, b, c, d))
                    }));
                    return e
                }
                function F(a, c, f, g, h) {
                    function k(a, b, c) {
                        var d;
                        Ta(a) || (c = b, b = a, a = t);
                        H && (d = N);
                        c || (c = H ? V.parent() : V);
                        return h(a, b, d, c, Xb)
                    }
                    var n, p, B, x, N, db, V, S;
                    d === f ? (S = e, V = e.$$element) : (V = y(f), S = new W(V, e));
                    M && (x = c.$new(!0));
                    h && (db = k, db.$$boundTransclude = h);
                    z && (ca = {}, N = {}, r(z, function(a) {
                        var b =
                        {
                            $scope: a === M || a.$$isolateScope ? x: c,
                            $element: V,
                            $attrs: S,
                            $transclude: db
                        };
                        B = a.controller;
                        "@" == B && (B = S[a.name]);
                        b = E(B, b, !0, a.controllerAs);
                        N[a.name] = b;
                        H || V.data("$" + a.name + "Controller", b.instance);
                        ca[a.name] = b
                    }));
                    if (M) {
                        C.$$addScopeInfo(V, x, !0, !(da && (da === M || da === M.$$originalDirective)));
                        C.$$addScopeClass(V, !0);
                        g = ca && ca[M.name];
                        var X = x;
                        g && g.identifier&&!0 === M.bindToController && (X = g.instance);
                        r(x.$$isolateBindings = M.$$isolateBindings, function(a, d) {
                            var e = a.attrName, f = a.optional, g, h, k, l;
                            switch (a.mode) {
                            case "@":
                                S.$observe(e,
                                function(a) {
                                    X[d] = a
                                });
                                S.$$observers[e].$$scope = c;
                                S[e] && (X[d] = b(S[e])(c));
                                break;
                            case "=":
                                if (f&&!S[e])
                                    break;
                                h = O(S[e]);
                                l = h.literal ? na : function(a, b) {
                                    return a === b || a !== a && b !== b
                                };
                                k = h.assign || function() {
                                    g = X[d] = h(c);
                                    throw ia("nonassign", S[e], M.name);
                                };
                                g = X[d] = h(c);
                                f = function(a) {
                                    l(a, X[d]) || (l(a, g) ? k(c, a = X[d]) : X[d] = a);
                                    return g = a
                                };
                                f.$stateful=!0;
                                f = a.collection ? c.$watchCollection(S[e], f) : c.$watch(O(S[e], f), null, h.literal);
                                x.$on("$destroy", f);
                                break;
                            case "&":
                                h = O(S[e]), X[d] = function(a) {
                                    return h(c, a)
                                }
                            }
                        })
                    }
                    ca && (r(ca,
                    function(a) {
                        a()
                    }), ca = null);
                    g = 0;
                    for (n = l.length; g < n; g++)
                        p = l[g], $(p, p.isolateScope ? x : c, V, S, p.require && J(p.directiveName, p.require, V, N), db);
                    var Xb = c;
                    M && (M.template || null === M.templateUrl) && (Xb = x);
                    a && a(Xb, f.childNodes, t, h);
                    for (g = s.length - 1; 0 <= g; g--)
                        p = s[g], $(p, p.isolateScope ? x : c, V, S, p.require && J(p.directiveName, p.require, V, N), db)
                }
                p = p || {};
                for (var x =- Number.MAX_VALUE, N, z = p.controllerDirectives, ca, M = p.newIsolateScopeDirective, da = p.templateDirective, fa = p.nonTlbTranscludeDirective, w=!1, Na=!1, H = p.hasElementTranscludeDirective,
                Y = e.$$element = y(d), K, ga, v, Ga = f, Q, R = 0, za = a.length; R < za; R++) {
                    K = a[R];
                    var zb = K.$$start, aa = K.$$end;
                    zb && (Y = X(d, zb, aa));
                    v = t;
                    if (x > K.priority)
                        break;
                    if (v = K.scope)
                        K.templateUrl || (L(v) ? (ya("new/isolated scope", M || N, K, Y), M = K) : ya("new/isolated scope", M, K, Y)), N = N || K;
                    ga = K.name;
                    !K.templateUrl && K.controller && (v = K.controller, z = z || {}, ya("'" + ga + "' controller", z[ga], K, Y), z[ga] = K);
                    if (v = K.transclude)
                        w=!0, K.$$tlb || (ya("transclusion", fa, K, Y), fa = K), "element" == v ? (H=!0, x = K.priority, v = Y, Y = e.$$element = y(U.createComment(" " + ga +
                        ": " + e[ga] + " ")), d = Y[0], Ab(g, Ya.call(v, 0), d), Ga = C(v, f, x, k && k.name, {
                            nonTlbTranscludeDirective: fa
                        })) : (v = y(Rb(d)).contents(), Y.empty(), Ga = C(v, f));
                    if (K.template)
                        if (Na=!0, ya("template", da, K, Y), da = K, v = u(K.template) ? K.template(Y, e) : K.template, v = Qc(v), K.replace) {
                            k = K;
                            v = Pb.test(v) ? Rc(T(K.templateNamespace, P(v))) : [];
                            d = v[0];
                            if (1 != v.length || d.nodeType !== la)
                                throw ia("tplrt", ga, "");
                                Ab(g, Y, d);
                                za = {
                                    $attr: {}
                                };
                                v = V(d, [], za);
                                var of = a.splice(R + 1, a.length - (R + 1));
                                M && D(v);
                                a = a.concat(v).concat(of);
                                Pc(e, za);
                                za = a.length
                        } else
                            Y.html(v);
                    if (K.templateUrl)
                        Na=!0, ya("template", da, K, Y), da = K, K.replace && (k = K), F = nf(a.splice(R, a.length - R), Y, e, g, w && Ga, l, s, {
                            controllerDirectives: z,
                            newIsolateScopeDirective: M,
                            templateDirective: da,
                            nonTlbTranscludeDirective: fa
                        }), za = a.length;
                    else if (K.compile)
                        try {
                            Q = K.compile(Y, e, Ga), u(Q) ? B(null, Q, zb, aa) : Q && B(Q.pre, Q.post, zb, aa)
                        } catch (ba) {
                        c(ba, ua(Y))
                    }
                    K.terminal && (F.terminal=!0, x = Math.max(x, K.priority))
                }
                F.scope = N&&!0 === N.scope;
                F.transcludeOnThisElement = w;
                F.elementTranscludeOnThisElement = H;
                F.templateOnThisElement = Na;
                F.transclude = Ga;
                p.hasElementTranscludeDirective = H;
                return F
            }
            function D(a) {
                for (var b = 0, c = a.length; b < c; b++)
                    a[b] = mc(a[b], {
                        $$isolateScope: !0
                    })
            }
            function fa(b, e, f, g, h, k, l) {
                if (e === h)
                    return null;
                h = null;
                if (d.hasOwnProperty(e)) {
                    var q;
                    e = a.get(e + "Directive");
                    for (var s = 0, B = e.length; s < B; s++)
                        try {
                            q = e[s], (g === t || g > q.priority)&&-1 != q.restrict.indexOf(f) && (k && (q = mc(q, {
                                $$start: k,
                                $$end: l
                            })), b.push(q), h = q)
                        } catch (O) {
                        c(O)
                    }
                }
                return h
            }
            function Pc(a, b) {
                var c = b.$attr, d = a.$attr, e = a.$$element;
                r(a, function(d, e) {
                    "$" != e.charAt(0) &&
                    (b[e] && b[e] !== d && (d += ("style" === e ? ";" : " ") + b[e]), a.$set(e, d, !0, c[e]))
                });
                r(b, function(b, f) {
                    "class" == f ? (N(e, b), a["class"] = (a["class"] ? a["class"] + " " : "") + b) : "style" == f ? (e.attr("style", e.attr("style") + ";" + b), a.style = (a.style ? a.style + ";" : "") + b) : "$" == f.charAt(0) || a.hasOwnProperty(f) || (a[f] = b, d[f] = c[f])
                })
            }
            function nf(a, b, c, d, e, f, g, h) {
                var k = [], l, q, n = b[0], p = a.shift(), B = H({}, p, {
                    templateUrl: null,
                    transclude: null,
                    replace: null,
                    $$originalDirective: p
                }), O = u(p.templateUrl) ? p.templateUrl(b, c): p.templateUrl, E = p.templateNamespace;
                b.empty();
                s(J.getTrustedResourceUrl(O)).then(function(s) {
                    var F, J;
                    s = Qc(s);
                    if (p.replace) {
                        s = Pb.test(s) ? Rc(T(E, P(s))) : [];
                        F = s[0];
                        if (1 != s.length || F.nodeType !== la)
                            throw ia("tplrt", p.name, O);
                        s = {
                            $attr: {}
                        };
                        Ab(d, b, F);
                        var x = V(F, [], s);
                        L(p.scope) && D(x);
                        a = x.concat(a);
                        Pc(c, s)
                    } else
                        F = n, b.html(s);
                    a.unshift(B);
                    l = A(a, F, c, e, b, p, f, g, h);
                    r(d, function(a, c) {
                        a == F && (d[c] = b[0])
                    });
                    for (q = ca(b[0].childNodes, e); k.length;) {
                        s = k.shift();
                        J = k.shift();
                        var z = k.shift(), C = k.shift(), x = b[0];
                        if (!s.$$destroyed) {
                            if (J !== n) {
                                var S = J.className;
                                h.hasElementTranscludeDirective &&
                                p.replace || (x = Rb(F));
                                Ab(z, y(J), x);
                                N(y(x), S)
                            }
                            J = l.transcludeOnThisElement ? M(s, l.transclude, C) : C;
                            l(q, s, x, d, J)
                        }
                    }
                    k = null
                });
                return function(a, b, c, d, e) {
                    a = e;
                    b.$$destroyed || (k ? (k.push(b), k.push(c), k.push(d), k.push(a)) : (l.transcludeOnThisElement && (a = M(b, l.transclude, e)), l(q, b, c, d, a)))
                }
            }
            function v(a, b) {
                var c = b.priority - a.priority;
                return 0 !== c ? c : a.name !== b.name ? a.name < b.name?-1 : 1 : a.index - b.index
            }
            function ya(a, b, c, d) {
                if (b)
                    throw ia("multidir", b.name, c.name, a, ua(d));
            }
            function Y(a, c) {
                var d = b(c, !0);
                d && a.push({
                    priority: 0,
                    compile: function(a) {
                        a = a.parent();
                        var b=!!a.length;
                        b && C.$$addBindingClass(a);
                        return function(a, c) {
                            var e = c.parent();
                            b || C.$$addBindingClass(e);
                            C.$$addBindingInfo(e, d.expressions);
                            a.$watch(d, function(a) {
                                c[0].nodeValue = a
                            })
                        }
                    }
                })
            }
            function T(a, b) {
                a = Q(a || "html");
                switch (a) {
                case "svg":
                case "math":
                    var c = U.createElement("div");
                    c.innerHTML = "<" + a + ">" + b + "</" + a + ">";
                    return c.childNodes[0].childNodes;
                default:
                    return b
                }
            }
            function Ga(a, b) {
                if ("srcdoc" == b)
                    return J.HTML;
                var c = sa(a);
                if ("xlinkHref" == b || "form" == c && "action" == b ||
                "img" != c && ("src" == b || "ngSrc" == b))
                    return J.RESOURCE_URL
            }
            function R(a, c, d, e, f) {
                var h = b(d, !0);
                if (h) {
                    if ("multiple" === e && "select" === sa(a))
                        throw ia("selmulti", ua(a));
                    c.push({
                        priority: 100,
                        compile: function() {
                            return {
                                pre: function(c, d, l) {
                                    d = l.$$observers || (l.$$observers = {});
                                    if (k.test(e))
                                        throw ia("nodomevents");
                                    l[e] && (h = b(l[e], !0, Ga(a, e), g[e] || f)) && (l[e] = h(c), (d[e] || (d[e] = [])).$$inter=!0, (l.$$observers && l.$$observers[e].$$scope || c).$watch(h, function(a, b) {
                                        "class" === e && a != b ? l.$updateClass(a, b) : l.$set(e, a)
                                    }))
                                }
                            }
                        }
                    })
                }
            }
            function Ab(a, b, c) {
                var d = b[0], e = b.length, f = d.parentNode, g, h;
                if (a)
                    for (g = 0, h = a.length; g < h; g++)
                        if (a[g] == d) {
                            a[g++] = c;
                            h = g + e - 1;
                            for (var k = a.length; g < k; g++, h++)
                                h < k ? a[g] = a[h] : delete a[g];
                                a.length -= e - 1;
                                a.context === d && (a.context = c);
                                break
                        }
                f && f.replaceChild(c, d);
                a = U.createDocumentFragment();
                a.appendChild(d);
                y(c).data(y(d).data());
                oa ? (Nb=!0, oa.cleanData([d])) : delete y.cache[d[y.expando]];
                d = 1;
                for (e = b.length; d < e; d++)
                    f = b[d], y(f).remove(), a.appendChild(f), delete b[d];
                b[0] = c;
                b.length = 1
            }
            function Z(a, b) {
                return H(function() {
                    return a.apply(null,
                    arguments)
                }, a, b)
            }
            function $(a, b, d, e, f, g) {
                try {
                    a(b, d, e, f, g)
                } catch (h) {
                    c(h, ua(d))
                }
            }
            var W = function(a, b) {
                if (b) {
                    var c = Object.keys(b), d, e, f;
                    d = 0;
                    for (e = c.length; d < e; d++)
                        f = c[d], this[f] = b[f]
                } else
                    this.$attr = {};
                this.$$element = a
            };
            W.prototype = {
                $normalize: wa,
                $addClass: function(a) {
                    a && 0 < a.length && z.addClass(this.$$element, a)
                },
                $removeClass: function(a) {
                    a && 0 < a.length && z.removeClass(this.$$element, a)
                },
                $updateClass: function(a, b) {
                    var c = Sc(a, b);
                    c && c.length && z.addClass(this.$$element, c);
                    (c = Sc(b, a)) && c.length && z.removeClass(this.$$element,
                    c)
                },
                $set: function(a, b, d, e) {
                    var f = this.$$element[0], g = Kc(f, a), h = gf(f, a), f = a;
                    g ? (this.$$element.prop(a, b), e = g) : h && (this[h] = b, f = h);
                    this[a] = b;
                    e ? this.$attr[a] = e : (e = this.$attr[a]) || (this.$attr[a] = e = Mb(a, "-"));
                    g = sa(this.$$element);
                    if ("a" === g && "href" === a || "img" === g && "src" === a)
                        this[a] = b = F(b, "src" === a);
                    else if ("img" === g && "srcset" === a) {
                        for (var g = "", h = P(b), k = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/, k = /\s/.test(h) ? k : /(,)/, h = h.split(k), k = Math.floor(h.length / 2), l = 0; l < k; l++)
                            var q = 2 * l, g = g + F(P(h[q]), !0), g = g + (" " + P(h[q +
                            1]));
                        h = P(h[2 * l]).split(/\s/);
                        g += F(P(h[0]), !0);
                        2 === h.length && (g += " " + P(h[1]));
                        this[a] = b = g
                    }
                    !1 !== d && (null === b || b === t ? this.$$element.removeAttr(e) : this.$$element.attr(e, b));
                    (a = this.$$observers) && r(a[f], function(a) {
                        try {
                            a(b)
                        } catch (d) {
                            c(d)
                        }
                    })
                },
                $observe: function(a, b) {
                    var c = this, d = c.$$observers || (c.$$observers = pa()), e = d[a] || (d[a] = []);
                    e.push(b);
                    x.$evalAsync(function() {
                        !e.$$inter && c.hasOwnProperty(a) && b(c[a])
                    });
                    return function() {
                        Va(e, b)
                    }
                }
            };
            var Na = b.startSymbol(), ga = b.endSymbol(), Qc = "{{" == Na || "}}" == ga ? ma: function(a) {
                return a.replace(/\{\{/g,
                Na).replace(/}}/g, ga)
            }, za = /^ngAttr[A-Z]/;
            C.$$addBindingInfo = l ? function(a, b) {
                var c = a.data("$binding") || [];
                G(b) ? c = c.concat(b) : c.push(b);
                a.data("$binding", c)
            } : w;
            C.$$addBindingClass = l ? function(a) {
                N(a, "ng-binding")
            } : w;
            C.$$addScopeInfo = l ? function(a, b, c, d) {
                a.data(c ? d ? "$isolateScopeNoTemplate" : "$isolateScope" : "$scope", b)
            } : w;
            C.$$addScopeClass = l ? function(a, b) {
                N(a, b ? "ng-isolate-scope" : "ng-scope")
            } : w;
            return C
        }
        ]
    }
    function wa(b) {
        return bb(b.replace(pf, ""))
    }
    function Sc(b, a) {
        var c = "", d = b.split(/\s+/), e = a.split(/\s+/),
        f = 0;
        a: for (;
        f < d.length;
        f++) {
            for (var g = d[f], h = 0;
            h < e.length;
            h++)if (g == e[h])
                continue a;
            c += (0 < c.length ? " " : "") + g
        }
        return c
    }
    function Rc(b) {
        b = y(b);
        var a = b.length;
        if (1 >= a)
            return b;
        for (; a--;)
            8 === b[a].nodeType && qf.call(b, a, 1);
        return b
    }
    function De() {
        var b = {}, a=!1, c = /^(\S+)(\s+as\s+(\w+))?$/;
        this.register = function(a, c) {
            La(a, "controller");
            L(a) ? H(b, a) : b[a] = c
        };
        this.allowGlobals = function() {
            a=!0
        };
        this.$get = ["$injector", "$window", function(d, e) {
            function f(a, b, c, d) {
                if (!a ||!L(a.$scope))
                    throw v("$controller")("noscp", d,
                    b);
                a.$scope[b] = c
            }
            return function(g, h, k, l) {
                var m, p, q;
                k=!0 === k;
                l && I(l) && (q = l);
                I(g) && (l = g.match(c), p = l[1], q = q || l[3], g = b.hasOwnProperty(p) ? b[p] : uc(h.$scope, p, !0) || (a ? uc(e, p, !0) : t), pb(g, p, !0));
                if (k)
                    return k = function() {}, k.prototype = (G(g) ? g[g.length - 1] : g).prototype, m = new k, q && f(h, q, m, p || g.name), H(function() {
                        d.invoke(g, m, h, p);
                        return m
                    }, {
                        instance: m,
                        identifier: q
                    });
                m = d.instantiate(g, h, p);
                q && f(h, q, m, p || g.name);
                return m
            }
        }
        ]
    }
    function Ee() {
        this.$get = ["$window", function(b) {
            return y(b.document)
        }
        ]
    }
    function Fe() {
        this.$get =
        ["$log", function(b) {
            return function(a, c) {
                b.error.apply(b, arguments)
            }
        }
        ]
    }
    function Yb(b, a) {
        if (I(b)) {
            b = b.replace(rf, "");
            var c = a("Content-Type");
            if (c && 0 === c.indexOf(Tc) && b.trim() || sf.test(b) && tf.test(b))
                b = pc(b)
        }
        return b
    }
    function Uc(b) {
        var a = {}, c, d, e;
        if (!b)
            return a;
        r(b.split("\n"), function(b) {
            e = b.indexOf(":");
            c = Q(P(b.substr(0, e)));
            d = P(b.substr(e + 1));
            c && (a[c] = a[c] ? a[c] + ", " + d : d)
        });
        return a
    }
    function Vc(b) {
        var a = L(b) ? b: t;
        return function(c) {
            a || (a = Uc(b));
            return c ? a[Q(c)] || null : a
        }
    }
    function Wc(b, a, c) {
        if (u(c))
            return c(b,
            a);
        r(c, function(c) {
            b = c(b, a)
        });
        return b
    }
    function Ie() {
        var b = this.defaults = {
            transformResponse: [Yb],
            transformRequest: [function(a) {
                return L(a) && "[object File]" !== Ja.call(a) && "[object Blob]" !== Ja.call(a) ? Za(a) : a
            }
            ],
            headers: {
                common: {
                    Accept: "application/json, text/plain, */*"
                },
                post: ta(Zb),
                put: ta(Zb),
                patch: ta(Zb)
            },
            xsrfCookieName: "XSRF-TOKEN",
            xsrfHeaderName: "X-XSRF-TOKEN"
        }, a=!1;
        this.useApplyAsync = function(b) {
            return A(b) ? (a=!!b, this) : a
        };
        var c = this.interceptors = [];
        this.$get = ["$httpBackend", "$browser", "$cacheFactory",
        "$rootScope", "$q", "$injector", function(d, e, f, g, h, k) {
            function l(a) {
                function c(a) {
                    var b = H({}, a);
                    b.data = a.data ? Wc(a.data, a.headers, d.transformResponse) : a.data;
                    a = a.status;
                    return 200 <= a && 300 > a ? b : h.reject(b)
                }
                var d = {
                    method: "get",
                    transformRequest: b.transformRequest,
                    transformResponse: b.transformResponse
                }, e = function(a) {
                    var c = b.headers, d = H({}, a.headers), e, f, c = H({}, c.common, c[Q(a.method)]);
                    a: for (e in c) {
                        a = Q(e);
                        for (f in d)
                            if (Q(f) === a)
                                continue a;
                        d[e] = c[e]
                    }(function(a) {
                        var b;
                        r(a, function(c, d) {
                            u(c) && (b = c(), null !=
                            b ? a[d] = b : delete a[d])
                        })
                    })(d);
                    return d
                }(a);
                H(d, a);
                d.headers = e;
                d.method = rb(d.method);
                var f = [function(a) {
                    e = a.headers;
                    var d = Wc(a.data, Vc(e), a.transformRequest);
                    D(d) && r(e, function(a, b) {
                        "content-type" === Q(b) && delete e[b]
                    });
                    D(a.withCredentials)&&!D(b.withCredentials) && (a.withCredentials = b.withCredentials);
                    return m(a, d, e).then(c, c)
                }, t], g = h.when(d);
                for (r(n, function(a) {
                    (a.request || a.requestError) && f.unshift(a.request, a.requestError);
                    (a.response || a.responseError) && f.push(a.response, a.responseError)
                });
                f.length;
                ) {
                    a =
                    f.shift();
                    var k = f.shift(), g = g.then(a, k)
                }
                g.success = function(a) {
                    g.then(function(b) {
                        a(b.data, b.status, b.headers, d)
                    });
                    return g
                };
                g.error = function(a) {
                    g.then(null, function(b) {
                        a(b.data, b.status, b.headers, d)
                    });
                    return g
                };
                return g
            }
            function m(c, f, k) {
                function n(b, c, d, e) {
                    function f() {
                        m(c, b, d, e)
                    }
                    N && (200 <= b && 300 > b ? N.put(r, [b, c, Uc(d), e]) : N.remove(r));
                    a ? g.$applyAsync(f) : (f(), g.$$phase || g.$apply())
                }
                function m(a, b, d, e) {
                    b = Math.max(b, 0);
                    (200 <= b && 300 > b ? z.resolve : z.reject)({
                        data: a,
                        status: b,
                        headers: Vc(d),
                        config: c,
                        statusText: e
                    })
                }
                function J() {
                    var a = l.pendingRequests.indexOf(c);
                    - 1 !== a && l.pendingRequests.splice(a, 1)
                }
                var z = h.defer(), F = z.promise, N, C, r = p(c.url, c.params);
                l.pendingRequests.push(c);
                F.then(J, J);
                !c.cache&&!b.cache ||!1 === c.cache || "GET" !== c.method && "JSONP" !== c.method || (N = L(c.cache) ? c.cache : L(b.cache) ? b.cache : q);
                if (N)
                    if (C = N.get(r), A(C)) {
                        if (C && u(C.then))
                            return C.then(J, J), C;
                            G(C) ? m(C[1], C[0], ta(C[2]), C[3]) : m(C, 200, {}, "OK")
                    } else
                        N.put(r, F);
                D(C) && ((C = Xc(c.url) ? e.cookies()[c.xsrfCookieName || b.xsrfCookieName] : t) && (k[c.xsrfHeaderName ||
                b.xsrfHeaderName] = C), d(c.method, r, f, n, k, c.timeout, c.withCredentials, c.responseType));
                return F
            }
            function p(a, b) {
                if (!b)
                    return a;
                var c = [];
                Cd(b, function(a, b) {
                    null === a || D(a) || (G(a) || (a = [a]), r(a, function(a) {
                        L(a) && (a = ea(a) ? a.toISOString() : Za(a));
                        c.push(Da(b) + "=" + Da(a))
                    }))
                });
                0 < c.length && (a += ( - 1 == a.indexOf("?") ? "?" : "&") + c.join("&"));
                return a
            }
            var q = f("$http"), n = [];
            r(c, function(a) {
                n.unshift(I(a) ? k.get(a) : k.invoke(a))
            });
            l.pendingRequests = [];
            (function(a) {
                r(arguments, function(a) {
                    l[a] = function(b, c) {
                        return l(H(c ||
                        {}, {
                            method: a,
                            url: b
                        }))
                    }
                })
            })("get", "delete", "head", "jsonp");
            (function(a) {
                r(arguments, function(a) {
                    l[a] = function(b, c, d) {
                        return l(H(d || {}, {
                            method: a,
                            url: b,
                            data: c
                        }))
                    }
                })
            })("post", "put", "patch");
            l.defaults = b;
            return l
        }
        ]
    }
    function uf() {
        return new T.XMLHttpRequest
    }
    function Je() {
        this.$get = ["$browser", "$window", "$document", function(b, a, c) {
            return vf(b, uf, b.defer, a.angular.callbacks, c[0])
        }
        ]
    }
    function vf(b, a, c, d, e) {
        function f(a, b, c) {
            var f = e.createElement("script"), m = null;
            f.type = "text/javascript";
            f.src = a;
            f.async=!0;
            m = function(a) {
                f.removeEventListener("load", m, !1);
                f.removeEventListener("error", m, !1);
                e.body.removeChild(f);
                f = null;
                var g =- 1, n = "unknown";
                a && ("load" !== a.type || d[b].called || (a = {
                    type: "error"
                }), n = a.type, g = "error" === a.type ? 404 : 200);
                c && c(g, n)
            };
            f.addEventListener("load", m, !1);
            f.addEventListener("error", m, !1);
            e.body.appendChild(f);
            return m
        }
        return function(e, h, k, l, m, p, q, n) {
            function s() {
                x && x();
                B && B.abort()
            }
            function O(a, d, e, f, g) {
                z && c.cancel(z);
                x = B = null;
                a(d, e, f, g);
                b.$$completeOutstandingRequest(w)
            }
            b.$$incOutstandingRequestCount();
            h = h || b.url();
            if ("jsonp" == Q(e)) {
                var E = "_" + (d.counter++).toString(36);
                d[E] = function(a) {
                    d[E].data = a;
                    d[E].called=!0
                };
                var x = f(h.replace("JSON_CALLBACK", "angular.callbacks." + E), E, function(a, b) {
                    O(l, a, d[E].data, "", b);
                    d[E] = w
                })
            } else {
                var B = a();
                B.open(e, h, !0);
                r(m, function(a, b) {
                    A(a) && B.setRequestHeader(b, a)
                });
                B.onload = function() {
                    var a = B.statusText || "", b = "response"in B ? B.response: B.responseText, c = 1223 === B.status ? 204: B.status;
                    0 === c && (c = b ? 200 : "file" == Aa(h).protocol ? 404 : 0);
                    O(l, c, b, B.getAllResponseHeaders(), a)
                };
                e =
                function() {
                    O(l, - 1, null, null, "")
                };
                B.onerror = e;
                B.onabort = e;
                q && (B.withCredentials=!0);
                if (n)
                    try {
                        B.responseType = n
                } catch (J) {
                    if ("json" !== n)
                        throw J;
                }
                B.send(k || null)
            }
            if (0 < p)
                var z = c(s, p);
            else
                p && u(p.then) && p.then(s)
        }
    }
    function Ge() {
        var b = "{{", a = "}}";
        this.startSymbol = function(a) {
            return a ? (b = a, this) : b
        };
        this.endSymbol = function(b) {
            return b ? (a = b, this) : a
        };
        this.$get = ["$parse", "$exceptionHandler", "$sce", function(c, d, e) {
            function f(a) {
                return "\\\\\\" + a
            }
            function g(f, g, n, s) {
                function O(c) {
                    return c.replace(l, b).replace(m,
                    a)
                }
                function E(a) {
                    try {
                        var b = a;
                        a = n ? e.getTrusted(n, b) : e.valueOf(b);
                        var c;
                        if (s&&!A(a))
                            c = a;
                        else if (null == a)
                            c = "";
                        else {
                            switch (typeof a) {
                            case "string":
                                break;
                            case "number":
                                a = "" + a;
                                break;
                            default:
                                a = Za(a)
                            }
                            c = a
                        }
                        return c
                    } catch (g) {
                        c = $b("interr", f, g.toString()), d(c)
                    }
                }
                s=!!s;
                for (var x, B, J = 0, z = [], F = [], N = f.length, C = [], r = []; J < N;)
                    if ( - 1 != (x = f.indexOf(b, J))&&-1 != (B = f.indexOf(a, x + h)))
                        J !== x && C.push(O(f.substring(J, x))), J = f.substring(x + h, B), z.push(J), F.push(c(J, E)), J = B + k, r.push(C.length), C.push("");
                    else {
                        J !== N && C.push(O(f.substring(J)));
                        break
                    }
                if (n && 1 < C.length)
                    throw $b("noconcat", f);
                if (!g || z.length) {
                    var M = function(a) {
                        for (var b = 0, c = z.length; b < c; b++) {
                            if (s && D(a[b]))
                                return;
                            C[r[b]] = a[b]
                        }
                        return C.join("")
                    };
                    return H(function(a) {
                        var b = 0, c = z.length, e = Array(c);
                        try {
                            for (; b < c; b++)
                                e[b] = F[b](a);
                            return M(e)
                        } catch (g) {
                            a = $b("interr", f, g.toString()), d(a)
                        }
                    }, {
                        exp: f,
                        expressions: z,
                        $$watchDelegate: function(a, b, c) {
                            var d;
                            return a.$watchGroup(F, function(c, e) {
                                var f = M(c);
                                u(b) && b.call(this, f, c !== e ? d : f, a);
                                d = f
                            }, c)
                        }
                    })
                }
            }
            var h = b.length, k = a.length, l = new RegExp(b.replace(/./g,
            f), "g"), m = new RegExp(a.replace(/./g, f), "g");
            g.startSymbol = function() {
                return b
            };
            g.endSymbol = function() {
                return a
            };
            return g
        }
        ]
    }
    function He() {
        this.$get = ["$rootScope", "$window", "$q", "$$q", function(b, a, c, d) {
            function e(e, h, k, l) {
                var m = a.setInterval, p = a.clearInterval, q = 0, n = A(l)&&!l, s = (n ? d : c).defer(), O = s.promise;
                k = A(k) ? k : 0;
                O.then(null, null, e);
                O.$$intervalId = m(function() {
                    s.notify(q++);
                    0 < k && q >= k && (s.resolve(q), p(O.$$intervalId), delete f[O.$$intervalId]);
                    n || b.$apply()
                }, h);
                f[O.$$intervalId] = s;
                return O
            }
            var f = {};
            e.cancel = function(b) {
                return b && b.$$intervalId in f ? (f[b.$$intervalId].reject("canceled"), a.clearInterval(b.$$intervalId), delete f[b.$$intervalId], !0) : !1
            };
            return e
        }
        ]
    }
    function Pd() {
        this.$get = function() {
            return {
                id: "en-us",
                NUMBER_FORMATS: {
                    DECIMAL_SEP: ".",
                    GROUP_SEP: ",",
                    PATTERNS: [{
                        minInt: 1,
                        minFrac: 0,
                        maxFrac: 3,
                        posPre: "",
                        posSuf: "",
                        negPre: "-",
                        negSuf: "",
                        gSize: 3,
                        lgSize: 3
                    }, {
                        minInt: 1,
                        minFrac: 2,
                        maxFrac: 2,
                        posPre: "\u00a4",
                        posSuf: "",
                        negPre: "(\u00a4",
                        negSuf: ")",
                        gSize: 3,
                        lgSize: 3
                    }
                    ],
                    CURRENCY_SYM: "$"
                },
                DATETIME_FORMATS: {
                    MONTH: "January February March April May June July August September October November December".split(" "),
                    SHORTMONTH: "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),
                    DAY: "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
                    SHORTDAY: "Sun Mon Tue Wed Thu Fri Sat".split(" "),
                    AMPMS: ["AM", "PM"],
                    medium: "MMM d, y h:mm:ss a",
                    "short": "M/d/yy h:mm a",
                    fullDate: "EEEE, MMMM d, y",
                    longDate: "MMMM d, y",
                    mediumDate: "MMM d, y",
                    shortDate: "M/d/yy",
                    mediumTime: "h:mm:ss a",
                    shortTime: "h:mm a"
                },
                pluralCat: function(b) {
                    return 1 === b ? "one" : "other"
                }
            }
        }
    }
    function ac(b) {
        b = b.split("/");
        for (var a = b.length; a--;)
            b[a] =
            nb(b[a]);
        return b.join("/")
    }
    function Yc(b, a) {
        var c = Aa(b);
        a.$$protocol = c.protocol;
        a.$$host = c.hostname;
        a.$$port = aa(c.port) || wf[c.protocol] || null
    }
    function Zc(b, a) {
        var c = "/" !== b.charAt(0);
        c && (b = "/" + b);
        var d = Aa(b);
        a.$$path = decodeURIComponent(c && "/" === d.pathname.charAt(0) ? d.pathname.substring(1) : d.pathname);
        a.$$search = rc(d.search);
        a.$$hash = decodeURIComponent(d.hash);
        a.$$path && "/" != a.$$path.charAt(0) && (a.$$path = "/" + a.$$path)
    }
    function xa(b, a) {
        if (0 === a.indexOf(b))
            return a.substr(b.length)
    }
    function Fa(b) {
        var a =
        b.indexOf("#");
        return - 1 == a ? b : b.substr(0, a)
    }
    function bc(b) {
        return b.substr(0, Fa(b).lastIndexOf("/") + 1)
    }
    function cc(b, a) {
        this.$$html5=!0;
        a = a || "";
        var c = bc(b);
        Yc(b, this);
        this.$$parse = function(a) {
            var b = xa(c, a);
            if (!I(b))
                throw eb("ipthprfx", a, c);
            Zc(b, this);
            this.$$path || (this.$$path = "/");
            this.$$compose()
        };
        this.$$compose = function() {
            var a = Kb(this.$$search), b = this.$$hash ? "#" + nb(this.$$hash): "";
            this.$$url = ac(this.$$path) + (a ? "?" + a : "") + b;
            this.$$absUrl = c + this.$$url.substr(1)
        };
        this.$$parseLinkUrl = function(d, e) {
            if (e &&
            "#" === e[0])
                return this.hash(e.slice(1)), !0;
            var f, g;
            (f = xa(b, d)) !== t ? (g = f, g = (f = xa(a, f)) !== t ? c + (xa("/", f) || f) : b + g) : (f = xa(c, d)) !== t ? g = c + f : c == d + "/" && (g = c);
            g && this.$$parse(g);
            return !!g
        }
    }
    function dc(b, a) {
        var c = bc(b);
        Yc(b, this);
        this.$$parse = function(d) {
            var e = xa(b, d) || xa(c, d), e = "#" == e.charAt(0) ? xa(a, e): this.$$html5 ? e: "";
            if (!I(e))
                throw eb("ihshprfx", d, a);
            Zc(e, this);
            d = this.$$path;
            var f = /^\/[A-Z]:(\/.*)/;
            0 === e.indexOf(b) && (e = e.replace(b, ""));
            f.exec(e) || (d = (e = f.exec(d)) ? e[1] : d);
            this.$$path = d;
            this.$$compose()
        };
        this.$$compose = function() {
            var c = Kb(this.$$search), e = this.$$hash ? "#" + nb(this.$$hash): "";
            this.$$url = ac(this.$$path) + (c ? "?" + c : "") + e;
            this.$$absUrl = b + (this.$$url ? a + this.$$url : "")
        };
        this.$$parseLinkUrl = function(a, c) {
            return Fa(b) == Fa(a) ? (this.$$parse(a), !0) : !1
        }
    }
    function $c(b, a) {
        this.$$html5=!0;
        dc.apply(this, arguments);
        var c = bc(b);
        this.$$parseLinkUrl = function(d, e) {
            if (e && "#" === e[0])
                return this.hash(e.slice(1)), !0;
            var f, g;
            b == Fa(d) ? f = d : (g = xa(c, d)) ? f = b + a + g : c === d + "/" && (f = c);
            f && this.$$parse(f);
            return !!f
        };
        this.$$compose =
        function() {
            var c = Kb(this.$$search), e = this.$$hash ? "#" + nb(this.$$hash): "";
            this.$$url = ac(this.$$path) + (c ? "?" + c : "") + e;
            this.$$absUrl = b + a + this.$$url
        }
    }
    function Bb(b) {
        return function() {
            return this[b]
        }
    }
    function ad(b, a) {
        return function(c) {
            if (D(c))
                return this[b];
            this[b] = a(c);
            this.$$compose();
            return this
        }
    }
    function Ke() {
        var b = "", a = {
            enabled: !1,
            requireBase: !0,
            rewriteLinks: !0
        };
        this.hashPrefix = function(a) {
            return A(a) ? (b = a, this) : b
        };
        this.html5Mode = function(b) {
            return Ua(b) ? (a.enabled = b, this) : L(b) ? (Ua(b.enabled) && (a.enabled =
            b.enabled), Ua(b.requireBase) && (a.requireBase = b.requireBase), Ua(b.rewriteLinks) && (a.rewriteLinks = b.rewriteLinks), this) : a
        };
        this.$get = ["$rootScope", "$browser", "$sniffer", "$rootElement", function(c, d, e, f) {
            function g(a, b, c) {
                var e = k.url(), f = k.$$state;
                try {
                    d.url(a, b, c), k.$$state = d.state()
                } catch (g) {
                    throw k.url(e), k.$$state = f, g;
                }
            }
            function h(a, b) {
                c.$broadcast("$locationChangeSuccess", k.absUrl(), a, k.$$state, b)
            }
            var k, l;
            l = d.baseHref();
            var m = d.url(), p;
            if (a.enabled) {
                if (!l && a.requireBase)
                    throw eb("nobase");
                p = m.substring(0,
                m.indexOf("/", m.indexOf("//") + 2)) + (l || "/");
                l = e.history ? cc : $c
            } else
                p = Fa(m), l = dc;
            k = new l(p, "#" + b);
            k.$$parseLinkUrl(m, m);
            k.$$state = d.state();
            var q = /^\s*(javascript|mailto):/i;
            f.on("click", function(b) {
                if (a.rewriteLinks&&!b.ctrlKey&&!b.metaKey && 2 != b.which) {
                    for (var e = y(b.target); "a" !== sa(e[0]);)
                        if (e[0] === f[0] ||!(e = e.parent())[0])
                            return;
                    var g = e.prop("href"), h = e.attr("href") || e.attr("xlink:href");
                    L(g) && "[object SVGAnimatedString]" === g.toString() && (g = Aa(g.animVal).href);
                    q.test(g) ||!g || e.attr("target") || b.isDefaultPrevented() ||
                    !k.$$parseLinkUrl(g, h) || (b.preventDefault(), k.absUrl() != d.url() && (c.$apply(), T.angular["ff-684208-preventDefault"]=!0))
                }
            });
            k.absUrl() != m && d.url(k.absUrl(), !0);
            var n=!0;
            d.onUrlChange(function(a, b) {
                c.$evalAsync(function() {
                    var d = k.absUrl(), e = k.$$state, f;
                    k.$$parse(a);
                    k.$$state = b;
                    f = c.$broadcast("$locationChangeStart", a, d, b, e).defaultPrevented;
                    k.absUrl() === a && (f ? (k.$$parse(d), k.$$state = e, g(d, !1, e)) : (n=!1, h(d, e)))
                });
                c.$$phase || c.$digest()
            });
            c.$watch(function() {
                var a = d.url(), b = d.state(), f = k.$$replace, l = a !==
                k.absUrl() || k.$$html5 && e.history && b !== k.$$state;
                if (n || l)
                    n=!1, c.$evalAsync(function() {
                        var d = k.absUrl(), e = c.$broadcast("$locationChangeStart", d, a, k.$$state, b).defaultPrevented;
                        k.absUrl() === d && (e ? (k.$$parse(a), k.$$state = b) : (l && g(d, f, b === k.$$state ? null : k.$$state), h(a, b)))
                    });
                k.$$replace=!1
            });
            return k
        }
        ]
    }
    function Le() {
        var b=!0, a = this;
        this.debugEnabled = function(a) {
            return A(a) ? (b = a, this) : b
        };
        this.$get = ["$window", function(c) {
            function d(a) {
                a instanceof Error && (a.stack ? a = a.message&&-1 === a.stack.indexOf(a.message) ?
                "Error: " + a.message + "\n" + a.stack : a.stack : a.sourceURL && (a = a.message + "\n" + a.sourceURL + ":" + a.line));
                return a
            }
            function e(a) {
                var b = c.console || {}, e = b[a] || b.log || w;
                a=!1;
                try {
                    a=!!e.apply
                } catch (k) {}
                return a ? function() {
                    var a = [];
                    r(arguments, function(b) {
                        a.push(d(b))
                    });
                    return e.apply(b, a)
                } : function(a, b) {
                    e(a, null == b ? "" : b)
                }
            }
            return {
                log: e("log"),
                info: e("info"),
                warn: e("warn"),
                error: e("error"),
                debug: function() {
                    var c = e("debug");
                    return function() {
                        b && c.apply(a, arguments)
                    }
                }()
            }
        }
        ]
    }
    function qa(b, a) {
        if ("__defineGetter__" ===
        b || "__defineSetter__" === b || "__lookupGetter__" === b || "__lookupSetter__" === b || "__proto__" === b)
            throw ja("isecfld", a);
        return b
    }
    function ra(b, a) {
        if (b) {
            if (b.constructor === b)
                throw ja("isecfn", a);
            if (b.window === b)
                throw ja("isecwindow", a);
            if (b.children && (b.nodeName || b.prop && b.attr && b.find))
                throw ja("isecdom", a);
            if (b === Object)
                throw ja("isecobj", a);
        }
        return b
    }
    function ec(b) {
        return b.constant
    }
    function Oa(b, a, c, d) {
        ra(b, d);
        a = a.split(".");
        for (var e, f = 0; 1 < a.length; f++) {
            e = qa(a.shift(), d);
            var g = ra(b[e], d);
            g || (g = {}, b[e] =
            g);
            b = g
        }
        e = qa(a.shift(), d);
        ra(b[e], d);
        return b[e] = c
    }
    function Pa(b) {
        return "constructor" == b
    }
    function bd(b, a, c, d, e, f, g) {
        qa(b, f);
        qa(a, f);
        qa(c, f);
        qa(d, f);
        qa(e, f);
        var h = function(a) {
            return ra(a, f)
        }, k = g || Pa(b) ? h: ma, l = g || Pa(a) ? h: ma, m = g || Pa(c) ? h: ma, p = g || Pa(d) ? h: ma, q = g || Pa(e) ? h: ma;
        return function(f, g) {
            var h = g && g.hasOwnProperty(b) ? g: f;
            if (null == h)
                return h;
            h = k(h[b]);
            if (!a)
                return h;
            if (null == h)
                return t;
            h = l(h[a]);
            if (!c)
                return h;
            if (null == h)
                return t;
            h = m(h[c]);
            if (!d)
                return h;
            if (null == h)
                return t;
            h = p(h[d]);
            return e ? null ==
            h ? t : h = q(h[e]) : h
        }
    }
    function xf(b, a) {
        return function(c, d) {
            return b(c, d, ra, a)
        }
    }
    function cd(b, a, c) {
        var d = a.expensiveChecks, e = d ? yf: zf, f = e[b];
        if (f)
            return f;
        var g = b.split("."), h = g.length;
        if (a.csp)
            f = 6 > h ? bd(g[0], g[1], g[2], g[3], g[4], c, d) : function(a, b) {
                var e = 0, f;
                do
                    f = bd(g[e++], g[e++], g[e++], g[e++], g[e++], c, d)(a, b), b = t, a = f;
                    while (e < h);
                    return f
                };
        else {
            var k = "";
            d && (k += "s = eso(s, fe);\nl = eso(l, fe);\n");
            var l = d;
            r(g, function(a, b) {
                qa(a, c);
                var e = (b ? "s" : '((l&&l.hasOwnProperty("' + a + '"))?l:s)') + "." + a;
                if (d || Pa(a))
                    e = "eso(" +
                    e + ", fe)", l=!0;
                k += "if(s == null) return undefined;\ns=" + e + ";\n"
            });
            k += "return s;";
            a = new Function("s", "l", "eso", "fe", k);
            a.toString = ba(k);
            l && (a = xf(a, c));
            f = a
        }
        f.sharedGetter=!0;
        f.assign = function(a, c) {
            return Oa(a, b, c, b)
        };
        return e[b] = f
    }
    function fc(b) {
        return u(b.valueOf) ? b.valueOf() : Af.call(b)
    }
    function Me() {
        var b = pa(), a = pa();
        this.$get = ["$filter", "$sniffer", function(c, d) {
            function e(a) {
                var b = a;
                a.sharedGetter && (b = function(b, c) {
                    return a(b, c)
                }, b.literal = a.literal, b.constant = a.constant, b.assign = a.assign);
                return b
            }
            function f(a, b) {
                for (var c = 0, d = a.length; c < d; c++) {
                    var e = a[c];
                    e.constant || (e.inputs ? f(e.inputs, b) : - 1 === b.indexOf(e) && b.push(e))
                }
                return b
            }
            function g(a, b) {
                return null == a || null == b ? a === b : "object" === typeof a && (a = fc(a), "object" === typeof a)?!1 : a === b || a !== a && b !== b
            }
            function h(a, b, c, d) {
                var e = d.$$inputs || (d.$$inputs = f(d.inputs, [])), h;
                if (1 === e.length) {
                    var k = g, e = e[0];
                    return a.$watch(function(a) {
                        var b = e(a);
                        g(b, k) || (h = d(a), k = b && fc(b));
                        return h
                    }, b, c)
                }
                for (var l = [], q = 0, n = e.length; q < n; q++)
                    l[q] = g;
                return a.$watch(function(a) {
                    for (var b =
                    !1, c = 0, f = e.length; c < f; c++) {
                        var k = e[c](a);
                        if (b || (b=!g(k, l[c])))
                            l[c] = k && fc(k)
                    }
                    b && (h = d(a));
                    return h
                }, b, c)
            }
            function k(a, b, c, d) {
                var e, f;
                return e = a.$watch(function(a) {
                    return d(a)
                }, function(a, c, d) {
                    f = a;
                    u(b) && b.apply(this, arguments);
                    A(a) && d.$$postDigest(function() {
                        A(f) && e()
                    })
                }, c)
            }
            function l(a, b, c, d) {
                function e(a) {
                    var b=!0;
                    r(a, function(a) {
                        A(a) || (b=!1)
                    });
                    return b
                }
                var f, g;
                return f = a.$watch(function(a) {
                    return d(a)
                }, function(a, c, d) {
                    g = a;
                    u(b) && b.call(this, a, c, d);
                    e(a) && d.$$postDigest(function() {
                        e(g) && f()
                    })
                }, c)
            }
            function m(a,
            b, c, d) {
                var e;
                return e = a.$watch(function(a) {
                    return d(a)
                }, function(a, c, d) {
                    u(b) && b.apply(this, arguments);
                    e()
                }, c)
            }
            function p(a, b) {
                if (!b)
                    return a;
                var c = a.$$watchDelegate, c = c !== l && c !== k ? function(c, d) {
                    var e = a(c, d);
                    return b(e, c, d)
                }
                : function(c, d) {
                    var e = a(c, d), f = b(e, c, d);
                    return A(e) ? f : e
                };
                a.$$watchDelegate && a.$$watchDelegate !== h ? c.$$watchDelegate = a.$$watchDelegate : b.$stateful || (c.$$watchDelegate = h, c.inputs = [a]);
                return c
            }
            var q = {
                csp: d.csp,
                expensiveChecks: !1
            }, n = {
                csp: d.csp,
                expensiveChecks: !0
            };
            return function(d,
            f, g) {
                var r, B, J;
                switch (typeof d) {
                case "string":
                    J = d = d.trim();
                    var z = g ? a: b;
                    r = z[J];
                    r || (":" === d.charAt(0) && ":" === d.charAt(1) && (B=!0, d = d.substring(2)), g = g ? n : q, r = new gc(g), r = (new fb(r, c, g)).parse(d), r.constant ? r.$$watchDelegate = m : B ? (r = e(r), r.$$watchDelegate = r.literal ? l : k) : r.inputs && (r.$$watchDelegate = h), z[J] = r);
                    return p(r, f);
                case "function":
                    return p(d, f);
                default:
                    return p(w, f)
                }
            }
        }
        ]
    }
    function Oe() {
        this.$get = ["$rootScope", "$exceptionHandler", function(b, a) {
            return dd(function(a) {
                b.$evalAsync(a)
            }, a)
        }
        ]
    }
    function Pe() {
        this.$get =
        ["$browser", "$exceptionHandler", function(b, a) {
            return dd(function(a) {
                b.defer(a)
            }, a)
        }
        ]
    }
    function dd(b, a) {
        function c(a, b, c) {
            function d(b) {
                return function(c) {
                    e || (e=!0, b.call(a, c))
                }
            }
            var e=!1;
            return [d(b), d(c)]
        }
        function d() {
            this.$$state = {
                status: 0
            }
        }
        function e(a, b) {
            return function(c) {
                b.call(a, c)
            }
        }
        function f(c) {
            !c.processScheduled && c.pending && (c.processScheduled=!0, b(function() {
                var b, d, e;
                e = c.pending;
                c.processScheduled=!1;
                c.pending = t;
                for (var f = 0, g = e.length; f < g; ++f) {
                    d = e[f][0];
                    b = e[f][c.status];
                    try {
                        u(b) ? d.resolve(b(c.value)) :
                        1 === c.status ? d.resolve(c.value) : d.reject(c.value)
                    } catch (h) {
                        d.reject(h), a(h)
                    }
                }
            }))
        }
        function g() {
            this.promise = new d;
            this.resolve = e(this, this.resolve);
            this.reject = e(this, this.reject);
            this.notify = e(this, this.notify)
        }
        var h = v("$q", TypeError);
        d.prototype = {
            then: function(a, b, c) {
                var d = new g;
                this.$$state.pending = this.$$state.pending || [];
                this.$$state.pending.push([d, a, b, c]);
                0 < this.$$state.status && f(this.$$state);
                return d.promise
            },
            "catch": function(a) {
                return this.then(null, a)
            },
            "finally": function(a, b) {
                return this.then(function(b) {
                    return l(b,
                    !0, a)
                }, function(b) {
                    return l(b, !1, a)
                }, b)
            }
        };
        g.prototype = {
            resolve: function(a) {
                this.promise.$$state.status || (a === this.promise ? this.$$reject(h("qcycle", a)) : this.$$resolve(a))
            },
            $$resolve: function(b) {
                var d, e;
                e = c(this, this.$$resolve, this.$$reject);
                try {
                    if (L(b) || u(b))
                        d = b && b.then;
                    u(d) ? (this.promise.$$state.status =- 1, d.call(b, e[0], e[1], this.notify)) : (this.promise.$$state.value = b, this.promise.$$state.status = 1, f(this.promise.$$state))
                } catch (g) {
                    e[1](g), a(g)
                }
            },
            reject: function(a) {
                this.promise.$$state.status || this.$$reject(a)
            },
            $$reject: function(a) {
                this.promise.$$state.value = a;
                this.promise.$$state.status = 2;
                f(this.promise.$$state)
            },
            notify: function(c) {
                var d = this.promise.$$state.pending;
                0 >= this.promise.$$state.status && d && d.length && b(function() {
                    for (var b, e, f = 0, g = d.length; f < g; f++) {
                        e = d[f][0];
                        b = d[f][3];
                        try {
                            e.notify(u(b) ? b(c) : c)
                        } catch (h) {
                            a(h)
                        }
                    }
                })
            }
        };
        var k = function(a, b) {
            var c = new g;
            b ? c.resolve(a) : c.reject(a);
            return c.promise
        }, l = function(a, b, c) {
            var d = null;
            try {
                u(c) && (d = c())
            } catch (e) {
                return k(e, !1)
            }
            return d && u(d.then) ? d.then(function() {
                return k(a,
                b)
            }, function(a) {
                return k(a, !1)
            }) : k(a, b)
        }, m = function(a, b, c, d) {
            var e = new g;
            e.resolve(a);
            return e.promise.then(b, c, d)
        }, p = function n(a) {
            if (!u(a))
                throw h("norslvr", a);
            if (!(this instanceof n))
                return new n(a);
            var b = new g;
            a(function(a) {
                b.resolve(a)
            }, function(a) {
                b.reject(a)
            });
            return b.promise
        };
        p.defer = function() {
            return new g
        };
        p.reject = function(a) {
            var b = new g;
            b.reject(a);
            return b.promise
        };
        p.when = m;
        p.all = function(a) {
            var b = new g, c = 0, d = G(a) ? []: {};
            r(a, function(a, e) {
                c++;
                m(a).then(function(a) {
                    d.hasOwnProperty(e) ||
                    (d[e] = a, --c || b.resolve(d))
                }, function(a) {
                    d.hasOwnProperty(e) || b.reject(a)
                })
            });
            0 === c && b.resolve(d);
            return b.promise
        };
        return p
    }
    function Ye() {
        this.$get = ["$window", "$timeout", function(b, a) {
            var c = b.requestAnimationFrame || b.webkitRequestAnimationFrame || b.mozRequestAnimationFrame, d = b.cancelAnimationFrame || b.webkitCancelAnimationFrame || b.mozCancelAnimationFrame || b.webkitCancelRequestAnimationFrame, e=!!c, f = e ? function(a) {
                var b = c(a);
                return function() {
                    d(b)
                }
            } : function(b) {
                var c = a(b, 16.66, !1);
                return function() {
                    a.cancel(c)
                }
            };
            f.supported = e;
            return f
        }
        ]
    }
    function Ne() {
        var b = 10, a = v("$rootScope"), c = null, d = null;
        this.digestTtl = function(a) {
            arguments.length && (b = a);
            return b
        };
        this.$get = ["$injector", "$exceptionHandler", "$parse", "$browser", function(e, f, g, h) {
            function k() {
                this.$id=++kb;
                this.$$phase = this.$parent = this.$$watchers = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = null;
                this.$root = this;
                this.$$destroyed=!1;
                this.$$listeners = {};
                this.$$listenerCount = {};
                this.$$isolateBindings = null
            }
            function l(b) {
                if (s.$$phase)
                    throw a("inprog",
                    s.$$phase);
                s.$$phase = b
            }
            function m(a, b, c) {
                do
                    a.$$listenerCount[c] -= b, 0 === a.$$listenerCount[c] && delete a.$$listenerCount[c];
                while (a = a.$parent)
                }
            function p() {}
            function q() {
                for (; x.length;)
                    try {
                        x.shift()()
                } catch (a) {
                    f(a)
                }
                d = null
            }
            function n() {
                null === d && (d = h.defer(function() {
                    s.$apply(q)
                }))
            }
            k.prototype = {
                constructor: k,
                $new: function(a, b) {
                    function c() {
                        d.$$destroyed=!0
                    }
                    var d;
                    b = b || this;
                    a ? (d = new k, d.$root = this.$root) : (this.$$ChildScope || (this.$$ChildScope = function() {
                        this.$$watchers = this.$$nextSibling = this.$$childHead =
                        this.$$childTail = null;
                        this.$$listeners = {};
                        this.$$listenerCount = {};
                        this.$id=++kb;
                        this.$$ChildScope = null
                    }, this.$$ChildScope.prototype = this), d = new this.$$ChildScope);
                    d.$parent = b;
                    d.$$prevSibling = b.$$childTail;
                    b.$$childHead ? (b.$$childTail.$$nextSibling = d, b.$$childTail = d) : b.$$childHead = b.$$childTail = d;
                    (a || b != this) && d.$on("$destroy", c);
                    return d
                },
                $watch: function(a, b, d) {
                    var e = g(a);
                    if (e.$$watchDelegate)
                        return e.$$watchDelegate(this, b, d, e);
                    var f = this.$$watchers, h = {
                        fn: b,
                        last: p,
                        get: e,
                        exp: a,
                        eq: !!d
                    };
                    c = null;
                    u(b) ||
                    (h.fn = w);
                    f || (f = this.$$watchers = []);
                    f.unshift(h);
                    return function() {
                        Va(f, h);
                        c = null
                    }
                },
                $watchGroup: function(a, b) {
                    function c() {
                        h=!1;
                        k ? (k=!1, b(e, e, g)) : b(e, d, g)
                    }
                    var d = Array(a.length), e = Array(a.length), f = [], g = this, h=!1, k=!0;
                    if (!a.length) {
                        var l=!0;
                        g.$evalAsync(function() {
                            l && b(e, e, g)
                        });
                        return function() {
                            l=!1
                        }
                    }
                    if (1 === a.length)
                        return this.$watch(a[0], function(a, c, f) {
                            e[0] = a;
                            d[0] = c;
                            b(e, a === c ? e : d, f)
                        });
                    r(a, function(a, b) {
                        var k = g.$watch(a, function(a, f) {
                            e[b] = a;
                            d[b] = f;
                            h || (h=!0, g.$evalAsync(c))
                        });
                        f.push(k)
                    });
                    return function() {
                        for (; f.length;)
                            f.shift()()
                    }
                },
                $watchCollection: function(a, b) {
                    function c(a) {
                        e = a;
                        var b, d, g, h;
                        if (!D(e)) {
                            if (L(e))
                                if (Ra(e))
                                    for (f !== m && (f = m, s = f.length = 0, l++), a = e.length, s !== a && (l++, f.length = s = a), b = 0; b < a; b++)
                                        h = f[b], g = e[b], d = h !== h && g !== g, d || h === g || (l++, f[b] = g);
                                else {
                                    f !== q && (f = q = {}, s = 0, l++);
                                    a = 0;
                                    for (b in e)
                                        e.hasOwnProperty(b) && (a++, g = e[b], h = f[b], b in f ? (d = h !== h && g !== g, d || h === g || (l++, f[b] = g)) : (s++, f[b] = g, l++));
                                        if (s > a)
                                            for (b in l++, f)
                                                e.hasOwnProperty(b) || (s--, delete f[b])
                                            } else
                                                f !== e && (f = e, l++);
                            return l
                        }
                    }
                    c.$stateful=!0;
                    var d = this, e, f, h, k = 1 <
                    b.length, l = 0, p = g(a, c), m = [], q = {}, n=!0, s = 0;
                    return this.$watch(p, function() {
                        n ? (n=!1, b(e, e, d)) : b(e, h, d);
                        if (k)
                            if (L(e))
                                if (Ra(e)) {
                                    h = Array(e.length);
                                    for (var a = 0; a < e.length; a++)
                                        h[a] = e[a]
                                } else
                                    for (a in h = {}, e)
                                        Jb.call(e, a) && (h[a] = e[a]);
                            else
                                h = e
                        })
                },
                $digest: function() {
                    var e, g, k, m, n, r, x = b, M, t = [], X, S;
                    l("$digest");
                    h.$$checkUrlChange();
                    this === s && null !== d && (h.defer.cancel(d), q());
                    c = null;
                    do {
                        r=!1;
                        for (M = this; O.length;) {
                            try {
                                S = O.shift(), S.scope.$eval(S.expression)
                            } catch (A) {
                                f(A)
                            }
                            c = null
                        }
                        a:
                        do {
                            if (m = M.$$watchers)
                                for (n = m.length; n--;)
                                    try {
                                        if (e =
                                        m[n])
                                            if ((g = e.get(M)) !== (k = e.last)&&!(e.eq ? na(g, k) : "number" === typeof g && "number" === typeof k && isNaN(g) && isNaN(k)))
                                                r=!0, c = e, e.last = e.eq ? Ca(g, null) : g, e.fn(g, k === p ? g : k, M), 5 > x && (X = 4 - x, t[X] || (t[X] = []), t[X].push({
                                                    msg: u(e.exp) ? "fn: " + (e.exp.name || e.exp.toString()): e.exp,
                                                    newVal: g,
                                                    oldVal: k
                                                }));
                                            else if (e === c) {
                                                r=!1;
                                                break a
                                            }
                            } catch (v) {
                                f(v)
                            }
                            if (!(m = M.$$childHead || M !== this && M.$$nextSibling))
                                for (; M !== this&&!(m = M.$$nextSibling);)
                                    M = M.$parent
                        }
                        while (M = m);
                        if ((r || O.length)&&!x--)
                            throw s.$$phase = null, a("infdig", b, t);
                    }
                    while (r ||
                    O.length);
                    for (s.$$phase = null; E.length;)
                        try {
                            E.shift()()
                    } catch (y) {
                        f(y)
                    }
                },
                $destroy: function() {
                    if (!this.$$destroyed) {
                        var a = this.$parent;
                        this.$broadcast("$destroy");
                        this.$$destroyed=!0;
                        if (this !== s) {
                            for (var b in this.$$listenerCount)
                                m(this, this.$$listenerCount[b], b);
                            a.$$childHead == this && (a.$$childHead = this.$$nextSibling);
                            a.$$childTail == this && (a.$$childTail = this.$$prevSibling);
                            this.$$prevSibling && (this.$$prevSibling.$$nextSibling = this.$$nextSibling);
                            this.$$nextSibling && (this.$$nextSibling.$$prevSibling =
                            this.$$prevSibling);
                            this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = w;
                            this.$on = this.$watch = this.$watchGroup = function() {
                                return w
                            };
                            this.$$listeners = {};
                            this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = this.$root = this.$$watchers = null
                        }
                    }
                },
                $eval: function(a, b) {
                    return g(a)(this, b)
                },
                $evalAsync: function(a) {
                    s.$$phase || O.length || h.defer(function() {
                        O.length && s.$digest()
                    });
                    O.push({
                        scope: this,
                        expression: a
                    })
                },
                $$postDigest: function(a) {
                    E.push(a)
                },
                $apply: function(a) {
                    try {
                        return l("$apply"),
                        this.$eval(a)
                    } catch (b) {
                        f(b)
                    } finally {
                        s.$$phase = null;
                        try {
                            s.$digest()
                        } catch (c) {
                            throw f(c), c;
                        }
                    }
                },
                $applyAsync: function(a) {
                    function b() {
                        c.$eval(a)
                    }
                    var c = this;
                    a && x.push(b);
                    n()
                },
                $on: function(a, b) {
                    var c = this.$$listeners[a];
                    c || (this.$$listeners[a] = c = []);
                    c.push(b);
                    var d = this;
                    do
                        d.$$listenerCount[a] || (d.$$listenerCount[a] = 0), d.$$listenerCount[a]++;
                    while (d = d.$parent);
                    var e = this;
                    return function() {
                        var d = c.indexOf(b);
                        - 1 !== d && (c[d] = null, m(e, 1, a))
                    }
                },
                $emit: function(a, b) {
                    var c = [], d, e = this, g=!1, h = {
                        name: a,
                        targetScope: e,
                        stopPropagation: function() {
                            g=!0
                        },
                        preventDefault: function() {
                            h.defaultPrevented=!0
                        },
                        defaultPrevented: !1
                    }, k = Xa([h], arguments, 1), l, m;
                    do {
                        d = e.$$listeners[a] || c;
                        h.currentScope = e;
                        l = 0;
                        for (m = d.length; l < m; l++)
                            if (d[l])
                                try {
                                    d[l].apply(null, k)
                        } catch (p) {
                            f(p)
                        } else
                            d.splice(l, 1), l--, m--;
                        if (g)
                            return h.currentScope = null, h;
                        e = e.$parent
                    }
                    while (e);
                    h.currentScope = null;
                    return h
                },
                $broadcast: function(a, b) {
                    var c = this, d = this, e = {
                        name: a,
                        targetScope: this,
                        preventDefault: function() {
                            e.defaultPrevented=!0
                        },
                        defaultPrevented: !1
                    };
                    if (!this.$$listenerCount[a])
                        return e;
                    for (var g = Xa([e], arguments, 1), h, k; c = d;) {
                        e.currentScope = c;
                        d = c.$$listeners[a] || [];
                        h = 0;
                        for (k = d.length; h < k; h++)
                            if (d[h])
                                try {
                                    d[h].apply(null, g)
                        } catch (l) {
                            f(l)
                        } else
                            d.splice(h, 1), h--, k--;
                        if (!(d = c.$$listenerCount[a] && c.$$childHead || c !== this && c.$$nextSibling))
                            for (; c !== this&&!(d = c.$$nextSibling);)
                                c = c.$parent
                    }
                    e.currentScope = null;
                    return e
                }
            };
            var s = new k, O = s.$$asyncQueue = [], E = s.$$postDigestQueue = [], x = s.$$applyAsyncQueue = [];
            return s
        }
        ]
    }
    function Qd() {
        var b = /^\s*(https?|ftp|mailto|tel|file):/, a = /^\s*((https?|ftp|file|blob):|data:image\/)/;
        this.aHrefSanitizationWhitelist = function(a) {
            return A(a) ? (b = a, this): b
        };
        this.imgSrcSanitizationWhitelist = function(b) {
            return A(b) ? (a = b, this): a
        };
        this.$get = function() {
            return function(c, d) {
                var e = d ? a: b, f;
                f = Aa(c).href;
                return "" === f || f.match(e) ? c: "unsafe:" + f
            }
        }
    }
    function Bf(b) {
        if ("self" === b)return b;
        if (I(b)) {
            if ( - 1 < b.indexOf("***"))throw Ba("iwcard", b);
            b = ed(b).replace("\\*\\*", ".*").replace("\\*", "[^:/.?&;]*");
            return new RegExp("^" + b + "$")
        }
        if (lb(b))return new RegExp("^" + b.source + "$");
        throw Ba("imatcher");
    }
    function fd(b) {
        var a =
        [];
        A(b) && r(b, function(b) {
            a.push(Bf(b))
        });
        return a
    }
    function Re() {
        this.SCE_CONTEXTS = ka;
        var b = ["self"], a = [];
        this.resourceUrlWhitelist = function(a) {
            arguments.length && (b = fd(a));
            return b
        };
        this.resourceUrlBlacklist = function(b) {
            arguments.length && (a = fd(b));
            return a
        };
        this.$get = ["$injector", function(c) {
            function d(a, b) {
                return "self" === a ? Xc(b) : !!a.exec(b.href)
            }
            function e(a) {
                var b = function(a) {
                    this.$$unwrapTrustedValue = function() {
                        return a
                    }
                };
                a && (b.prototype = new a);
                b.prototype.valueOf = function() {
                    return this.$$unwrapTrustedValue()
                };
                b.prototype.toString = function() {
                    return this.$$unwrapTrustedValue().toString()
                };
                return b
            }
            var f = function(a) {
                throw Ba("unsafe");
            };
            c.has("$sanitize") && (f = c.get("$sanitize"));
            var g = e(), h = {};
            h[ka.HTML] = e(g);
            h[ka.CSS] = e(g);
            h[ka.URL] = e(g);
            h[ka.JS] = e(g);
            h[ka.RESOURCE_URL] = e(h[ka.URL]);
            return {
                trustAs: function(a, b) {
                    var c = h.hasOwnProperty(a) ? h[a]: null;
                    if (!c)
                        throw Ba("icontext", a, b);
                    if (null === b || b === t || "" === b)
                        return b;
                    if ("string" !== typeof b)
                        throw Ba("itype", a);
                    return new c(b)
                },
                getTrusted: function(c, e) {
                    if (null ===
                    e || e === t || "" === e)
                        return e;
                    var g = h.hasOwnProperty(c) ? h[c]: null;
                    if (g && e instanceof g)
                        return e.$$unwrapTrustedValue();
                    if (c === ka.RESOURCE_URL) {
                        var g = Aa(e.toString()), p, q, n=!1;
                        p = 0;
                        for (q = b.length; p < q; p++)
                            if (d(b[p], g)) {
                                n=!0;
                                break
                            }
                        if (n)
                            for (p = 0, q = a.length; p < q; p++)
                                if (d(a[p], g)) {
                                    n=!1;
                                    break
                                }
                        if (n)
                            return e;
                        throw Ba("insecurl", e.toString());
                    }
                    if (c === ka.HTML)
                        return f(e);
                    throw Ba("unsafe");
                },
                valueOf: function(a) {
                    return a instanceof g ? a.$$unwrapTrustedValue() : a
                }
            }
        }
        ]
    }
    function Qe() {
        var b=!0;
        this.enabled = function(a) {
            arguments.length &&
            (b=!!a);
            return b
        };
        this.$get = ["$parse", "$sceDelegate", function(a, c) {
            if (b && 8 > Ha)
                throw Ba("iequirks");
            var d = ta(ka);
            d.isEnabled = function() {
                return b
            };
            d.trustAs = c.trustAs;
            d.getTrusted = c.getTrusted;
            d.valueOf = c.valueOf;
            b || (d.trustAs = d.getTrusted = function(a, b) {
                return b
            }, d.valueOf = ma);
            d.parseAs = function(b, c) {
                var e = a(c);
                return e.literal && e.constant ? e : a(c, function(a) {
                    return d.getTrusted(b, a)
                })
            };
            var e = d.parseAs, f = d.getTrusted, g = d.trustAs;
            r(ka, function(a, b) {
                var c = Q(b);
                d[bb("parse_as_" + c)] = function(b) {
                    return e(a,
                    b)
                };
                d[bb("get_trusted_" + c)] = function(b) {
                    return f(a, b)
                };
                d[bb("trust_as_" + c)] = function(b) {
                    return g(a, b)
                }
            });
            return d
        }
        ]
    }
    function Se() {
        this.$get = ["$window", "$document", function(b, a) {
            var c = {}, d = aa((/android (\d+)/.exec(Q((b.navigator || {}).userAgent)) || [])[1]), e = /Boxee/i.test((b.navigator || {}).userAgent), f = a[0] || {}, g, h = /^(Moz|webkit|ms)(?=[A-Z])/, k = f.body && f.body.style, l=!1, m=!1;
            if (k) {
                for (var p in k)
                    if (l = h.exec(p)) {
                        g = l[0];
                        g = g.substr(0, 1).toUpperCase() + g.substr(1);
                        break
                    }
                g || (g = "WebkitOpacity"in k && "webkit");
                l=!!("transition"in k || g + "Transition"in k);
                m=!!("animation"in k || g + "Animation"in k);
                !d || l && m || (l = I(f.body.style.webkitTransition), m = I(f.body.style.webkitAnimation))
            }
            return {
                history: !(!b.history ||!b.history.pushState || 4 > d || e),
                hasEvent: function(a) {
                    if ("input" == a && 9 == Ha)
                        return !1;
                    if (D(c[a])) {
                        var b = f.createElement("div");
                        c[a] = "on" + a in b
                    }
                    return c[a]
                },
                csp: $a(),
                vendorPrefix: g,
                transitions: l,
                animations: m,
                android: d
            }
        }
        ]
    }
    function Ue() {
        this.$get = ["$templateCache", "$http", "$q", function(b, a, c) {
            function d(e, f) {
                d.totalPendingRequests++;
                var g = a.defaults && a.defaults.transformResponse;
                if (G(g))
                    for (var h = g, g = [], k = 0; k < h.length; ++k) {
                        var l = h[k];
                        l !== Yb && g.push(l)
                    } else
                        g === Yb && (g = null);
                return a.get(e, {
                    cache: b,
                    transformResponse: g
                }).then(function(a) {
                    a = a.data;
                    d.totalPendingRequests--;
                    b.put(e, a);
                    return a
                }, function() {
                    d.totalPendingRequests--;
                    if (!f)
                        throw ia("tpload", e);
                    return c.reject()
                })
            }
            d.totalPendingRequests = 0;
            return d
        }
        ]
    }
    function Ve() {
        this.$get = ["$rootScope", "$browser", "$location", function(b, a, c) {
            return {
                findBindings: function(a, b, c) {
                    a = a.getElementsByClassName("ng-binding");
                    var g = [];
                    r(a, function(a) {
                        var d = va.element(a).data("$binding");
                        d && r(d, function(d) {
                            c ? (new RegExp("(^|\\s)" + ed(b) + "(\\s|\\||$)")).test(d) && g.push(a) : - 1 != d.indexOf(b) && g.push(a)
                        })
                    });
                    return g
                },
                findModels: function(a, b, c) {
                    for (var g = ["ng-", "data-ng-", "ng\\:"], h = 0; h < g.length; ++h) {
                        var k = a.querySelectorAll("[" + g[h] + "model" + (c ? "=" : "*=") + '"' + b + '"]');
                        if (k.length)
                            return k
                    }
                },
                getLocation: function() {
                    return c.url()
                },
                setLocation: function(a) {
                    a !== c.url() && (c.url(a), b.$digest())
                },
                whenStable: function(b) {
                    a.notifyWhenNoOutstandingRequests(b)
                }
            }
        }
        ]
    }
    function We() {
        this.$get = ["$rootScope", "$browser", "$q", "$$q", "$exceptionHandler", function(b, a, c, d, e) {
            function f(f, k, l) {
                var m = A(l)&&!l, p = (m ? d : c).defer(), q = p.promise;
                k = a.defer(function() {
                    try {
                        p.resolve(f())
                    } catch (a) {
                        p.reject(a), e(a)
                    } finally {
                        delete g[q.$$timeoutId]
                    }
                    m || b.$apply()
                }, k);
                q.$$timeoutId = k;
                g[k] = p;
                return q
            }
            var g = {};
            f.cancel = function(b) {
                return b && b.$$timeoutId in g ? (g[b.$$timeoutId].reject("canceled"), delete g[b.$$timeoutId], a.defer.cancel(b.$$timeoutId)) : !1
            };
            return f
        }
        ]
    }
    function Aa(b) {
        Ha && (Z.setAttribute("href",
        b), b = Z.href);
        Z.setAttribute("href", b);
        return {
            href: Z.href,
            protocol: Z.protocol ? Z.protocol.replace(/:$/, ""): "",
            host: Z.host,
            search: Z.search ? Z.search.replace(/^\?/, ""): "",
            hash: Z.hash ? Z.hash.replace(/^#/, ""): "",
            hostname: Z.hostname,
            port: Z.port,
            pathname: "/" === Z.pathname.charAt(0) ? Z.pathname: "/" + Z.pathname
        }
    }
    function Xc(b) {
        b = I(b) ? Aa(b) : b;
        return b.protocol === gd.protocol && b.host === gd.host
    }
    function Xe() {
        this.$get = ba(T)
    }
    function Cc(b) {
        function a(c, d) {
            if (L(c)) {
                var e = {};
                r(c, function(b, c) {
                    e[c] = a(c, b)
                });
                return e
            }
            return b.factory(c +
            "Filter", d)
        }
        this.register = a;
        this.$get = ["$injector", function(a) {
            return function(b) {
                return a.get(b + "Filter")
            }
        }
        ];
        a("currency", hd);
        a("date", id);
        a("filter", Cf);
        a("json", Df);
        a("limitTo", Ef);
        a("lowercase", Ff);
        a("number", jd);
        a("orderBy", kd);
        a("uppercase", Gf)
    }
    function Cf() {
        return function(b, a, c) {
            if (!G(b))
                return b;
            var d = typeof c, e = [];
            e.check = function(a, b) {
                for (var c = 0; c < e.length; c++)
                    if (!e[c](a, b))
                        return !1;
                return !0
            };
            "function" !== d && (c = "boolean" === d && c ? function(a, b) {
                return va.equals(a, b)
            } : function(a, b) {
                if (a &&
                b && "object" === typeof a && "object" === typeof b) {
                    for (var d in a)
                        if ("$" !== d.charAt(0) && Jb.call(a, d) && c(a[d], b[d]))
                            return !0;
                    return !1
                }
                b = ("" + b).toLowerCase();
                return - 1 < ("" + a).toLowerCase().indexOf(b)
            });
            var f = function(a, b) {
                if ("string" === typeof b && "!" === b.charAt(0))
                    return !f(a, b.substr(1));
                switch (typeof a) {
                case "boolean":
                case "number":
                case "string":
                    return c(a, b);
                case "object":
                    switch (typeof b) {
                    case "object":
                        return c(a, b);
                    default:
                        for (var d in a)
                            if ("$" !== d.charAt(0) && f(a[d], b))
                                return !0
                    }
                    return !1;
                case "array":
                    for (d =
                    0; d < a.length; d++)
                        if (f(a[d], b))
                            return !0;
                    return !1;
                default:
                    return !1
                }
            };
            switch (typeof a) {
            case "boolean":
            case "number":
            case "string":
                a = {
                    $: a
                };
            case "object":
                for (var g in a)(function(b) {
                    "undefined" !== typeof a[b] && e.push(function(c) {
                        return f("$" == b ? c : c && c[b], a[b])
                    })
                })(g);
                break;
            case "function":
                e.push(a);
                break;
            default:
                return b
            }
            d = [];
            for (g = 0; g < b.length; g++) {
                var h = b[g];
                e.check(h, g) && d.push(h)
            }
            return d
        }
    }
    function hd(b) {
        var a = b.NUMBER_FORMATS;
        return function(b, d, e) {
            D(d) && (d = a.CURRENCY_SYM);
            D(e) && (e = 2);
            return null ==
            b ? b : ld(b, a.PATTERNS[1], a.GROUP_SEP, a.DECIMAL_SEP, e).replace(/\u00A4/g, d)
        }
    }
    function jd(b) {
        var a = b.NUMBER_FORMATS;
        return function(b, d) {
            return null == b ? b : ld(b, a.PATTERNS[0], a.GROUP_SEP, a.DECIMAL_SEP, d)
        }
    }
    function ld(b, a, c, d, e) {
        if (!isFinite(b) || L(b))
            return "";
        var f = 0 > b;
        b = Math.abs(b);
        var g = b + "", h = "", k = [], l=!1;
        if ( - 1 !== g.indexOf("e")) {
            var m = g.match(/([\d\.]+)e(-?)(\d+)/);
            m && "-" == m[2] && m[3] > e + 1 ? (g = "0", b = 0) : (h = g, l=!0)
        }
        if (l)
            0 < e&&-1 < b && 1 > b && (h = b.toFixed(e));
        else {
            g = (g.split(md)[1] || "").length;
            D(e) && (e = Math.min(Math.max(a.minFrac,
            g), a.maxFrac));
            b =+ (Math.round( + (b.toString() + "e" + e)).toString() + "e" +- e);
            0 === b && (f=!1);
            b = ("" + b).split(md);
            g = b[0];
            b = b[1] || "";
            var m = 0, p = a.lgSize, q = a.gSize;
            if (g.length >= p + q)
                for (m = g.length - p, l = 0; l < m; l++)
                    0 === (m - l)%q && 0 !== l && (h += c), h += g.charAt(l);
            for (l = m; l < g.length; l++)
                0 === (g.length - l)%p && 0 !== l && (h += c), h += g.charAt(l);
            for (; b.length < e;)
                b += "0";
            e && "0" !== e && (h += d + b.substr(0, e))
        }
        k.push(f ? a.negPre : a.posPre);
        k.push(h);
        k.push(f ? a.negSuf : a.posSuf);
        return k.join("")
    }
    function Cb(b, a, c) {
        var d = "";
        0 > b && (d = "-", b =- b);
        for (b =
        "" + b; b.length < a;)
            b = "0" + b;
        c && (b = b.substr(b.length - a));
        return d + b
    }
    function $(b, a, c, d) {
        c = c || 0;
        return function(e) {
            e = e["get" + b]();
            if (0 < c || e>-c)
                e += c;
            0 === e&&-12 == c && (e = 12);
            return Cb(e, a, d)
        }
    }
    function Db(b, a) {
        return function(c, d) {
            var e = c["get" + b](), f = rb(a ? "SHORT" + b : b);
            return d[f][e]
        }
    }
    function nd(b) {
        var a = (new Date(b, 0, 1)).getDay();
        return new Date(b, 0, (4 >= a ? 5 : 12) - a)
    }
    function od(b) {
        return function(a) {
            var c = nd(a.getFullYear());
            a =+ new Date(a.getFullYear(), a.getMonth(), a.getDate() + (4 - a.getDay()))-+c;
            a = 1 + Math.round(a /
            6048E5);
            return Cb(a, b)
        }
    }
    function id(b) {
        function a(a) {
            var b;
            if (b = a.match(c)) {
                a = new Date(0);
                var f = 0, g = 0, h = b[8] ? a.setUTCFullYear: a.setFullYear, k = b[8] ? a.setUTCHours: a.setHours;
                b[9] && (f = aa(b[9] + b[10]), g = aa(b[9] + b[11]));
                h.call(a, aa(b[1]), aa(b[2]) - 1, aa(b[3]));
                f = aa(b[4] || 0) - f;
                g = aa(b[5] || 0) - g;
                h = aa(b[6] || 0);
                b = Math.round(1E3 * parseFloat("0." + (b[7] || 0)));
                k.call(a, f, g, h, b)
            }
            return a
        }
        var c = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
        return function(c, e, f) {
            var g =
            "", h = [], k, l;
            e = e || "mediumDate";
            e = b.DATETIME_FORMATS[e] || e;
            I(c) && (c = Hf.test(c) ? aa(c) : a(c));
            W(c) && (c = new Date(c));
            if (!ea(c))
                return c;
            for (; e;)(l = If.exec(e)
                ) ? (h = Xa(h, l, 1), e = h.pop()) : (h.push(e), e = null);
            f && "UTC" === f && (c = new Date(c.getTime()), c.setMinutes(c.getMinutes() + c.getTimezoneOffset()));
            r(h, function(a) {
                k = Jf[a];
                g += k ? k(c, b.DATETIME_FORMATS) : a.replace(/(^'|'$)/g, "").replace(/''/g, "'")
            });
            return g
        }
    }
    function Df() {
        return function(b) {
            return Za(b, !0)
        }
    }
    function Ef() {
        return function(b, a) {
            W(b) && (b = b.toString());
            if (!G(b)&&!I(b))
                return b;
            a = Infinity === Math.abs(Number(a)) ? Number(a) : aa(a);
            if (I(b))
                return a ? 0 <= a ? b.slice(0, a) : b.slice(a, b.length) : "";
            var c = [], d, e;
            a > b.length ? a = b.length : a<-b.length && (a =- b.length);
            0 < a ? (d = 0, e = a) : (d = b.length + a, e = b.length);
            for (; d < e; d++)
                c.push(b[d]);
            return c
        }
    }
    function kd(b) {
        return function(a, c, d) {
            function e(a, b) {
                return b ? function(b, c) {
                    return a(c, b)
                } : a
            }
            function f(a, b) {
                var c = typeof a, d = typeof b;
                return c == d ? (ea(a) && ea(b) && (a = a.valueOf(), b = b.valueOf()), "string" == c && (a = a.toLowerCase(), b = b.toLowerCase()),
                a === b ? 0 : a < b?-1 : 1) : c < d?-1 : 1
            }
            if (!Ra(a))
                return a;
            c = G(c) ? c : [c];
            0 === c.length && (c = ["+"]);
            c = c.map(function(a) {
                var c=!1, d = a || ma;
                if (I(a)) {
                    if ("+" == a.charAt(0) || "-" == a.charAt(0))
                        c = "-" == a.charAt(0), a = a.substring(1);
                    if ("" === a)
                        return e(function(a, b) {
                            return f(a, b)
                        }, c);
                    d = b(a);
                    if (d.constant) {
                        var l = d();
                        return e(function(a, b) {
                            return f(a[l], b[l])
                        }, c)
                    }
                }
                return e(function(a, b) {
                    return f(d(a), d(b))
                }, c)
            });
            return Ya.call(a).sort(e(function(a, b) {
                for (var d = 0; d < c.length; d++) {
                    var e = c[d](a, b);
                    if (0 !== e)
                        return e
                }
                return 0
            }, d))
        }
    }
    function Ia(b) {
        u(b) &&
        (b = {
            link: b
        });
        b.restrict = b.restrict || "AC";
        return ba(b)
    }
    function pd(b, a, c, d, e) {
        var f = this, g = [], h = f.$$parentForm = b.parent().controller("form") || Eb;
        f.$error = {};
        f.$$success = {};
        f.$pending = t;
        f.$name = e(a.name || a.ngForm || "")(c);
        f.$dirty=!1;
        f.$pristine=!0;
        f.$valid=!0;
        f.$invalid=!1;
        f.$submitted=!1;
        h.$addControl(f);
        f.$rollbackViewValue = function() {
            r(g, function(a) {
                a.$rollbackViewValue()
            })
        };
        f.$commitViewValue = function() {
            r(g, function(a) {
                a.$commitViewValue()
            })
        };
        f.$addControl = function(a) {
            La(a.$name, "input");
            g.push(a);
            a.$name && (f[a.$name] = a)
        };
        f.$$renameControl = function(a, b) {
            var c = a.$name;
            f[c] === a && delete f[c];
            f[b] = a;
            a.$name = b
        };
        f.$removeControl = function(a) {
            a.$name && f[a.$name] === a && delete f[a.$name];
            r(f.$pending, function(b, c) {
                f.$setValidity(c, null, a)
            });
            r(f.$error, function(b, c) {
                f.$setValidity(c, null, a)
            });
            Va(g, a)
        };
        qd({
            ctrl: this,
            $element: b,
            set: function(a, b, c) {
                var d = a[b];
                d?-1 === d.indexOf(c) && d.push(c) : a[b] = [c]
            },
            unset: function(a, b, c) {
                var d = a[b];
                d && (Va(d, c), 0 === d.length && delete a[b])
            },
            parentForm: h,
            $animate: d
        });
        f.$setDirty =
        function() {
            d.removeClass(b, Qa);
            d.addClass(b, Fb);
            f.$dirty=!0;
            f.$pristine=!1;
            h.$setDirty()
        };
        f.$setPristine = function() {
            d.setClass(b, Qa, Fb + " ng-submitted");
            f.$dirty=!1;
            f.$pristine=!0;
            f.$submitted=!1;
            r(g, function(a) {
                a.$setPristine()
            })
        };
        f.$setUntouched = function() {
            r(g, function(a) {
                a.$setUntouched()
            })
        };
        f.$setSubmitted = function() {
            d.addClass(b, "ng-submitted");
            f.$submitted=!0;
            h.$setSubmitted()
        }
    }
    function hc(b) {
        b.$formatters.push(function(a) {
            return b.$isEmpty(a) ? a : a.toString()
        })
    }
    function gb(b, a, c, d, e, f) {
        var g =
        a[0].placeholder, h = {}, k = Q(a[0].type);
        if (!e.android) {
            var l=!1;
            a.on("compositionstart", function(a) {
                l=!0
            });
            a.on("compositionend", function() {
                l=!1;
                m()
            })
        }
        var m = function(b) {
            if (!l) {
                var e = a.val(), f = b && b.type;
                Ha && "input" === (b || h).type && a[0].placeholder !== g ? g = a[0].placeholder : ("password" === k || c.ngTrim && "false" === c.ngTrim || (e = P(e)), (d.$viewValue !== e || "" === e && d.$$hasNativeValidators) && d.$setViewValue(e, f))
            }
        };
        if (e.hasEvent("input"))
            a.on("input", m);
        else {
            var p, q = function(a) {
                p || (p = f.defer(function() {
                    m(a);
                    p = null
                }))
            };
            a.on("keydown", function(a) {
                var b = a.keyCode;
                91 === b || 15 < b && 19 > b || 37 <= b && 40 >= b || q(a)
            });
            if (e.hasEvent("paste"))
                a.on("paste cut", q)
        }
        a.on("change", m);
        d.$render = function() {
            a.val(d.$isEmpty(d.$modelValue) ? "" : d.$viewValue)
        }
    }
    function Gb(b, a) {
        return function(c, d) {
            var e, f;
            if (ea(c))
                return c;
            if (I(c)) {
                '"' == c.charAt(0) && '"' == c.charAt(c.length - 1) && (c = c.substring(1, c.length - 1));
                if (Kf.test(c))
                    return new Date(c);
                b.lastIndex = 0;
                if (e = b.exec(c))
                    return e.shift(), f = d ? {
                        yyyy: d.getFullYear(),
                        MM: d.getMonth() + 1,
                        dd: d.getDate(),
                        HH: d.getHours(),
                        mm: d.getMinutes(),
                        ss: d.getSeconds(),
                        sss: d.getMilliseconds() / 1E3
                    } : {
                        yyyy: 1970,
                        MM: 1,
                        dd: 1,
                        HH: 0,
                        mm: 0,
                        ss: 0,
                        sss: 0
                    }, r(e, function(b, c) {
                        c < a.length && (f[a[c]] =+ b)
                    }), new Date(f.yyyy, f.MM - 1, f.dd, f.HH, f.mm, f.ss || 0, 1E3 * f.sss || 0)
            }
            return NaN
        }
    }
    function hb(b, a, c, d) {
        return function(e, f, g, h, k, l, m) {
            function p(a) {
                return A(a) ? ea(a) ? a : c(a) : t
            }
            rd(e, f, g, h);
            gb(e, f, g, h, k, l);
            var q = h && h.$options && h.$options.timezone, n;
            h.$$parserName = b;
            h.$parsers.push(function(b) {
                return h.$isEmpty(b) ? null : a.test(b) ? (b = c(b, n), "UTC" ===
                q && b.setMinutes(b.getMinutes() - b.getTimezoneOffset()), b) : t
            });
            h.$formatters.push(function(a) {
                if (h.$isEmpty(a))
                    n = null;
                else {
                    if (!ea(a))
                        throw Hb("datefmt", a);
                    if ((n = a) && "UTC" === q) {
                        var b = 6E4 * n.getTimezoneOffset();
                        n = new Date(n.getTime() + b)
                    }
                    return m("date")(a, d, q)
                }
                return ""
            });
            if (A(g.min) || g.ngMin) {
                var s;
                h.$validators.min = function(a) {
                    return h.$isEmpty(a) || D(s) || c(a) >= s
                };
                g.$observe("min", function(a) {
                    s = p(a);
                    h.$validate()
                })
            }
            if (A(g.max) || g.ngMax) {
                var r;
                h.$validators.max = function(a) {
                    return h.$isEmpty(a) || D(r) || c(a) <=
                    r
                };
                g.$observe("max", function(a) {
                    r = p(a);
                    h.$validate()
                })
            }
            h.$isEmpty = function(a) {
                return !a || a.getTime && a.getTime() !== a.getTime()
            }
        }
    }
    function rd(b, a, c, d) {
        (d.$$hasNativeValidators = L(a[0].validity)) && d.$parsers.push(function(b) {
            var c = a.prop("validity") || {};
            return c.badInput&&!c.typeMismatch ? t : b
        })
    }
    function sd(b, a, c, d, e) {
        if (A(d)) {
            b = b(d);
            if (!b.constant)
                throw v("ngModel")("constexpr", c, d);
            return b(a)
        }
        return e
    }
    function qd(b) {
        function a(a, b) {
            b&&!f[a] ? (l.addClass(e, a), f[a]=!0) : !b && f[a] && (l.removeClass(e, a), f[a] =
            !1)
        }
        function c(b, c) {
            b = b ? "-" + Mb(b, "-") : "";
            a(ib + b, !0 === c);
            a(td + b, !1 === c)
        }
        var d = b.ctrl, e = b.$element, f = {}, g = b.set, h = b.unset, k = b.parentForm, l = b.$animate;
        f[td]=!(f[ib] = e.hasClass(ib));
        d.$setValidity = function(b, e, f) {
            e === t ? (d.$pending || (d.$pending = {}), g(d.$pending, b, f)) : (d.$pending && h(d.$pending, b, f), ud(d.$pending) && (d.$pending = t));
            Ua(e) ? e ? (h(d.$error, b, f), g(d.$$success, b, f)) : (g(d.$error, b, f), h(d.$$success, b, f)) : (h(d.$error, b, f), h(d.$$success, b, f));
            d.$pending ? (a(vd, !0), d.$valid = d.$invalid = t, c("", null)) : (a(vd,
            !1), d.$valid = ud(d.$error), d.$invalid=!d.$valid, c("", d.$valid));
            e = d.$pending && d.$pending[b] ? t : d.$error[b]?!1 : d.$$success[b]?!0 : null;
            c(b, e);
            k.$setValidity(b, e, d)
        }
    }
    function ud(b) {
        if (b)
            for (var a in b)
                return !1;
        return !0
    }
    function ic(b, a) {
        b = "ngClass" + b;
        return ["$animate", function(c) {
            function d(a, b) {
                var c = [], d = 0;
                a: for (; d < a.length; d++) {
                    for (var e = a[d], m = 0; m < b.length; m++)
                        if (e == b[m])
                            continue a;
                    c.push(e)
                }
                return c
            }
            function e(a) {
                if (!G(a)) {
                    if (I(a))
                        return a.split(" ");
                    if (L(a)) {
                        var b = [];
                        r(a, function(a, c) {
                            a && (b = b.concat(c.split(" ")))
                        });
                        return b
                    }
                }
                return a
            }
            return {
                restrict: "AC",
                link: function(f, g, h) {
                    function k(a, b) {
                        var c = g.data("$classCounts") || {}, d = [];
                        r(a, function(a) {
                            if (0 < b || c[a])
                                c[a] = (c[a] || 0) + b, c[a] ===+ (0 < b) && d.push(a)
                        });
                        g.data("$classCounts", c);
                        return d.join(" ")
                    }
                    function l(b) {
                        if (!0 === a || f.$index%2 === a) {
                            var l = e(b || []);
                            if (!m) {
                                var n = k(l, 1);
                                h.$addClass(n)
                            } else if (!na(b, m)) {
                                var s = e(m), n = d(l, s), l = d(s, l), n = k(n, 1), l = k(l, - 1);
                                n && n.length && c.addClass(g, n);
                                l && l.length && c.removeClass(g, l)
                            }
                        }
                        m = ta(b)
                    }
                    var m;
                    f.$watch(h[b], l, !0);
                    h.$observe("class",
                    function(a) {
                        l(f.$eval(h[b]))
                    });
                    "ngClass" !== b && f.$watch("$index", function(c, d) {
                        var g = c & 1;
                        if (g !== (d & 1)) {
                            var l = e(f.$eval(h[b]));
                            g === a ? (g = k(l, 1), h.$addClass(g)) : (g = k(l, - 1), h.$removeClass(g))
                        }
                    })
                }
            }
        }
        ]
    }
    var Lf = /^\/(.+)\/([a-z]*)$/, Q = function(b) {
        return I(b) ? b.toLowerCase() : b
    }, Jb = Object.prototype.hasOwnProperty, rb = function(b) {
        return I(b) ? b.toUpperCase() : b
    }, Ha, y, oa, Ya = [].slice, qf = [].splice, Mf = [].push, Ja = Object.prototype.toString, Wa = v("ng"), va = T.angular || (T.angular = {}), ab, kb = 0;
    Ha = U.documentMode;
    w.$inject = [];
    ma.$inject =
    [];
    var G = Array.isArray, P = function(b) {
        return I(b) ? b.trim() : b
    }, ed = function(b) {
        return b.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08")
    }, $a = function() {
        if (A($a.isActive_))
            return $a.isActive_;
        var b=!(!U.querySelector("[ng-csp]")&&!U.querySelector("[data-ng-csp]"));
        if (!b)
            try {
                new Function("")
        } catch (a) {
            b=!0
        }
        return $a.isActive_ = b
    }, ob = ["ng-", "data-ng-", "ng:", "x-ng-"], Kd = /[A-Z]/g, tc=!1, Nb, la = 1, mb = 3, Od = {
        full: "1.3.3",
        major: 1,
        minor: 3,
        dot: 3,
        codeName: "undersea-arithmetic"
    };
    R.expando = "ng339";
    var wb = R.cache = {}, ef = 1;
    R._data = function(b) {
        return this.cache[b[this.expando]] || {}
    };
    var $e = /([\:\-\_]+(.))/g, af = /^moz([A-Z])/, Nf = {
        mouseleave: "mouseout",
        mouseenter: "mouseover"
    }, Qb = v("jqLite"), df = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, Pb = /<|&#?\w+;/, bf = /<([\w:]+)/, cf = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, ha = {
        option: [1, '<select multiple="multiple">', "</select>"],
        thead: [1, "<table>", "</table>"],
        col: [2, "<table><colgroup>", "</colgroup></table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        _default: [0, "", ""]
    };
    ha.optgroup = ha.option;
    ha.tbody = ha.tfoot = ha.colgroup = ha.caption = ha.thead;
    ha.th = ha.td;
    var Ka = R.prototype = {
        ready: function(b) {
            function a() {
                c || (c=!0, b())
            }
            var c=!1;
            "complete" === U.readyState ? setTimeout(a) : (this.on("DOMContentLoaded", a), R(T).on("load", a))
        },
        toString: function() {
            var b = [];
            r(this, function(a) {
                b.push("" + a)
            });
            return "[" + b.join(", ") + "]"
        },
        eq: function(b) {
            return 0 <= b ? y(this[b]) : y(this[this.length + b])
        },
        length: 0,
        push: Mf,
        sort: [].sort,
        splice: [].splice
    }, yb = {};
    r("multiple selected checked disabled readOnly required open".split(" "), function(b) {
        yb[Q(b)] = b
    });
    var Lc = {};
    r("input select option textarea button form details".split(" "), function(b) {
        Lc[b]=!0
    });
    var Mc = {
        ngMinlength: "minlength",
        ngMaxlength: "maxlength",
        ngMin: "min",
        ngMax: "max",
        ngPattern: "pattern"
    };
    r({
        data: Sb,
        removeData: ub
    }, function(b, a) {
        R[a] = b
    });
    r({
        data: Sb,
        inheritedData: xb,
        scope: function(b) {
            return y.data(b, "$scope") || xb(b.parentNode || b, ["$isolateScope", "$scope"])
        },
        isolateScope: function(b) {
            return y.data(b,
            "$isolateScope") || y.data(b, "$isolateScopeNoTemplate")
        },
        controller: Hc,
        injector: function(b) {
            return xb(b, "$injector")
        },
        removeAttr: function(b, a) {
            b.removeAttribute(a)
        },
        hasClass: Tb,
        css: function(b, a, c) {
            a = bb(a);
            if (A(c))
                b.style[a] = c;
            else
                return b.style[a]
        },
        attr: function(b, a, c) {
            var d = Q(a);
            if (yb[d])
                if (A(c))
                    c ? (b[a]=!0, b.setAttribute(a, d)) : (b[a]=!1, b.removeAttribute(d));
                else
                    return b[a] || (b.attributes.getNamedItem(a) || w).specified ? d : t;
            else if (A(c))
                b.setAttribute(a, c);
            else if (b.getAttribute)
                return b = b.getAttribute(a,
                2), null === b ? t : b
        },
        prop: function(b, a, c) {
            if (A(c))
                b[a] = c;
            else
                return b[a]
        },
        text: function() {
            function b(a, b) {
                if (D(b)) {
                    var d = a.nodeType;
                    return d === la || d === mb ? a.textContent : ""
                }
                a.textContent = b
            }
            b.$dv = "";
            return b
        }(),
        val: function(b, a) {
            if (D(a)) {
                if (b.multiple && "select" === sa(b)) {
                    var c = [];
                    r(b.options, function(a) {
                        a.selected && c.push(a.value || a.text)
                    });
                    return 0 === c.length ? null : c
                }
                return b.value
            }
            b.value = a
        },
        html: function(b, a) {
            if (D(a))
                return b.innerHTML;
            tb(b, !0);
            b.innerHTML = a
        },
        empty: Ic
    }, function(b, a) {
        R.prototype[a] = function(a,
        d) {
            var e, f, g = this.length;
            if (b !== Ic && (2 == b.length && b !== Tb && b !== Hc ? a : d) === t) {
                if (L(a)) {
                    for (e = 0; e < g; e++)
                        if (b === Sb)
                            b(this[e], a);
                        else
                            for (f in a)
                                b(this[e], f, a[f]);
                    return this
                }
                e = b.$dv;
                g = e === t ? Math.min(g, 1) : g;
                for (f = 0; f < g; f++) {
                    var h = b(this[f], a, d);
                    e = e ? e + h : h
                }
                return e
            }
            for (e = 0; e < g; e++)
                b(this[e], a, d);
            return this
        }
    });
    r({
        removeData: ub,
        on: function a(c, d, e, f) {
            if (A(f))
                throw Qb("onargs");
            if (Dc(c)) {
                var g = vb(c, !0);
                f = g.events;
                var h = g.handle;
                h || (h = g.handle = hf(c, f));
                for (var g = 0 <= d.indexOf(" ") ? d.split(" ") : [d], k = g.length; k--;) {
                    d =
                    g[k];
                    var l = f[d];
                    l || (f[d] = [], "mouseenter" === d || "mouseleave" === d ? a(c, Nf[d], function(a) {
                        var c = a.relatedTarget;
                        c && (c === this || this.contains(c)) || h(a, d)
                    }) : "$destroy" !== d && c.addEventListener(d, h, !1), l = f[d]);
                    l.push(e)
                }
            }
        },
        off: Gc,
        one: function(a, c, d) {
            a = y(a);
            a.on(c, function f() {
                a.off(c, d);
                a.off(c, f)
            });
            a.on(c, d)
        },
        replaceWith: function(a, c) {
            var d, e = a.parentNode;
            tb(a);
            r(new R(c), function(c) {
                d ? e.insertBefore(c, d.nextSibling) : e.replaceChild(c, a);
                d = c
            })
        },
        children: function(a) {
            var c = [];
            r(a.childNodes, function(a) {
                a.nodeType ===
                la && c.push(a)
            });
            return c
        },
        contents: function(a) {
            return a.contentDocument || a.childNodes || []
        },
        append: function(a, c) {
            var d = a.nodeType;
            if (d === la || 11 === d) {
                c = new R(c);
                for (var d = 0, e = c.length; d < e; d++)
                    a.appendChild(c[d])
            }
        },
        prepend: function(a, c) {
            if (a.nodeType === la) {
                var d = a.firstChild;
                r(new R(c), function(c) {
                    a.insertBefore(c, d)
                })
            }
        },
        wrap: function(a, c) {
            c = y(c).eq(0).clone()[0];
            var d = a.parentNode;
            d && d.replaceChild(c, a);
            c.appendChild(a)
        },
        remove: Jc,
        detach: function(a) {
            Jc(a, !0)
        },
        after: function(a, c) {
            var d = a, e = a.parentNode;
            c = new R(c);
            for (var f = 0, g = c.length; f < g; f++) {
                var h = c[f];
                e.insertBefore(h, d.nextSibling);
                d = h
            }
        },
        addClass: Vb,
        removeClass: Ub,
        toggleClass: function(a, c, d) {
            c && r(c.split(" "), function(c) {
                var f = d;
                D(f) && (f=!Tb(a, c));
                (f ? Vb : Ub)(a, c)
            })
        },
        parent: function(a) {
            return (a = a.parentNode) && 11 !== a.nodeType ? a : null
        },
        next: function(a) {
            return a.nextElementSibling
        },
        find: function(a, c) {
            return a.getElementsByTagName ? a.getElementsByTagName(c) : []
        },
        clone: Rb,
        triggerHandler: function(a, c, d) {
            var e, f, g = c.type || c, h = vb(a);
            if (h = (h = h && h.events) &&
            h[g])
                e = {
                    preventDefault: function() {
                        this.defaultPrevented=!0
                    },
                    isDefaultPrevented: function() {
                        return !0 === this.defaultPrevented
                    },
                    stopImmediatePropagation: function() {
                        this.immediatePropagationStopped=!0
                    },
                    isImmediatePropagationStopped: function() {
                        return !0 === this.immediatePropagationStopped
                    },
                    stopPropagation: w,
                    type: g,
                    target: a
                }, c.type && (e = H(e, c)), c = ta(h), f = d ? [e].concat(d) : [e], r(c, function(c) {
                    e.isImmediatePropagationStopped() || c.apply(a, f)
                })
        }
    }, function(a, c) {
        R.prototype[c] = function(c, e, f) {
            for (var g, h = 0, k = this.length; h <
            k; h++)
                D(g) ? (g = a(this[h], c, e, f), A(g) && (g = y(g))) : Fc(g, a(this[h], c, e, f));
            return A(g) ? g : this
        };
        R.prototype.bind = R.prototype.on;
        R.prototype.unbind = R.prototype.off
    });
    cb.prototype = {
        put: function(a, c) {
            this[Ma(a, this.nextUid)] = c
        },
        get: function(a) {
            return this[Ma(a, this.nextUid)]
        },
        remove: function(a) {
            var c = this[a = Ma(a, this.nextUid)];
            delete this[a];
            return c
        }
    };
    var Oc = /^function\s*[^\(]*\(\s*([^\)]*)\)/m, kf = /,/, lf = /^\s*(_?)(\S+?)\1\s*$/, Nc = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg, Ea = v("$injector");
    Lb.$$annotate = Wb;
    var Of =
    v("$animate"), Ae = ["$provide", function(a) {
        this.$$selectors = {};
        this.register = function(c, d) {
            var e = c + "-animation";
            if (c && "." != c.charAt(0))
                throw Of("notcsel", c);
            this.$$selectors[c.substr(1)] = e;
            a.factory(e, d)
        };
        this.classNameFilter = function(a) {
            1 === arguments.length && (this.$$classNameFilter = a instanceof RegExp ? a : null);
            return this.$$classNameFilter
        };
        this.$get = ["$$q", "$$asyncCallback", "$rootScope", function(a, d, e) {
            function f(d) {
                var f, g = a.defer();
                g.promise.$$cancelFn = function() {
                    f && f()
                };
                e.$$postDigest(function() {
                    f =
                    d(function() {
                        g.resolve()
                    })
                });
                return g.promise
            }
            function g(a, c) {
                var d = [], e = [], f = pa();
                r((a.attr("class") || "").split(/\s+/), function(a) {
                    f[a]=!0
                });
                r(c, function(a, c) {
                    var g = f[c];
                    !1 === a && g ? e.push(c) : !0 !== a || g || d.push(c)
                });
                return 0 < d.length + e.length && [d.length ? d: null, e.length ? e: null]
            }
            function h(a, c, d) {
                for (var e = 0, f = c.length; e < f; ++e)
                    a[c[e]] = d
            }
            function k() {
                m || (m = a.defer(), d(function() {
                    m.resolve();
                    m = null
                }));
                return m.promise
            }
            function l(a, c) {
                if (va.isObject(c)) {
                    var d = H(c.from || {}, c.to || {});
                    a.css(d)
                }
            }
            var m;
            return {
                animate: function(a,
                c, d) {
                    l(a, {
                        from: c,
                        to: d
                    });
                    return k()
                },
                enter: function(a, c, d, e) {
                    l(a, e);
                    d ? d.after(a) : c.prepend(a);
                    return k()
                },
                leave: function(a, c) {
                    a.remove();
                    return k()
                },
                move: function(a, c, d, e) {
                    return this.enter(a, c, d, e)
                },
                addClass: function(a, c, d) {
                    return this.setClass(a, c, [], d)
                },
                $$addClassImmediately: function(a, c, d) {
                    a = y(a);
                    c = I(c) ? c : G(c) ? c.join(" ") : "";
                    r(a, function(a) {
                        Vb(a, c)
                    });
                    l(a, d);
                    return k()
                },
                removeClass: function(a, c, d) {
                    return this.setClass(a, [], c, d)
                },
                $$removeClassImmediately: function(a, c, d) {
                    a = y(a);
                    c = I(c) ? c : G(c) ? c.join(" ") :
                    "";
                    r(a, function(a) {
                        Ub(a, c)
                    });
                    l(a, d);
                    return k()
                },
                setClass: function(a, c, d, e) {
                    var k = this, l=!1;
                    a = y(a);
                    var m = a.data("$$animateClasses");
                    m ? e && m.options && (m.options = va.extend(m.options || {}, e)) : (m = {
                        classes: {},
                        options: e
                    }, l=!0);
                    e = m.classes;
                    c = G(c) ? c : c.split(" ");
                    d = G(d) ? d : d.split(" ");
                    h(e, c, !0);
                    h(e, d, !1);
                    l && (m.promise = f(function(c) {
                        var d = a.data("$$animateClasses");
                        a.removeData("$$animateClasses");
                        if (d) {
                            var e = g(a, d.classes);
                            e && k.$$setClassImmediately(a, e[0], e[1], d.options)
                        }
                        c()
                    }), a.data("$$animateClasses", m));
                    return m.promise
                },
                $$setClassImmediately: function(a, c, d, e) {
                    c && this.$$addClassImmediately(a, c);
                    d && this.$$removeClassImmediately(a, d);
                    l(a, e);
                    return k()
                },
                enabled: w,
                cancel: w
            }
        }
        ]
    }
    ], ia = v("$compile");
    vc.$inject = ["$provide", "$$sanitizeUriProvider"];
    var pf = /^((?:x|data)[\:\-_])/i, Tc = "application/json", Zb = {
        "Content-Type": Tc + ";charset=utf-8"
    }, sf = /^\s*(\[|\{[^\{])/, tf = /[\}\]]\s*$/, rf = /^\)\]\}',?\n/, $b = v("$interpolate"), Pf = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/, wf = {
        http: 80,
        https: 443,
        ftp: 21
    }, eb = v("$location"), Qf = {
        $$html5: !1,
        $$replace: !1,
        absUrl: Bb("$$absUrl"),
        url: function(a) {
            if (D(a))
                return this.$$url;
            a = Pf.exec(a);
            a[1] && this.path(decodeURIComponent(a[1]));
            (a[2] || a[1]) && this.search(a[3] || "");
            this.hash(a[5] || "");
            return this
        },
        protocol: Bb("$$protocol"),
        host: Bb("$$host"),
        port: Bb("$$port"),
        path: ad("$$path", function(a) {
            a = null !== a ? a.toString() : "";
            return "/" == a.charAt(0) ? a : "/" + a
        }),
        search: function(a, c) {
            switch (arguments.length) {
            case 0:
                return this.$$search;
            case 1:
                if (I(a) || W(a))
                    a = a.toString(), this.$$search = rc(a);
                else if (L(a))
                    a = Ca(a,
                    {}), r(a, function(c, e) {
                        null == c && delete a[e]
                    }), this.$$search = a;
                else
                    throw eb("isrcharg");
                break;
            default:
                D(c) || null === c ? delete this.$$search[a] : this.$$search[a] = c
            }
            this.$$compose();
            return this
        },
        hash: ad("$$hash", function(a) {
            return null !== a ? a.toString() : ""
        }),
        replace: function() {
            this.$$replace=!0;
            return this
        }
    };
    r([$c, dc, cc], function(a) {
        a.prototype = Object.create(Qf);
        a.prototype.state = function(c) {
            if (!arguments.length)
                return this.$$state;
            if (a !== cc ||!this.$$html5)
                throw eb("nostate");
            this.$$state = D(c) ? null : c;
            return this
        }
    });
    var ja = v("$parse"), Rf = Function.prototype.call, Sf = Function.prototype.apply, Tf = Function.prototype.bind, Ib = pa();
    r({
        "null": function() {
            return null
        },
        "true": function() {
            return !0
        },
        "false": function() {
            return !1
        },
        undefined: function() {}
    }, function(a, c) {
        a.constant = a.literal = a.sharedGetter=!0;
        Ib[c] = a
    });
    Ib["this"] = function(a) {
        return a
    };
    Ib["this"].sharedGetter=!0;
    var jb = H(pa(), {
        "+": function(a, c, d, e) {
            d = d(a, c);
            e = e(a, c);
            return A(d) ? A(e) ? d + e : d : A(e) ? e : t
        },
        "-": function(a, c, d, e) {
            d = d(a, c);
            e = e(a, c);
            return (A(d) ? d : 0) - (A(e) ? e : 0)
        },
        "*": function(a, c, d, e) {
            return d(a, c) * e(a, c)
        },
        "/": function(a, c, d, e) {
            return d(a, c) / e(a, c)
        },
        "%": function(a, c, d, e) {
            return d(a, c)%e(a, c)
        },
        "===": function(a, c, d, e) {
            return d(a, c) === e(a, c)
        },
        "!==": function(a, c, d, e) {
            return d(a, c) !== e(a, c)
        },
        "==": function(a, c, d, e) {
            return d(a, c) == e(a, c)
        },
        "!=": function(a, c, d, e) {
            return d(a, c) != e(a, c)
        },
        "<": function(a, c, d, e) {
            return d(a, c) < e(a, c)
        },
        ">": function(a, c, d, e) {
            return d(a, c) > e(a, c)
        },
        "<=": function(a, c, d, e) {
            return d(a, c) <= e(a, c)
        },
        ">=": function(a, c, d, e) {
            return d(a, c) >= e(a, c)
        },
        "&&": function(a,
        c, d, e) {
            return d(a, c) && e(a, c)
        },
        "||": function(a, c, d, e) {
            return d(a, c) || e(a, c)
        },
        "!": function(a, c, d) {
            return !d(a, c)
        },
        "=": !0,
        "|": !0
    }), Uf = {
        n: "\n",
        f: "\f",
        r: "\r",
        t: "\t",
        v: "\v",
        "'": "'",
        '"': '"'
    }, gc = function(a) {
        this.options = a
    };
    gc.prototype = {
        constructor: gc,
        lex: function(a) {
            this.text = a;
            this.index = 0;
            for (this.tokens = []; this.index < this.text.length;)
                if (a = this.text.charAt(this.index), '"' === a || "'" === a)
                    this.readString(a);
                else if (this.isNumber(a) || "." === a && this.isNumber(this.peek()))
                    this.readNumber();
                else if (this.isIdent(a))
                    this.readIdent();
                else if (this.is(a, "(){}[].,;:?"))
                    this.tokens.push({
                        index: this.index,
                        text: a
                    }), this.index++;
                else if (this.isWhitespace(a))
                    this.index++;
                else {
                    var c = a + this.peek(), d = c + this.peek(2), e = jb[c], f = jb[d];
                    jb[a] || e || f ? (a = f ? d : e ? c : a, this.tokens.push({
                        index: this.index,
                        text: a,
                        operator: !0
                    }), this.index += a.length) : this.throwError("Unexpected next character ", this.index, this.index + 1)
                }
            return this.tokens
        },
        is: function(a, c) {
            return - 1 !== c.indexOf(a)
        },
        peek: function(a) {
            a = a || 1;
            return this.index + a < this.text.length ? this.text.charAt(this.index +
            a) : !1
        },
        isNumber: function(a) {
            return "0" <= a && "9" >= a && "string" === typeof a
        },
        isWhitespace: function(a) {
            return " " === a || "\r" === a || "\t" === a || "\n" === a || "\v" === a || "\u00a0" === a
        },
        isIdent: function(a) {
            return "a" <= a && "z" >= a || "A" <= a && "Z" >= a || "_" === a || "$" === a
        },
        isExpOperator: function(a) {
            return "-" === a || "+" === a || this.isNumber(a)
        },
        throwError: function(a, c, d) {
            d = d || this.index;
            c = A(c) ? "s " + c + "-" + this.index + " [" + this.text.substring(c, d) + "]" : " " + d;
            throw ja("lexerr", a, c, this.text);
        },
        readNumber: function() {
            for (var a = "", c = this.index; this.index <
            this.text.length;) {
                var d = Q(this.text.charAt(this.index));
                if ("." == d || this.isNumber(d))
                    a += d;
                else {
                    var e = this.peek();
                    if ("e" == d && this.isExpOperator(e))
                        a += d;
                    else if (this.isExpOperator(d) && e && this.isNumber(e) && "e" == a.charAt(a.length - 1))
                        a += d;
                    else if (!this.isExpOperator(d) || e && this.isNumber(e) || "e" != a.charAt(a.length - 1))
                        break;
                    else
                        this.throwError("Invalid exponent")
                    }
                this.index++
            }
            this.tokens.push({
                index: c,
                text: a,
                constant: !0,
                value: Number(a)
            })
        },
        readIdent: function() {
            for (var a = this.index; this.index < this.text.length;) {
                var c =
                this.text.charAt(this.index);
                if (!this.isIdent(c)&&!this.isNumber(c))
                    break;
                this.index++
            }
            this.tokens.push({
                index: a,
                text: this.text.slice(a, this.index),
                identifier: !0
            })
        },
        readString: function(a) {
            var c = this.index;
            this.index++;
            for (var d = "", e = a, f=!1; this.index < this.text.length;) {
                var g = this.text.charAt(this.index), e = e + g;
                if (f)
                    "u" === g ? (f = this.text.substring(this.index + 1, this.index + 5), f.match(/[\da-f]{4}/i) || this.throwError("Invalid unicode escape [\\u" + f + "]"), this.index += 4, d += String.fromCharCode(parseInt(f, 16))) :
                    d += Uf[g] || g, f=!1;
                else if ("\\" === g)
                    f=!0;
                else {
                    if (g === a) {
                        this.index++;
                        this.tokens.push({
                            index: c,
                            text: e,
                            constant: !0,
                            value: d
                        });
                        return
                    }
                    d += g
                }
                this.index++
            }
            this.throwError("Unterminated quote", c)
        }
    };
    var fb = function(a, c, d) {
        this.lexer = a;
        this.$filter = c;
        this.options = d
    };
    fb.ZERO = H(function() {
        return 0
    }, {
        sharedGetter: !0,
        constant: !0
    });
    fb.prototype = {
        constructor: fb,
        parse: function(a) {
            this.text = a;
            this.tokens = this.lexer.lex(a);
            a = this.statements();
            0 !== this.tokens.length && this.throwError("is an unexpected token", this.tokens[0]);
            a.literal=!!a.literal;
            a.constant=!!a.constant;
            return a
        },
        primary: function() {
            var a;
            this.expect("(") ? (a = this.filterChain(), this.consume(")")) : this.expect("[") ? a = this.arrayDeclaration() : this.expect("{") ? a = this.object() : this.peek().identifier ? a = this.identifier() : this.peek().constant ? a = this.constant() : this.throwError("not a primary expression", this.peek());
            for (var c, d; c = this.expect("(", "[", ".");)
                "(" === c.text ? (a = this.functionCall(a, d), d = null) : "[" === c.text ? (d = a, a = this.objectIndex(a)) : "." === c.text ? (d = a, a =
                this.fieldAccess(a)) : this.throwError("IMPOSSIBLE");
            return a
        },
        throwError: function(a, c) {
            throw ja("syntax", c.text, a, c.index + 1, this.text, this.text.substring(c.index));
        },
        peekToken: function() {
            if (0 === this.tokens.length)
                throw ja("ueoe", this.text);
            return this.tokens[0]
        },
        peek: function(a, c, d, e) {
            return this.peekAhead(0, a, c, d, e)
        },
        peekAhead: function(a, c, d, e, f) {
            if (this.tokens.length > a) {
                a = this.tokens[a];
                var g = a.text;
                if (g === c || g === d || g === e || g === f ||!(c || d || e || f))
                    return a
            }
            return !1
        },
        expect: function(a, c, d, e) {
            return (a =
            this.peek(a, c, d, e)) ? (this.tokens.shift(), a) : !1
        },
        consume: function(a) {
            if (0 === this.tokens.length)
                throw ja("ueoe", this.text);
            var c = this.expect(a);
            c || this.throwError("is unexpected, expecting [" + a + "]", this.peek());
            return c
        },
        unaryFn: function(a, c) {
            var d = jb[a];
            return H(function(a, f) {
                return d(a, f, c)
            }, {
                constant: c.constant,
                inputs: [c]
            })
        },
        binaryFn: function(a, c, d, e) {
            var f = jb[c];
            return H(function(c, e) {
                return f(c, e, a, d)
            }, {
                constant: a.constant && d.constant,
                inputs: !e && [a, d]
            })
        },
        identifier: function() {
            for (var a = this.consume().text; this.peek(".") &&
            this.peekAhead(1).identifier&&!this.peekAhead(2, "(");)
                a += this.consume().text + this.consume().text;
            return Ib[a] || cd(a, this.options, this.text)
        },
        constant: function() {
            var a = this.consume().value;
            return H(function() {
                return a
            }, {
                constant: !0,
                literal: !0
            })
        },
        statements: function() {
            for (var a = []; ;)
                if (0 < this.tokens.length&&!this.peek("}", ")", ";", "]") && a.push(this.filterChain()), !this.expect(";"))
                    return 1 === a.length ? a[0] : function(c, d) {
                        for (var e, f = 0, g = a.length; f < g; f++)
                            e = a[f](c, d);
                            return e
                        }
        },
        filterChain: function() {
            for (var a =
            this.expression(); this.expect("|");)
                a = this.filter(a);
            return a
        },
        filter: function(a) {
            var c = this.$filter(this.consume().text), d, e;
            if (this.peek(":"))
                for (d = [], e = []; this.expect(":");)
                    d.push(this.expression());
            var f = [a].concat(d || []);
            return H(function(f, h) {
                var k = a(f, h);
                if (e) {
                    e[0] = k;
                    for (k = d.length; k--;)
                        e[k + 1] = d[k](f, h);
                    return c.apply(t, e)
                }
                return c(k)
            }, {
                constant: !c.$stateful && f.every(ec),
                inputs: !c.$stateful && f
            })
        },
        expression: function() {
            return this.assignment()
        },
        assignment: function() {
            var a = this.ternary(), c, d;
            return (d = this.expect("=")) ? (a.assign || this.throwError("implies assignment but [" + this.text.substring(0, d.index) + "] can not be assigned to", d), c = this.ternary(), H(function(d, f) {
                return a.assign(d, c(d, f), f)
            }, {
                inputs: [a, c]
            })) : a
        },
        ternary: function() {
            var a = this.logicalOR(), c;
            if (this.expect("?") && (c = this.assignment(), this.consume(":"))) {
                var d = this.assignment();
                return H(function(e, f) {
                    return a(e, f) ? c(e, f) : d(e, f)
                }, {
                    constant: a.constant && c.constant && d.constant
                })
            }
            return a
        },
        logicalOR: function() {
            for (var a = this.logicalAND(),
            c; c = this.expect("||");)
                a = this.binaryFn(a, c.text, this.logicalAND(), !0);
            return a
        },
        logicalAND: function() {
            var a = this.equality(), c;
            if (c = this.expect("&&"))
                a = this.binaryFn(a, c.text, this.logicalAND(), !0);
            return a
        },
        equality: function() {
            var a = this.relational(), c;
            if (c = this.expect("==", "!=", "===", "!=="))
                a = this.binaryFn(a, c.text, this.equality());
            return a
        },
        relational: function() {
            var a = this.additive(), c;
            if (c = this.expect("<", ">", "<=", ">="))
                a = this.binaryFn(a, c.text, this.relational());
            return a
        },
        additive: function() {
            for (var a =
            this.multiplicative(), c; c = this.expect("+", "-");)
                a = this.binaryFn(a, c.text, this.multiplicative());
            return a
        },
        multiplicative: function() {
            for (var a = this.unary(), c; c = this.expect("*", "/", "%");)
                a = this.binaryFn(a, c.text, this.unary());
            return a
        },
        unary: function() {
            var a;
            return this.expect("+") ? this.primary() : (a = this.expect("-")) ? this.binaryFn(fb.ZERO, a.text, this.unary()) : (a = this.expect("!")) ? this.unaryFn(a.text, this.unary()) : this.primary()
        },
        fieldAccess: function(a) {
            var c = this.text, d = this.consume().text, e = cd(d, this.options,
            c);
            return H(function(c, d, h) {
                return e(h || a(c, d))
            }, {
                assign: function(e, g, h) {
                    (h = a(e, h)) || a.assign(e, h = {});
                    return Oa(h, d, g, c)
                }
            })
        },
        objectIndex: function(a) {
            var c = this.text, d = this.expression();
            this.consume("]");
            return H(function(e, f) {
                var g = a(e, f), h = d(e, f);
                qa(h, c);
                return g ? ra(g[h], c) : t
            }, {
                assign: function(e, f, g) {
                    var h = qa(d(e, g), c);
                    (g = ra(a(e, g), c)) || a.assign(e, g = {});
                    return g[h] = f
                }
            })
        },
        functionCall: function(a, c) {
            var d = [];
            if (")" !== this.peekToken().text) {
                do
                    d.push(this.expression());
                while (this.expect(","))
                }
            this.consume(")");
            var e = this.text, f = d.length ? []: null;
            return function(g, h) {
                var k = c ? c(g, h): g, l = a(g, h, k) || w;
                if (f)
                    for (var m = d.length; m--;)
                        f[m] = ra(d[m](g, h), e);
                ra(k, e);
                if (l) {
                    if (l.constructor === l)
                        throw ja("isecfn", e);
                    if (l === Rf || l === Sf || l === Tf)
                        throw ja("isecff", e);
                }
                k = l.apply ? l.apply(k, f) : l(f[0], f[1], f[2], f[3], f[4]);
                return ra(k, e)
            }
        }, arrayDeclaration: function() {
            var a = [];
            if ("]" !== this.peekToken().text) {
                do {
                    if (this.peek("]"))
                        break;
                    a.push(this.expression())
                }
                while (this.expect(","))
                }
            this.consume("]");
            return H(function(c, d) {
                for (var e =
                [], f = 0, g = a.length; f < g; f++)
                    e.push(a[f](c, d));
                return e
            }, {
                literal: !0,
                constant: a.every(ec),
                inputs: a
            })
        }, object: function() {
            var a = [], c = [];
            if ("}" !== this.peekToken().text) {
                do {
                    if (this.peek("}"))
                        break;
                    var d = this.consume();
                    d.constant ? a.push(d.value) : d.identifier ? a.push(d.text) : this.throwError("invalid key", d);
                    this.consume(":");
                    c.push(this.expression())
                }
                while (this.expect(","))
                }
            this.consume("}");
            return H(function(d, f) {
                for (var g = {}, h = 0, k = c.length; h < k; h++)
                    g[a[h]] = c[h](d, f);
                return g
            }, {
                literal: !0,
                constant: c.every(ec),
                inputs: c
            })
        }
    };
    var zf = pa(), yf = pa(), Af = Object.prototype.valueOf, Ba = v("$sce"), ka = {
        HTML: "html",
        CSS: "css",
        URL: "url",
        RESOURCE_URL: "resourceUrl",
        JS: "js"
    }, ia = v("$compile"), Z = U.createElement("a"), gd = Aa(T.location.href);
    Cc.$inject = ["$provide"];
    hd.$inject = ["$locale"];
    jd.$inject = ["$locale"];
    var md = ".", Jf = {
        yyyy: $("FullYear", 4),
        yy: $("FullYear", 2, 0, !0),
        y: $("FullYear", 1),
        MMMM: Db("Month"),
        MMM: Db("Month", !0),
        MM: $("Month", 2, 1),
        M: $("Month", 1, 1),
        dd: $("Date", 2),
        d: $("Date", 1),
        HH: $("Hours", 2),
        H: $("Hours", 1),
        hh: $("Hours",
        2, - 12),
        h: $("Hours", 1, - 12),
        mm: $("Minutes", 2),
        m: $("Minutes", 1),
        ss: $("Seconds", 2),
        s: $("Seconds", 1),
        sss: $("Milliseconds", 3),
        EEEE: Db("Day"),
        EEE: Db("Day", !0),
        a: function(a, c) {
            return 12 > a.getHours() ? c.AMPMS[0] : c.AMPMS[1]
        },
        Z: function(a) {
            a =- 1 * a.getTimezoneOffset();
            return a = (0 <= a ? "+" : "") + (Cb(Math[0 < a ? "floor": "ceil"](a / 60), 2) + Cb(Math.abs(a%60), 2))
        },
        ww: od(2),
        w: od(1)
    }, If = /((?:[^yMdHhmsaZEw']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|w+))(.*)/, Hf = /^\-?\d+$/;
    id.$inject = ["$locale"];
    var Ff = ba(Q), Gf = ba(rb);
    kd.$inject = ["$parse"];
    var Rd = ba({
        restrict: "E",
        compile: function(a, c) {
            if (!c.href&&!c.xlinkHref&&!c.name)
                return function(a, c) {
                    var f = "[object SVGAnimatedString]" === Ja.call(c.prop("href")) ? "xlink:href": "href";
                    c.on("click", function(a) {
                        c.attr(f) || a.preventDefault()
                    })
                }
        }
    }), sb = {};
    r(yb, function(a, c) {
        if ("multiple" != a) {
            var d = wa("ng-" + c);
            sb[d] = function() {
                return {
                    restrict: "A",
                    priority: 100,
                    link: function(a, f, g) {
                        a.$watch(g[d], function(a) {
                            g.$set(c, !!a)
                        })
                    }
                }
            }
        }
    });
    r(Mc, function(a, c) {
        sb[c] = function() {
            return {
                priority: 100,
                link: function(a, e, f) {
                    if ("ngPattern" === c && "/" == f.ngPattern.charAt(0) && (e = f.ngPattern.match(Lf))) {
                        f.$set("ngPattern", new RegExp(e[1], e[2]));
                        return
                    }
                    a.$watch(f[c], function(a) {
                        f.$set(c, a)
                    })
                }
            }
        }
    });
    r(["src", "srcset", "href"], function(a) {
        var c = wa("ng-" + a);
        sb[c] = function() {
            return {
                priority: 99,
                link: function(d, e, f) {
                    var g = a, h = a;
                    "href" === a && "[object SVGAnimatedString]" === Ja.call(e.prop("href")) && (h = "xlinkHref", f.$attr[h] = "xlink:href", g = null);
                    f.$observe(c, function(c) {
                        c ? (f.$set(h, c), Ha && g && e.prop(g, f[h])) : "href" ===
                        a && f.$set(h, null)
                    })
                }
            }
        }
    });
    var Eb = {
        $addControl: w,
        $$renameControl: function(a, c) {
            a.$name = c
        },
        $removeControl: w,
        $setValidity: w,
        $setDirty: w,
        $setPristine: w,
        $setSubmitted: w
    };
    pd.$inject = ["$element", "$attrs", "$scope", "$animate", "$interpolate"];
    var wd = function(a) {
        return ["$timeout", function(c) {
            return {
                name: "form",
                restrict: a ? "EAC": "E",
                controller: pd,
                compile: function(a) {
                    a.addClass(Qa).addClass(ib);
                    return {
                        pre: function(a, d, g, h) {
                            if (!("action"in g)) {
                                var k = function(c) {
                                    a.$apply(function() {
                                        h.$commitViewValue();
                                        h.$setSubmitted()
                                    });
                                    c.preventDefault ? c.preventDefault() : c.returnValue=!1
                                };
                                d[0].addEventListener("submit", k, !1);
                                d.on("$destroy", function() {
                                    c(function() {
                                        d[0].removeEventListener("submit", k, !1)
                                    }, 0, !1)
                                })
                            }
                            var l = h.$$parentForm, m = h.$name;
                            m && (Oa(a, m, h, m), g.$observe(g.name ? "name" : "ngForm", function(c) {
                                m !== c && (Oa(a, m, t, m), m = c, Oa(a, m, h, m), l.$$renameControl(h, m))
                            }));
                            d.on("$destroy", function() {
                                l.$removeControl(h);
                                m && Oa(a, m, t, m);
                                H(h, Eb)
                            })
                        }
                    }
                }
            }
        }
        ]
    }, Sd = wd(), ee = wd(!0), Kf = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,
    Vf = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/, Wf = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i, Xf = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/, xd = /^(\d{4})-(\d{2})-(\d{2})$/, yd = /^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/, jc = /^(\d{4})-W(\d\d)$/, zd = /^(\d{4})-(\d\d)$/, Ad = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/, Yf = /(\s+|^)default(\s+|$)/, Hb = new v("ngModel"), Bd = {
        text: function(a, c, d, e, f, g) {
            gb(a,
            c, d, e, f, g);
            hc(e)
        },
        date: hb("date", xd, Gb(xd, ["yyyy", "MM", "dd"]), "yyyy-MM-dd"),
        "datetime-local": hb("datetimelocal", yd, Gb(yd, "yyyy MM dd HH mm ss sss".split(" ")), "yyyy-MM-ddTHH:mm:ss.sss"),
        time: hb("time", Ad, Gb(Ad, ["HH", "mm", "ss", "sss"]), "HH:mm:ss.sss"),
        week: hb("week", jc, function(a, c) {
            if (ea(a))
                return a;
            if (I(a)) {
                jc.lastIndex = 0;
                var d = jc.exec(a);
                if (d) {
                    var e =+ d[1], f =+ d[2], g = d = 0, h = 0, k = 0, l = nd(e), f = 7 * (f - 1);
                    c && (d = c.getHours(), g = c.getMinutes(), h = c.getSeconds(), k = c.getMilliseconds());
                    return new Date(e, 0, l.getDate() +
                    f, d, g, h, k)
                }
            }
            return NaN
        }, "yyyy-Www"),
        month: hb("month", zd, Gb(zd, ["yyyy", "MM"]), "yyyy-MM"),
        number: function(a, c, d, e, f, g) {
            rd(a, c, d, e);
            gb(a, c, d, e, f, g);
            e.$$parserName = "number";
            e.$parsers.push(function(a) {
                return e.$isEmpty(a) ? null : Xf.test(a) ? parseFloat(a) : t
            });
            e.$formatters.push(function(a) {
                if (!e.$isEmpty(a)) {
                    if (!W(a))
                        throw Hb("numfmt", a);
                    a = a.toString()
                }
                return a
            });
            if (d.min || d.ngMin) {
                var h;
                e.$validators.min = function(a) {
                    return e.$isEmpty(a) || D(h) || a >= h
                };
                d.$observe("min", function(a) {
                    A(a)&&!W(a) && (a = parseFloat(a,
                    10));
                    h = W(a)&&!isNaN(a) ? a : t;
                    e.$validate()
                })
            }
            if (d.max || d.ngMax) {
                var k;
                e.$validators.max = function(a) {
                    return e.$isEmpty(a) || D(k) || a <= k
                };
                d.$observe("max", function(a) {
                    A(a)&&!W(a) && (a = parseFloat(a, 10));
                    k = W(a)&&!isNaN(a) ? a : t;
                    e.$validate()
                })
            }
        },
        url: function(a, c, d, e, f, g) {
            gb(a, c, d, e, f, g);
            hc(e);
            e.$$parserName = "url";
            e.$validators.url = function(a) {
                return e.$isEmpty(a) || Vf.test(a)
            }
        },
        email: function(a, c, d, e, f, g) {
            gb(a, c, d, e, f, g);
            hc(e);
            e.$$parserName = "email";
            e.$validators.email = function(a) {
                return e.$isEmpty(a) || Wf.test(a)
            }
        },
        radio: function(a, c, d, e) {
            D(d.name) && c.attr("name", ++kb);
            c.on("click", function(a) {
                c[0].checked && e.$setViewValue(d.value, a && a.type)
            });
            e.$render = function() {
                c[0].checked = d.value == e.$viewValue
            };
            d.$observe("value", e.$render)
        },
        checkbox: function(a, c, d, e, f, g, h, k) {
            var l = sd(k, a, "ngTrueValue", d.ngTrueValue, !0), m = sd(k, a, "ngFalseValue", d.ngFalseValue, !1);
            c.on("click", function(a) {
                e.$setViewValue(c[0].checked, a && a.type)
            });
            e.$render = function() {
                c[0].checked = e.$viewValue
            };
            e.$isEmpty = function(a) {
                return a !== l
            };
            e.$formatters.push(function(a) {
                return na(a,
                l)
            });
            e.$parsers.push(function(a) {
                return a ? l : m
            })
        },
        hidden: w,
        button: w,
        submit: w,
        reset: w,
        file: w
    }, wc = ["$browser", "$sniffer", "$filter", "$parse", function(a, c, d, e) {
        return {
            restrict: "E",
            require: ["?ngModel"],
            link: {
                pre: function(f, g, h, k) {
                    k[0] && (Bd[Q(h.type)] || Bd.text)(f, g, h, k[0], c, a, d, e)
                }
            }
        }
    }
    ], ib = "ng-valid", td = "ng-invalid", Qa = "ng-pristine", Fb = "ng-dirty", vd = "ng-pending", Zf = ["$scope", "$exceptionHandler", "$attrs", "$element", "$parse", "$animate", "$timeout", "$rootScope", "$q", "$interpolate", function(a, c, d, e, f, g, h, k, l,
    m) {
        this.$modelValue = this.$viewValue = Number.NaN;
        this.$validators = {};
        this.$asyncValidators = {};
        this.$parsers = [];
        this.$formatters = [];
        this.$viewChangeListeners = [];
        this.$untouched=!0;
        this.$touched=!1;
        this.$pristine=!0;
        this.$dirty=!1;
        this.$valid=!0;
        this.$invalid=!1;
        this.$error = {};
        this.$$success = {};
        this.$pending = t;
        this.$name = m(d.name || "", !1)(a);
        var p = f(d.ngModel), q = null, n = this, s = function() {
            var c = p(a);
            n.$options && n.$options.getterSetter && u(c) && (c = c());
            return c
        }, O = function(c) {
            var d;
            n.$options && n.$options.getterSetter &&
            u(d = p(a)) ? d(n.$modelValue) : p.assign(a, n.$modelValue)
        };
        this.$$setOptions = function(a) {
            n.$options = a;
            if (!(p.assign || a && a.getterSetter))
                throw Hb("nonassign", d.ngModel, ua(e));
        };
        this.$render = w;
        this.$isEmpty = function(a) {
            return D(a) || "" === a || null === a || a !== a
        };
        var E = e.inheritedData("$formController") || Eb, x = 0;
        qd({
            ctrl: this,
            $element: e,
            set: function(a, c) {
                a[c]=!0
            },
            unset: function(a, c) {
                delete a[c]
            },
            parentForm: E,
            $animate: g
        });
        this.$setPristine = function() {
            n.$dirty=!1;
            n.$pristine=!0;
            g.removeClass(e, Fb);
            g.addClass(e, Qa)
        };
        this.$setUntouched = function() {
            n.$touched=!1;
            n.$untouched=!0;
            g.setClass(e, "ng-untouched", "ng-touched")
        };
        this.$setTouched = function() {
            n.$touched=!0;
            n.$untouched=!1;
            g.setClass(e, "ng-touched", "ng-untouched")
        };
        this.$rollbackViewValue = function() {
            h.cancel(q);
            n.$viewValue = n.$$lastCommittedViewValue;
            n.$render()
        };
        this.$validate = function() {
            W(n.$modelValue) && isNaN(n.$modelValue) || this.$$parseAndValidate()
        };
        this.$$runValidators = function(a, c, d, e) {
            function f() {
                var a=!0;
                r(n.$validators, function(e, f) {
                    var g = e(c, d);
                    a = a && g;
                    h(f, g)
                });
                return a?!0 : (r(n.$asyncValidators, function(a, c) {
                    h(c, null)
                }), !1)
            }
            function g() {
                var a = [], e=!0;
                r(n.$asyncValidators, function(f, g) {
                    var k = f(c, d);
                    if (!k ||!u(k.then))
                        throw Hb("$asyncValidators", k);
                    h(g, t);
                    a.push(k.then(function() {
                        h(g, !0)
                    }, function(a) {
                        e=!1;
                        h(g, !1)
                    }))
                });
                a.length ? l.all(a).then(function() {
                    k(e)
                }, w) : k(!0)
            }
            function h(a, c) {
                m === x && n.$setValidity(a, c)
            }
            function k(a) {
                m === x && e(a)
            }
            x++;
            var m = x;
            (function(a) {
                var c = n.$$parserName || "parse";
                if (a === t)
                    h(c, null);
                else if (h(c, a), !a)
                    return r(n.$validators,
                    function(a, c) {
                        h(c, null)
                    }), r(n.$asyncValidators, function(a, c) {
                        h(c, null)
                    }), !1;
                return !0
            })(a) ? f() ? g() : k(!1) : k(!1)
        };
        this.$commitViewValue = function() {
            var a = n.$viewValue;
            h.cancel(q);
            if (n.$$lastCommittedViewValue !== a || "" === a && n.$$hasNativeValidators)
                n.$$lastCommittedViewValue = a, n.$pristine && (n.$dirty=!0, n.$pristine=!1, g.removeClass(e, Qa), g.addClass(e, Fb), E.$setDirty()), this.$$parseAndValidate()
        };
        this.$$parseAndValidate = function() {
            var a = n.$$lastCommittedViewValue, c = a, d = D(c) ? t: !0;
            if (d)
                for (var e = 0; e < n.$parsers.length; e++)
                    if (c =
                    n.$parsers[e](c), D(c)) {
                        d=!1;
                        break
                    }
            W(n.$modelValue) && isNaN(n.$modelValue) && (n.$modelValue = s());
            var f = n.$modelValue, g = n.$options && n.$options.allowInvalid;
            g && (n.$modelValue = c, n.$modelValue !== f && n.$$writeModelToScope());
            n.$$runValidators(d, c, a, function(a) {
                g || (n.$modelValue = a ? c : t, n.$modelValue !== f && n.$$writeModelToScope())
            })
        };
        this.$$writeModelToScope = function() {
            O(n.$modelValue);
            r(n.$viewChangeListeners, function(a) {
                try {
                    a()
                } catch (d) {
                    c(d)
                }
            })
        };
        this.$setViewValue = function(a, c) {
            n.$viewValue = a;
            n.$options&&!n.$options.updateOnDefault ||
            n.$$debounceViewValueCommit(c)
        };
        this.$$debounceViewValueCommit = function(c) {
            var d = 0, e = n.$options;
            e && A(e.debounce) && (e = e.debounce, W(e) ? d = e : W(e[c]) ? d = e[c] : W(e["default"]) && (d = e["default"]));
            h.cancel(q);
            d ? q = h(function() {
                n.$commitViewValue()
            }, d) : k.$$phase ? n.$commitViewValue() : a.$apply(function() {
                n.$commitViewValue()
            })
        };
        a.$watch(function() {
            var a = s();
            if (a !== n.$modelValue) {
                n.$modelValue = a;
                for (var c = n.$formatters, d = c.length, e = a; d--;)
                    e = c[d](e);
                n.$viewValue !== e && (n.$viewValue = n.$$lastCommittedViewValue = e, n.$render(),
                n.$$runValidators(t, a, e, w))
            }
            return a
        })
    }
    ], te = function() {
        return {
            restrict: "A",
            require: ["ngModel", "^?form", "^?ngModelOptions"],
            controller: Zf,
            priority: 1,
            compile: function(a) {
                a.addClass(Qa).addClass("ng-untouched").addClass(ib);
                return {
                    pre: function(a, d, e, f) {
                        var g = f[0], h = f[1] || Eb;
                        g.$$setOptions(f[2] && f[2].$options);
                        h.$addControl(g);
                        e.$observe("name", function(a) {
                            g.$name !== a && h.$$renameControl(g, a)
                        });
                        a.$on("$destroy", function() {
                            h.$removeControl(g)
                        })
                    },
                    post: function(a, d, e, f) {
                        var g = f[0];
                        if (g.$options && g.$options.updateOn)
                            d.on(g.$options.updateOn,
                            function(a) {
                                g.$$debounceViewValueCommit(a && a.type)
                            });
                        d.on("blur", function(d) {
                            g.$touched || a.$apply(function() {
                                g.$setTouched()
                            })
                        })
                    }
                }
            }
        }
    }, ve = ba({
        restrict: "A",
        require: "ngModel",
        link: function(a, c, d, e) {
            e.$viewChangeListeners.push(function() {
                a.$eval(d.ngChange)
            })
        }
    }), yc = function() {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(a, c, d, e) {
                e && (d.required=!0, e.$validators.required = function(a) {
                    return !d.required ||!e.$isEmpty(a)
                }, d.$observe("required", function() {
                    e.$validate()
                }))
            }
        }
    }, xc = function() {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(a, c, d, e) {
                if (e) {
                    var f, g = d.ngPattern || d.pattern;
                    d.$observe("pattern", function(a) {
                        I(a) && 0 < a.length && (a = new RegExp("^" + a + "$"));
                        if (a&&!a.test)
                            throw v("ngPattern")("noregexp", g, a, ua(c));
                        f = a || t;
                        e.$validate()
                    });
                    e.$validators.pattern = function(a) {
                        return e.$isEmpty(a) || D(f) || f.test(a)
                    }
                }
            }
        }
    }, Ac = function() {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(a, c, d, e) {
                if (e) {
                    var f = 0;
                    d.$observe("maxlength", function(a) {
                        f = aa(a) || 0;
                        e.$validate()
                    });
                    e.$validators.maxlength = function(a, c) {
                        return e.$isEmpty(a) ||
                        c.length <= f
                    }
                }
            }
        }
    }, zc = function() {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(a, c, d, e) {
                if (e) {
                    var f = 0;
                    d.$observe("minlength", function(a) {
                        f = aa(a) || 0;
                        e.$validate()
                    });
                    e.$validators.minlength = function(a, c) {
                        return e.$isEmpty(a) || c.length >= f
                    }
                }
            }
        }
    }, ue = function() {
        return {
            restrict: "A",
            priority: 100,
            require: "ngModel",
            link: function(a, c, d, e) {
                var f = c.attr(d.$attr.ngList) || ", ", g = "false" !== d.ngTrim, h = g ? P(f): f;
                e.$parsers.push(function(a) {
                    if (!D(a)) {
                        var c = [];
                        a && r(a.split(h), function(a) {
                            a && c.push(g ? P(a) : a)
                        });
                        return c
                    }
                });
                e.$formatters.push(function(a) {
                    return G(a) ? a.join(f) : t
                });
                e.$isEmpty = function(a) {
                    return !a ||!a.length
                }
            }
        }
    }, $f = /^(true|false|\d+)$/, we = function() {
        return {
            restrict: "A",
            priority: 100,
            compile: function(a, c) {
                return $f.test(c.ngValue) ? function(a, c, f) {
                    f.$set("value", a.$eval(f.ngValue))
                } : function(a, c, f) {
                    a.$watch(f.ngValue, function(a) {
                        f.$set("value", a)
                    })
                }
            }
        }
    }, xe = function() {
        return {
            restrict: "A",
            controller: ["$scope", "$attrs", function(a, c) {
                var d = this;
                this.$options = a.$eval(c.ngModelOptions);
                this.$options.updateOn !== t ?
                (this.$options.updateOnDefault=!1, this.$options.updateOn = P(this.$options.updateOn.replace(Yf, function() {
                    d.$options.updateOnDefault=!0;
                    return " "
                }))) : this.$options.updateOnDefault=!0
            }
            ]
        }
    }, Xd = ["$compile", function(a) {
        return {
            restrict: "AC",
            compile: function(c) {
                a.$$addBindingClass(c);
                return function(c, e, f) {
                    a.$$addBindingInfo(e, f.ngBind);
                    e = e[0];
                    c.$watch(f.ngBind, function(a) {
                        e.textContent = a === t ? "" : a
                    })
                }
            }
        }
    }
    ], Zd = ["$interpolate", "$compile", function(a, c) {
        return {
            compile: function(d) {
                c.$$addBindingClass(d);
                return function(d,
                f, g) {
                    d = a(f.attr(g.$attr.ngBindTemplate));
                    c.$$addBindingInfo(f, d.expressions);
                    f = f[0];
                    g.$observe("ngBindTemplate", function(a) {
                        f.textContent = a === t ? "" : a
                    })
                }
            }
        }
    }
    ], Yd = ["$sce", "$parse", "$compile", function(a, c, d) {
        return {
            restrict: "A",
            compile: function(e, f) {
                var g = c(f.ngBindHtml), h = c(f.ngBindHtml, function(a) {
                    return (a || "").toString()
                });
                d.$$addBindingClass(e);
                return function(c, e, f) {
                    d.$$addBindingInfo(e, f.ngBindHtml);
                    c.$watch(h, function() {
                        e.html(a.getTrustedHtml(g(c)) || "")
                    })
                }
            }
        }
    }
    ], $d = ic("", !0), be = ic("Odd", 0), ae = ic("Even",
    1), ce = Ia({
        compile: function(a, c) {
            c.$set("ngCloak", t);
            a.removeClass("ng-cloak")
        }
    }), de = [function() {
        return {
            restrict: "A",
            scope: !0,
            controller: "@",
            priority: 500
        }
    }
    ], Bc = {}, ag = {
        blur: !0,
        focus: !0
    };
    r("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "), function(a) {
        var c = wa("ng-" + a);
        Bc[c] = ["$parse", "$rootScope", function(d, e) {
            return {
                restrict: "A",
                compile: function(f, g) {
                    var h = d(g[c], null, !0);
                    return function(c, d) {
                        d.on(a,
                        function(d) {
                            var f = function() {
                                h(c, {
                                    $event: d
                                })
                            };
                            ag[a] && e.$$phase ? c.$evalAsync(f) : c.$apply(f)
                        })
                    }
                }
            }
        }
        ]
    });
    var ge = ["$animate", function(a) {
        return {
            multiElement: !0,
            transclude: "element",
            priority: 600,
            terminal: !0,
            restrict: "A",
            $$tlb: !0,
            link: function(c, d, e, f, g) {
                var h, k, l;
                c.$watch(e.ngIf, function(c) {
                    c ? k || g(function(c, f) {
                        k = f;
                        c[c.length++] = U.createComment(" end ngIf: " + e.ngIf + " ");
                        h = {
                            clone: c
                        };
                        a.enter(c, d.parent(), d)
                    }) : (l && (l.remove(), l = null), k && (k.$destroy(), k = null), h && (l = qb(h.clone), a.leave(l).then(function() {
                        l = null
                    }),
                    h = null))
                })
            }
        }
    }
    ], he = ["$templateRequest", "$anchorScroll", "$animate", "$sce", function(a, c, d, e) {
        return {
            restrict: "ECA",
            priority: 400,
            terminal: !0,
            transclude: "element",
            controller: va.noop,
            compile: function(f, g) {
                var h = g.ngInclude || g.src, k = g.onload || "", l = g.autoscroll;
                return function(f, g, q, n, r) {
                    var t = 0, E, x, B, v = function() {
                        x && (x.remove(), x = null);
                        E && (E.$destroy(), E = null);
                        B && (d.leave(B).then(function() {
                            x = null
                        }), x = B, B = null)
                    };
                    f.$watch(e.parseAsResourceUrl(h), function(e) {
                        var h = function() {
                            !A(l) || l&&!f.$eval(l) || c()
                        }, q =
                        ++t;
                        e ? (a(e, !0).then(function(a) {
                            if (q === t) {
                                var c = f.$new();
                                n.template = a;
                                a = r(c, function(a) {
                                    v();
                                    d.enter(a, null, g).then(h)
                                });
                                E = c;
                                B = a;
                                E.$emit("$includeContentLoaded", e);
                                f.$eval(k)
                            }
                        }, function() {
                            q === t && (v(), f.$emit("$includeContentError", e))
                        }), f.$emit("$includeContentRequested", e)) : (v(), n.template = null)
                    })
                }
            }
        }
    }
    ], ye = ["$compile", function(a) {
        return {
            restrict: "ECA",
            priority: - 400,
            require: "ngInclude",
            link: function(c, d, e, f) {
                /SVG/.test(d[0].toString()) ? (d.empty(), a(Ec(f.template, U).childNodes)(c, function(a) {
                    d.append(a)
                },
                {
                    futureParentElement: d
                })) : (d.html(f.template), a(d.contents())(c))
            }
        }
    }
    ], ie = Ia({
        priority: 450,
        compile: function() {
            return {
                pre: function(a, c, d) {
                    a.$eval(d.ngInit)
                }
            }
        }
    }), je = Ia({
        terminal: !0,
        priority: 1E3
    }), ke = ["$locale", "$interpolate", function(a, c) {
        var d = /{}/g;
        return {
            restrict: "EA",
            link: function(e, f, g) {
                var h = g.count, k = g.$attr.when && f.attr(g.$attr.when), l = g.offset || 0, m = e.$eval(k) || {}, p = {}, q = c.startSymbol(), n = c.endSymbol(), s = /^when(Minus)?(.+)$/;
                r(g, function(a, c) {
                    s.test(c) && (m[Q(c.replace("when", "").replace("Minus",
                    "-"))] = f.attr(g.$attr[c]))
                });
                r(m, function(a, e) {
                    p[e] = c(a.replace(d, q + h + "-" + l + n))
                });
                e.$watch(function() {
                    var c = parseFloat(e.$eval(h));
                    if (isNaN(c))
                        return "";
                    c in m || (c = a.pluralCat(c - l));
                    return p[c](e)
                }, function(a) {
                    f.text(a)
                })
            }
        }
    }
    ], le = ["$parse", "$animate", function(a, c) {
        var d = v("ngRepeat"), e = function(a, c, d, e, l, m, p) {
            a[d] = e;
            l && (a[l] = m);
            a.$index = c;
            a.$first = 0 === c;
            a.$last = c === p - 1;
            a.$middle=!(a.$first || a.$last);
            a.$odd=!(a.$even = 0 === (c & 1))
        };
        return {
            restrict: "A",
            multiElement: !0,
            transclude: "element",
            priority: 1E3,
            terminal: !0,
            $$tlb: !0,
            compile: function(f, g) {
                var h = g.ngRepeat, k = U.createComment(" end ngRepeat: " + h + " "), l = h.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
                if (!l)
                    throw d("iexp", h);
                var m = l[1], p = l[2], q = l[3], n = l[4], l = m.match(/^(?:([\$\w]+)|\(([\$\w]+)\s*,\s*([\$\w]+)\))$/);
                if (!l)
                    throw d("iidexp", m);
                var s = l[3] || l[1], A = l[2];
                if (q && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(q) || /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent)$/.test(q)))
                    throw d("badident",
                    q);
                var v, x, B, J, z = {
                    $id: Ma
                };
                n ? v = a(n) : (B = function(a, c) {
                    return Ma(c)
                }, J = function(a) {
                    return a
                });
                return function(a, f, g, l, n) {
                    v && (x = function(c, d, e) {
                        A && (z[A] = c);
                        z[s] = d;
                        z.$index = e;
                        return v(a, z)
                    });
                    var m = pa();
                    a.$watchCollection(p, function(g) {
                        var l, p, C = f[0], v, z = pa(), E, H, w, D, G, u, I;
                        q && (a[q] = g);
                        if (Ra(g))
                            G = g, p = x || B;
                        else {
                            p = x || J;
                            G = [];
                            for (I in g)
                                g.hasOwnProperty(I) && "$" != I.charAt(0) && G.push(I);
                            G.sort()
                        }
                        E = G.length;
                        I = Array(E);
                        for (l = 0; l < E; l++)
                            if (H = g === G ? l : G[l], w = g[H], D = p(H, w, l), m[D])
                                u = m[D], delete m[D], z[D] = u, I[l] = u;
                            else {
                                if (z[D])
                                    throw r(I,
                                    function(a) {
                                        a && a.scope && (m[a.id] = a)
                                    }), d("dupes", h, D, w);
                                    I[l] = {
                                        id: D,
                                        scope: t,
                                        clone: t
                                    };
                                    z[D]=!0
                            }
                        for (v in m) {
                            u = m[v];
                            D = qb(u.clone);
                            c.leave(D);
                            if (D[0].parentNode)
                                for (l = 0, p = D.length; l < p; l++)
                                    D[l].$$NG_REMOVED=!0;
                            u.scope.$destroy()
                        }
                        for (l = 0; l < E; l++)
                            if (H = g === G ? l : G[l], w = g[H], u = I[l], u.scope) {
                                v = C;
                                do
                                    v = v.nextSibling;
                                    while (v && v.$$NG_REMOVED);
                                    u.clone[0] != v && c.move(qb(u.clone), null, y(C));
                                    C = u.clone[u.clone.length - 1];
                                    e(u.scope, l, s, w, A, H, E)
                            } else
                                n(function(a, d) {
                                    u.scope = d;
                                    var f = k.cloneNode(!1);
                                    a[a.length++] = f;
                                    c.enter(a,
                                    null, y(C));
                                    C = f;
                                    u.clone = a;
                                    z[u.id] = u;
                                    e(u.scope, l, s, w, A, H, E)
                                });
                        m = z
                    })
                }
            }
        }
    }
    ], me = ["$animate", function(a) {
        return {
            restrict: "A",
            multiElement: !0,
            link: function(c, d, e) {
                c.$watch(e.ngShow, function(c) {
                    a[c ? "removeClass": "addClass"](d, "ng-hide", {
                        tempClasses: "ng-hide-animate"
                    })
                })
            }
        }
    }
    ], fe = ["$animate", function(a) {
        return {
            restrict: "A",
            multiElement: !0,
            link: function(c, d, e) {
                c.$watch(e.ngHide, function(c) {
                    a[c ? "addClass": "removeClass"](d, "ng-hide", {
                        tempClasses: "ng-hide-animate"
                    })
                })
            }
        }
    }
    ], ne = Ia(function(a, c, d) {
        a.$watch(d.ngStyle,
        function(a, d) {
            d && a !== d && r(d, function(a, d) {
                c.css(d, "")
            });
            a && c.css(a)
        }, !0)
    }), oe = ["$animate", function(a) {
        return {
            restrict: "EA",
            require: "ngSwitch",
            controller: ["$scope", function() {
                this.cases = {}
            }
            ],
            link: function(c, d, e, f) {
                var g = [], h = [], k = [], l = [], m = function(a, c) {
                    return function() {
                        a.splice(c, 1)
                    }
                };
                c.$watch(e.ngSwitch || e.on, function(c) {
                    var d, e;
                    d = 0;
                    for (e = k.length; d < e; ++d)
                        a.cancel(k[d]);
                    d = k.length = 0;
                    for (e = l.length; d < e; ++d) {
                        var s = qb(h[d].clone);
                        l[d].$destroy();
                        (k[d] = a.leave(s)).then(m(k, d))
                    }
                    h.length = 0;
                    l.length = 0;
                    (g = f.cases["!" + c] || f.cases["?"]) && r(g, function(c) {
                        c.transclude(function(d, e) {
                            l.push(e);
                            var f = c.element;
                            d[d.length++] = U.createComment(" end ngSwitchWhen: ");
                            h.push({
                                clone: d
                            });
                            a.enter(d, f.parent(), f)
                        })
                    })
                })
            }
        }
    }
    ], pe = Ia({
        transclude: "element",
        priority: 1200,
        require: "^ngSwitch",
        multiElement: !0,
        link: function(a, c, d, e, f) {
            e.cases["!" + d.ngSwitchWhen] = e.cases["!" + d.ngSwitchWhen] || [];
            e.cases["!" + d.ngSwitchWhen].push({
                transclude: f,
                element: c
            })
        }
    }), qe = Ia({
        transclude: "element",
        priority: 1200,
        require: "^ngSwitch",
        multiElement: !0,
        link: function(a, c, d, e, f) {
            e.cases["?"] = e.cases["?"] || [];
            e.cases["?"].push({
                transclude: f,
                element: c
            })
        }
    }), se = Ia({
        restrict: "EAC",
        link: function(a, c, d, e, f) {
            if (!f)
                throw v("ngTransclude")("orphan", ua(c));
            f(function(a) {
                c.empty();
                c.append(a)
            })
        }
    }), Td = ["$templateCache", function(a) {
        return {
            restrict: "E",
            terminal: !0,
            compile: function(c, d) {
                "text/ng-template" == d.type && a.put(d.id, c[0].text)
            }
        }
    }
    ], bg = v("ngOptions"), re = ba({
        restrict: "A",
        terminal: !0
    }), Ud = ["$compile", "$parse", function(a, c) {
        var d = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,
        e = {
            $setViewValue: w
        };
        return {
            restrict: "E",
            require: ["select", "?ngModel"],
            controller: ["$element", "$scope", "$attrs", function(a, c, d) {
                var k = this, l = {}, m = e, p;
                k.databound = d.ngModel;
                k.init = function(a, c, d) {
                    m = a;
                    p = d
                };
                k.addOption = function(c, d) {
                    La(c, '"option value"');
                    l[c]=!0;
                    m.$viewValue == c && (a.val(c), p.parent() && p.remove());
                    d && d[0].hasAttribute("selected") && (d[0].selected=!0)
                };
                k.removeOption = function(a) {
                    this.hasOption(a) && (delete l[a], m.$viewValue == a && this.renderUnknownOption(a))
                };
                k.renderUnknownOption = function(c) {
                    c =
                    "? " + Ma(c) + " ?";
                    p.val(c);
                    a.prepend(p);
                    a.val(c);
                    p.prop("selected", !0)
                };
                k.hasOption = function(a) {
                    return l.hasOwnProperty(a)
                };
                c.$on("$destroy", function() {
                    k.renderUnknownOption = w
                })
            }
            ],
            link: function(e, g, h, k) {
                function l(a, c, d, e) {
                    d.$render = function() {
                        var a = d.$viewValue;
                        e.hasOption(a) ? (z.parent() && z.remove(), c.val(a), "" === a && u.prop("selected", !0)) : D(a) && u ? c.val("") : e.renderUnknownOption(a)
                    };
                    c.on("change", function() {
                        a.$apply(function() {
                            z.parent() && z.remove();
                            d.$setViewValue(c.val())
                        })
                    })
                }
                function m(a, c, d) {
                    var e;
                    d.$render = function() {
                        var a = new cb(d.$viewValue);
                        r(c.find("option"), function(c) {
                            c.selected = A(a.get(c.value))
                        })
                    };
                    a.$watch(function() {
                        na(e, d.$viewValue) || (e = ta(d.$viewValue), d.$render())
                    });
                    c.on("change", function() {
                        a.$apply(function() {
                            var a = [];
                            r(c.find("option"), function(c) {
                                c.selected && a.push(c.value)
                            });
                            d.$setViewValue(a)
                        })
                    })
                }
                function p(e, f, g) {
                    function h(a, c, d) {
                        T[z] = d;
                        F && (T[F] = c);
                        return a(e, T)
                    }
                    function k(a) {
                        var c;
                        if (n)
                            if (L && G(a)) {
                                c = new cb([]);
                                for (var d = 0; d < a.length; d++)
                                    c.put(h(L, null, a[d]), !0)
                            } else
                                c =
                                new cb(a);
                        else
                            L && (a = h(L, null, a));
                        return function(d, e) {
                            var f;
                            f = L ? L : w ? w : E;
                            return n ? A(c.remove(h(f, d, e))) : a === h(f, d, e)
                        }
                    }
                    function l() {
                        x || (e.$$postDigest(p), x=!0)
                    }
                    function m(a, c, d) {
                        a[c] = a[c] || 0;
                        a[c] += d ? 1 : - 1
                    }
                    function p() {
                        x=!1;
                        var a = {
                            "": []
                        }, c = [""], d, l, s, t, u;
                        s = g.$viewValue;
                        t = N(e) || [];
                        var z = F ? Object.keys(t).sort(): t, w, y, G, E, S = {};
                        u = k(s);
                        var P=!1, U, W;
                        R = {};
                        for (E = 0; G = z.length, E < G; E++) {
                            w = E;
                            if (F && (w = z[E], "$" === w.charAt(0)))
                                continue;
                            y = t[w];
                            d = h(I, w, y) || "";
                            (l = a[d]) || (l = a[d] = [], c.push(d));
                            d = u(w, y);
                            P = P || d;
                            y = h(D, w, y);
                            y = A(y) ? y : "";
                            W = L ? L(e, T) : F ? z[E] : E;
                            L && (R[W] = w);
                            l.push({
                                id: W,
                                label: y,
                                selected: d
                            })
                        }
                        n || (v || null === s ? a[""].unshift({
                            id: "",
                            label: "",
                            selected: !P
                        }) : P || a[""].unshift({
                            id: "?",
                            label: "",
                            selected: !0
                        }));
                        w = 0;
                        for (z = c.length; w < z; w++) {
                            d = c[w];
                            l = a[d];
                            Q.length <= w ? (s = {
                                element: H.clone().attr("label", d),
                                label: l.label
                            }, t = [s], Q.push(t), f.append(s.element)) : (t = Q[w], s = t[0], s.label != d && s.element.attr("label", s.label = d));
                            P = null;
                            E = 0;
                            for (G = l.length; E < G; E++)
                                d = l[E], (u = t[E + 1]) ? (P = u.element, u.label !== d.label && (m(S, u.label, !1), m(S, d.label,
                                !0), P.text(u.label = d.label), P.prop("label", u.label)), u.id !== d.id && P.val(u.id = d.id), P[0].selected !== d.selected && (P.prop("selected", u.selected = d.selected), Ha && P.prop("selected", u.selected))) : ("" === d.id && v ? U = v : (U = B.clone()).val(d.id).prop("selected", d.selected).attr("selected", d.selected).prop("label", d.label).text(d.label), t.push(u = {
                                    element: U,
                                    label: d.label,
                                    id: d.id,
                                    selected: d.selected
                                }), m(S, d.label, !0), P ? P.after(U) : s.element.append(U), P = U);
                            for (E++; t.length > E;)
                                d = t.pop(), m(S, d.label, !1), d.element.remove();
                            r(S, function(a, c) {
                                0 < a ? q.addOption(c) : 0 > a && q.removeOption(c)
                            })
                        }
                        for (; Q.length > w;)
                            Q.pop()[0].element.remove()
                    }
                    var u;
                    if (!(u = s.match(d)))
                        throw bg("iexp", s, ua(f));
                    var D = c(u[2] || u[1]), z = u[4] || u[6], y = / as /.test(u[0]) && u[1], w = y ? c(y): null, F = u[5], I = c(u[3] || ""), E = c(u[2] ? u[1] : z), N = c(u[7]), L = u[8] ? c(u[8]): null, R = {}, Q = [[{
                        element: f,
                        label: ""
                    }
                    ]], T = {};
                    v && (a(v)(e), v.removeClass("ng-scope"), v.remove());
                    f.empty();
                    f.on("change", function() {
                        e.$apply(function() {
                            var a = N(e) || [], c;
                            if (n)
                                c = [], r(f.val(), function(d) {
                                    d = L ? R[d] : d;
                                    c.push("?" ===
                                    d ? t : "" === d ? null : h(w ? w : E, d, a[d]))
                                });
                            else {
                                var d = L ? R[f.val()]: f.val();
                                c = "?" === d ? t : "" === d ? null : h(w ? w : E, d, a[d])
                            }
                            g.$setViewValue(c);
                            p()
                        })
                    });
                    g.$render = p;
                    e.$watchCollection(N, l);
                    e.$watchCollection(function() {
                        var a = N(e), c;
                        if (a && G(a)) {
                            c = Array(a.length);
                            for (var d = 0, f = a.length; d < f; d++)
                                c[d] = h(D, d, a[d])
                        } else if (a)
                            for (d in c = {}, a)
                                a.hasOwnProperty(d) && (c[d] = h(D, d, a[d]));
                        return c
                    }, l);
                    n && e.$watchCollection(function() {
                        return g.$modelValue
                    }, l)
                }
                if (k[1]) {
                    var q = k[0];
                    k = k[1];
                    var n = h.multiple, s = h.ngOptions, v=!1, u, x=!1, B = y(U.createElement("option")),
                    H = y(U.createElement("optgroup")), z = B.clone();
                    h = 0;
                    for (var F = g.children(), w = F.length; h < w; h++)
                        if ("" === F[h].value) {
                            u = v = F.eq(h);
                            break
                        }
                    q.init(k, v, z);
                    n && (k.$isEmpty = function(a) {
                        return !a || 0 === a.length
                    });
                    s ? p(e, g, k) : n ? m(e, g, k) : l(e, g, k, q)
                }
            }
        }
    }
    ], Wd = ["$interpolate", function(a) {
        var c = {
            addOption: w,
            removeOption: w
        };
        return {
            restrict: "E",
            priority: 100,
            compile: function(d, e) {
                if (D(e.value)) {
                    var f = a(d.text(), !0);
                    f || e.$set("value", d.text())
                }
                return function(a, d, e) {
                    var l = d.parent(), m = l.data("$selectController") || l.parent().data("$selectController");
                    m && m.databound || (m = c);
                    f ? a.$watch(f, function(a, c) {
                        e.$set("value", a);
                        c !== a && m.removeOption(c);
                        m.addOption(a, d)
                    }) : m.addOption(e.value, d);
                    d.on("$destroy", function() {
                        m.removeOption(e.value)
                    })
                }
            }
        }
    }
    ], Vd = ba({
        restrict: "E",
        terminal: !1
    });
    T.angular.bootstrap ? console.log("WARNING: Tried to load angular more than once.") : (Ld(), Nd(va), y(U).ready(function() {
        Hd(U, sc)
    }))
})(window, document);
!window.angular.$$csp() && window.angular.element(document).find("head").prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}</style>');
//# sourceMappingURL=angular.min.js.map
;
/**
 * Enhanced Select2 Dropmenus
 *
 * @AJAX Mode - When in this mode, your value will be an object (or array of objects) of the data used by Select2
 *     This change is so that you do not have to do an additional query yourself on top of Select2's own query
 * @params [options] {object} The configuration options passed to $.fn.select2(). Refer to the documentation
 */
angular.module('ui.select2', []).value('uiSelect2Config', {}).directive('uiSelect2', ['uiSelect2Config', '$timeout', function (uiSelect2Config, $timeout) {
    var options = {};
    if (uiSelect2Config) {
        angular.extend(options, uiSelect2Config);
    }
    return {
        require: 'ngModel',
        priority: 1,
        compile: function (tElm, tAttrs) {
            var watch,
            repeatOption,
            repeatAttr,
            isSelect = tElm.is('select'),
            isMultiple = angular.isDefined(tAttrs.multiple);

            // Enable watching of the options dataset if in use
            if (tElm.is('select')) {
                repeatOption = tElm.find( 'optgroup[ng-repeat], optgroup[data-ng-repeat], option[ng-repeat], option[data-ng-repeat]');

                if (repeatOption.length) {
                    repeatAttr = repeatOption.attr('ng-repeat') || repeatOption.attr('data-ng-repeat');
                    watch = jQuery.trim(repeatAttr.split('|')[0]).split(' ').pop();
                }
            }

            return function (scope, elm, attrs, controller) {
                // instance-specific options
                var opts = angular.extend({}, options, scope.$eval(attrs.uiSelect2));

                /*
                        Convert from Select2 view-model to Angular view-model.
                        */
                var convertToAngularModel = function(select2_data) {
                    var model;
                    if (opts.simple_tags) {
                        model = [];
                        angular.forEach(select2_data, function(value, index) {
                            model.push(value.id);
                        });
                    } else {
                        model = select2_data;
                    }
                    return model;
                };

                /*
                        Convert from Angular view-model to Select2 view-model.
                        */
                var convertToSelect2Model = function(angular_data) {
                    var model = [];
                    if (!angular_data) {
                        return model;
                    }

                    if (opts.simple_tags) {
                        model = [];
                        angular.forEach(
                        angular_data,
                        function(value, index) {
                            model.push({
                                'id': value,
                                'text': value
                            });
                        });
                    } else {
                        model = angular_data;
                    }
                    return model;
                };

                if (isSelect) {
                    // Use <select multiple> instead
                    delete opts.multiple;
                    delete opts.initSelection;
                } else if (isMultiple) {
                    opts.multiple = true;
                }

                if (controller) {
                    // Watch the model for programmatic changes
                    scope.$watch(tAttrs.ngModel, function(current, old) {
                        if (!current) {
                            return;
                        }
                        if (current === old) {
                            return;
                        }
                        controller.$render();
                    }, true);
                    controller.$render = function () {
                        if (isSelect) {
                            elm.select2('val', controller.$viewValue);
                        } else {
                            if (opts.multiple) {
                                controller.$isEmpty = function (value) {
                                    return !value || value.length === 0;
                                };
                                var viewValue = controller.$viewValue;
                                if (angular.isString(viewValue)) {
                                    viewValue = viewValue.split(',');
                                }
                                elm.select2(
                                'data', convertToSelect2Model(viewValue));
                                if (opts.sortable) {
                                    elm.select2("container").find("ul.select2-choices").sortable({
                                        containment: 'parent',
                                        start: function () {
                                            elm.select2("onSortStart");
                                        },
                                        update: function () {
                                            elm.select2("onSortEnd");
                                            elm.trigger('change');
                                        }
                                    });
                                }
                            } else {
                                if (angular.isObject(controller.$viewValue)) {
                                    elm.select2('data', controller.$viewValue);
                                } else if (!controller.$viewValue) {
                                    elm.select2('data', null);
                                } else {
                                    elm.select2('val', controller.$viewValue);
                                }
                            }
                        }
                    };

                    // Watch the options dataset for changes
                    if (watch) {
                        scope.$watch(watch, function (newVal, oldVal, scope) {
                            if (angular.equals(newVal, oldVal)) {
                                return;
                            }
                            // Delayed so that the options have time to be rendered
                            $timeout(function () {
                                elm.select2('val', controller.$viewValue);
                                // Refresh angular to remove the superfluous option
                                controller.$render();
                                if (newVal && !oldVal && controller.$setPristine) {
                                    controller.$setPristine(true);
                                }
                            });
                        });
                    }

                    // Update valid and dirty statuses
                    controller.$parsers.push(function (value) {
                        var div = elm.prev();
                        div
                        .toggleClass('ng-invalid', !controller.$valid)
                        .toggleClass('ng-valid', controller.$valid)
                        .toggleClass('ng-invalid-required', !controller.$valid)
                        .toggleClass('ng-valid-required', controller.$valid)
                        .toggleClass('ng-dirty', controller.$dirty)
                        .toggleClass('ng-pristine', controller.$pristine);
                        return value;
                    });

                    if (!isSelect) {
                        // Set the view and model value and update the angular template manually for the ajax/multiple select2.
                        elm.bind("change", function (e) {
                            e.stopImmediatePropagation();

                            if (scope.$$phase || scope.$root.$$phase) {
                                return;
                            }
                            scope.$apply(function () {
                                controller.$setViewValue(
                                convertToAngularModel(elm.select2('data')));
                            });
                        });

                        if (opts.initSelection) {
                            var initSelection = opts.initSelection;
                            opts.initSelection = function (element, callback) {
                                initSelection(element, function (value) {
                                    var isPristine = controller.$pristine;
                                    controller.$setViewValue(convertToAngularModel(value));
                                    callback(value);
                                    if (isPristine) {
                                        controller.$setPristine();
                                    }
                                    elm.prev().toggleClass('ng-pristine', controller.$pristine);
                                });
                            };
                        }
                    }
                }

                elm.bind("$destroy", function() {
                    elm.select2("destroy");
                });

                attrs.$observe('disabled', function (value) {
                    elm.select2('enable', !value);
                });

                attrs.$observe('readonly', function (value) {
                    elm.select2('readonly', !!value);
                });

                if (attrs.ngMultiple) {
                    scope.$watch(attrs.ngMultiple, function(newVal) {
                        attrs.$set('multiple', !!newVal);
                        elm.select2(opts);
                    });
                }

                // Initialize the plugin late so that the injected DOM does not disrupt the template compiler
                $timeout(function () {
                    elm.select2(opts);

                    // Set initial value - I'm not sure about this but it seems to need to be there
                    elm.select2('data', controller.$modelValue);
                    // important!
                    controller.$render();

                    // Not sure if I should just check for !isSelect OR if I should check for 'tags' key
                    if (!opts.initSelection && !isSelect) {
                        var isPristine = controller.$pristine;
                        controller.$pristine = false;
                        controller.$setViewValue(
                        convertToAngularModel(elm.select2('data'))
                        );
                        if (isPristine) {
                            controller.$setPristine();
                        }
                        elm.prev().toggleClass('ng-pristine', controller.$pristine);
                    }
                });
            };
        }
    };
}
]);;
/*
 AngularJS v1.3.3
 (c) 2010-2014 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(p, d, C) {
    'use strict';
    function v(r, h, g) {
        return {
            restrict: "ECA",
            terminal: !0,
            priority: 400,
            transclude: "element",
            link: function(a, c, b, f, y) {
                function z() {
                    k && (g.cancel(k), k = null);
                    l && (l.$destroy(), l = null);
                    m && (k = g.leave(m), k.then(function() {
                        k = null
                    }), m = null)
                }
                function x() {
                    var b = r.current && r.current.locals;
                    if (d.isDefined(b && b.$template)) {
                        var b = a.$new(), f = r.current;
                        m = y(b, function(b) {
                            g.enter(b, null, m || c).then(function() {
                                !d.isDefined(t) || t&&!a.$eval(t) || h()
                            });
                            z()
                        });
                        l = f.scope = b;
                        l.$emit("$viewContentLoaded");
                        l.$eval(w)
                    } else
                        z()
                }
                var l, m, k, t = b.autoscroll, w = b.onload || "";
                a.$on("$routeChangeSuccess", x);
                x()
            }
        }
    }
    function A(d, h, g) {
        return {
            restrict: "ECA",
            priority: - 400,
            link: function(a, c) {
                var b = g.current, f = b.locals;
                c.html(f.$template);
                var y = d(c.contents());
                b.controller && (f.$scope = a, f = h(b.controller, f), b.controllerAs && (a[b.controllerAs] = f), c.data("$ngControllerController", f), c.children().data("$ngControllerController", f));
                y(a)
            }
        }
    }
    p = d.module("ngRoute", ["ng"]).provider("$route", function() {
        function r(a, c) {
            return d.extend(new (d.extend(function() {},
            {
                prototype: a
            })), c)
        }
        function h(a, d) {
            var b = d.caseInsensitiveMatch, f = {
                originalPath: a,
                regexp: a
            }, g = f.keys = [];
            a = a.replace(/([().])/g, "\\$1").replace(/(\/)?:(\w+)([\?\*])?/g, function(a, d, b, c) {
                a = "?" === c ? c : null;
                c = "*" === c ? c : null;
                g.push({
                    name: b,
                    optional: !!a
                });
                d = d || "";
                return "" + (a ? "" : d) + "(?:" + (a ? d : "") + (c && "(.+?)" || "([^/]+)") + (a || "") + ")" + (a || "")
            }).replace(/([\/$\*])/g, "\\$1");
            f.regexp = new RegExp("^" + a + "$", b ? "i" : "");
            return f
        }
        var g = {};
        this.when = function(a, c) {
            var b = d.copy(c);
            d.isUndefined(b.reloadOnSearch) && (b.reloadOnSearch =
            !0);
            d.isUndefined(b.caseInsensitiveMatch) && (b.caseInsensitiveMatch = this.caseInsensitiveMatch);
            g[a] = d.extend(b, a && h(a, b));
            if (a) {
                var f = "/" == a[a.length - 1] ? a.substr(0, a.length - 1): a + "/";
                g[f] = d.extend({
                    redirectTo: a
                }, h(f, b))
            }
            return this
        };
        this.caseInsensitiveMatch=!1;
        this.otherwise = function(a) {
            "string" === typeof a && (a = {
                redirectTo: a
            });
            this.when(null, a);
            return this
        };
        this.$get = ["$rootScope", "$location", "$routeParams", "$q", "$injector", "$templateRequest", "$sce", function(a, c, b, f, h, p, x) {
            function l(b) {
                var e = s.current;
                (v = (n = k()) && e && n.$$route === e.$$route && d.equals(n.pathParams, e.pathParams)&&!n.reloadOnSearch&&!w) ||!e&&!n || a.$broadcast("$routeChangeStart", n, e).defaultPrevented && b && b.preventDefault()
            }
            function m() {
                var u = s.current, e = n;
                if (v)
                    u.params = e.params, d.copy(u.params, b), a.$broadcast("$routeUpdate", u);
                else if (e || u)
                    w=!1, (s.current = e) && e.redirectTo && (d.isString(e.redirectTo) ? c.path(t(e.redirectTo, e.params)).search(e.params).replace() : c.url(e.redirectTo(e.pathParams, c.path(), c.search())).replace()), f.when(e).then(function() {
                        if (e) {
                            var a =
                            d.extend({}, e.resolve), b, c;
                            d.forEach(a, function(b, e) {
                                a[e] = d.isString(b) ? h.get(b) : h.invoke(b, null, null, e)
                            });
                            d.isDefined(b = e.template) ? d.isFunction(b) && (b = b(e.params)) : d.isDefined(c = e.templateUrl) && (d.isFunction(c) && (c = c(e.params)), c = x.getTrustedResourceUrl(c), d.isDefined(c) && (e.loadedTemplateUrl = c, b = p(c)));
                            d.isDefined(b) && (a.$template = b);
                            return f.all(a)
                        }
                    }).then(function(c) {
                        e == s.current && (e && (e.locals = c, d.copy(e.params, b)), a.$broadcast("$routeChangeSuccess", e, u))
                    }, function(b) {
                        e == s.current && a.$broadcast("$routeChangeError",
                        e, u, b)
                    })
            }
            function k() {
                var a, b;
                d.forEach(g, function(f, g) {
                    var q;
                    if (q=!b) {
                        var h = c.path();
                        q = f.keys;
                        var l = {};
                        if (f.regexp)
                            if (h = f.regexp.exec(h)) {
                                for (var k = 1, m = h.length; k < m; ++k) {
                                    var n = q[k - 1], p = h[k];
                                    n && p && (l[n.name] = p)
                                }
                                q = l
                            } else
                                q = null;
                        else
                            q = null;
                        q = a = q
                    }
                    q && (b = r(f, {
                        params: d.extend({}, c.search(), a),
                        pathParams: a
                    }), b.$$route = f)
                });
                return b || g[null] && r(g[null], {
                    params: {},
                    pathParams: {}
                })
            }
            function t(a, b) {
                var c = [];
                d.forEach((a || "").split(":"), function(a, d) {
                    if (0 === d)
                        c.push(a);
                    else {
                        var f = a.match(/(\w+)(.*)/), g = f[1];
                        c.push(b[g]);
                        c.push(f[2] || "");
                        delete b[g]
                    }
                });
                return c.join("")
            }
            var w=!1, n, v, s = {
                routes: g,
                reload: function() {
                    w=!0;
                    a.$evalAsync(function() {
                        l();
                        m()
                    })
                },
                updateParams: function(a) {
                    if (this.current && this.current.$$route) {
                        var b = {}, f = this;
                        d.forEach(Object.keys(a), function(c) {
                            f.current.pathParams[c] || (b[c] = a[c])
                        });
                        a = d.extend({}, this.current.params, a);
                        c.path(t(this.current.$$route.originalPath, a));
                        c.search(d.extend({}, c.search(), b))
                    } else
                        throw B("norout");
                }
            };
            a.$on("$locationChangeStart", l);
            a.$on("$locationChangeSuccess",
            m);
            return s
        }
        ]
    });
    var B = d.$$minErr("ngRoute");
    p.provider("$routeParams", function() {
        this.$get = function() {
            return {}
        }
    });
    p.directive("ngView", v);
    p.directive("ngView", A);
    v.$inject = ["$route", "$anchorScroll", "$animate"];
    A.$inject = ["$compile", "$controller", "$route"]
})(window, window.angular);
//# sourceMappingURL=angular-route.min.js.map
;
/*
 AngularJS v1.3.3
 (c) 2010-2014 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(M, f, S) {
    'use strict';
    f.module("ngAnimate", ["ng"]).directive("ngAnimateChildren", function() {
        return function(T, B, k) {
            k = k.ngAnimateChildren;
            f.isString(k) && 0 === k.length ? B.data("$$ngAnimateChildren", !0) : T.$watch(k, function(f) {
                B.data("$$ngAnimateChildren", !!f)
            })
        }
    }).factory("$$animateReflow", ["$$rAF", "$document", function(f, B) {
        return function(k) {
            return f(function() {
                k()
            })
        }
    }
    ]).config(["$provide", "$animateProvider", function(T, B) {
        function k(f) {
            for (var g = 0; g < f.length; g++) {
                var k = f[g];
                if (1 == k.nodeType)
                    return k
            }
        }
        function N(f, g) {
            return k(f) == k(g)
        }
        var s = f.noop, g = f.forEach, ba = B.$$selectors, $ = f.isArray, ca = f.isString, da = f.isObject, t = {
            running: !0
        };
        T.decorator("$animate", ["$delegate", "$$q", "$injector", "$sniffer", "$rootElement", "$$asyncCallback", "$rootScope", "$document", "$templateRequest", function(O, M, I, U, x, C, P, S, V) {
            function A(a, c) {
                var b = a.data("$$ngAnimateState") || {};
                c && (b.running=!0, b.structural=!0, a.data("$$ngAnimateState", b));
                return b.disabled || b.running && b.structural
            }
            function z(a) {
                var c, b = M.defer();
                b.promise.$$cancelFn =
                function() {
                    c && c()
                };
                P.$$postDigest(function() {
                    c = a(function() {
                        b.resolve()
                    })
                });
                return b.promise
            }
            function J(a) {
                if (da(a))
                    return a.tempClasses && ca(a.tempClasses) && (a.tempClasses = a.tempClasses.split(/\s+/)), a
            }
            function W(a, c, b) {
                b = b || {};
                var e = {};
                g(b, function(a, d) {
                    g(d.split(" "), function(d) {
                        e[d] = a
                    })
                });
                var m = Object.create(null);
                g((a.attr("class") || "").split(/\s+/), function(a) {
                    m[a]=!0
                });
                var f = [], k = [];
                g(c && c.classes || [], function(a, d) {
                    var b = m[d], c = e[d] || {};
                    !1 === a ? (b || "addClass" == c.event) && k.push(d) : !0 === a && (b &&
                    "removeClass" != c.event || f.push(d))
                });
                return 0 < f.length + k.length && [f.join(" "), k.join(" ")]
            }
            function Q(a) {
                if (a) {
                    var c = [], b = {};
                    a = a.substr(1).split(".");
                    (U.transitions || U.animations) && c.push(I.get(ba[""]));
                    for (var e = 0; e < a.length; e++) {
                        var f = a[e], k = ba[f];
                        k&&!b[f] && (c.push(I.get(k)), b[f]=!0)
                    }
                    return c
                }
            }
            function R(a, c, b, e) {
                function m(a, d) {
                    var b = a[d], c = a["before" + d.charAt(0).toUpperCase() + d.substr(1)];
                    if (b || c)
                        return "leave" == d && (c = b, b = null), l.push({
                            event: d,
                            fn: b
                        }), H.push({
                            event: d,
                            fn: c
                        }), !0
                }
                function k(c, h, G) {
                    var w =
                    [];
                    g(c, function(a) {
                        a.fn && w.push(a)
                    });
                    var f = 0;
                    g(w, function(c, n) {
                        var u = function() {
                            a: {
                                if (h) {
                                    (h[n] || s)();
                                    if (++f < w.length)
                                        break a;
                                    h = null
                                }
                                G()
                            }
                        };
                        switch (c.event) {
                        case "setClass":
                            h.push(c.fn(a, F, d, u, e));
                            break;
                        case "animate":
                            h.push(c.fn(a, b, e.from, e.to, u));
                            break;
                        case "addClass":
                            h.push(c.fn(a, F || b, u, e));
                            break;
                        case "removeClass":
                            h.push(c.fn(a, d || b, u, e));
                            break;
                        default:
                            h.push(c.fn(a, u, e))
                        }
                    });
                    h && 0 === h.length && G()
                }
                var p = a[0];
                if (p) {
                    e && (e.to = e.to || {}, e.from = e.from || {});
                    var F, d;
                    $(b) && (F = b[0], d = b[1], F ? d ? b = F + " " + d : (b =
                    F, c = "addClass") : (b = d, c = "removeClass"));
                    var h = "setClass" == c, G = h || "addClass" == c || "removeClass" == c || "animate" == c, w = a.attr("class") + " " + b;
                    if (X(w)) {
                        var u = s, n = [], H = [], q = s, r = [], l = [], w = (" " + w).replace(/\s+/g, ".");
                        g(Q(w), function(a) {
                            !m(a, c) && h && (m(a, "addClass"), m(a, "removeClass"))
                        });
                        return {
                            node: p,
                            event: c,
                            className: b,
                            isClassBased: G,
                            isSetClassOperation: h,
                            applyStyles: function() {
                                e && a.css(f.extend(e.from || {}, e.to || {}))
                            },
                            before: function(a) {
                                u = a;
                                k(H, n, function() {
                                    u = s;
                                    a()
                                })
                            },
                            after: function(a) {
                                q = a;
                                k(l, r, function() {
                                    q =
                                    s;
                                    a()
                                })
                            },
                            cancel: function() {
                                n && (g(n, function(a) {
                                    (a || s)(!0)
                                }), u(!0));
                                r && (g(r, function(a) {
                                    (a || s)(!0)
                                }), q(!0))
                            }
                        }
                    }
                }
            }
            function y(a, c, b, e, m, k, p, F) {
                function d(d) {
                    var h = "$animate:" + d;
                    H && H[h] && 0 < H[h].length && C(function() {
                        b.triggerHandler(h, {
                            event: a,
                            className: c
                        })
                    })
                }
                function h() {
                    d("before")
                }
                function G() {
                    d("after")
                }
                function w() {
                    w.hasBeenRun || (w.hasBeenRun=!0, k())
                }
                function u() {
                    if (!u.hasBeenRun) {
                        n && n.applyStyles();
                        u.hasBeenRun=!0;
                        p && p.tempClasses && g(p.tempClasses, function(a) {
                            b.removeClass(a)
                        });
                        var h = b.data("$$ngAnimateState");
                        h && (n && n.isClassBased ? l(b, c) : (C(function() {
                            var d = b.data("$$ngAnimateState") || {};
                            v == d.index && l(b, c, a)
                        }), b.data("$$ngAnimateState", h)));
                        d("close");
                        F()
                    }
                }
                var n = R(b, a, c, p);
                if (!n)
                    return w(), h(), G(), u(), s;
                a = n.event;
                c = n.className;
                var H = f.element._data(n.node), H = H && H.events;
                e || (e = m ? m.parent() : b.parent());
                if (Y(b, e))
                    return w(), h(), G(), u(), s;
                e = b.data("$$ngAnimateState") || {};
                var q = e.active || {}, r = e.totalActive || 0, t = e.last;
                m=!1;
                if (0 < r) {
                    r = [];
                    if (n.isClassBased)
                        "setClass" == t.event ? (r.push(t), l(b, c)) : q[c] && (aa = q[c],
                        aa.event == a ? m=!0 : (r.push(aa), l(b, c)));
                    else if ("leave" == a && q["ng-leave"])
                        m=!0;
                    else {
                        for (var aa in q)
                            r.push(q[aa]);
                        e = {};
                        l(b, !0)
                    }
                    0 < r.length && g(r, function(a) {
                        a.cancel()
                    })
                }
                !n.isClassBased || n.isSetClassOperation || "animate" == a || m || (m = "addClass" == a == b.hasClass(c));
                if (m)
                    return w(), h(), G(), d("close"), F(), s;
                q = e.active || {};
                r = e.totalActive || 0;
                if ("leave" == a)
                    b.one("$destroy", function(a) {
                        a = f.element(this);
                        var d = a.data("$$ngAnimateState");
                        d && (d = d.active["ng-leave"]) && (d.cancel(), l(a, "ng-leave"))
                    });
                b.addClass("ng-animate");
                p && p.tempClasses && g(p.tempClasses, function(a) {
                    b.addClass(a)
                });
                var v = Z++;
                r++;
                q[c] = n;
                b.data("$$ngAnimateState", {
                    last: n,
                    active: q,
                    index: v,
                    totalActive: r
                });
                h();
                n.before(function(d) {
                    var h = b.data("$$ngAnimateState");
                    d = d ||!h ||!h.active[c] || n.isClassBased && h.active[c].event != a;
                    w();
                    !0 === d ? u() : (G(), n.after(u))
                });
                return n.cancel
            }
            function K(a) {
                if (a = k(a))
                    a = f.isFunction(a.getElementsByClassName) ? a.getElementsByClassName("ng-animate") : a.querySelectorAll(".ng-animate"), g(a, function(a) {
                        a = f.element(a);
                        (a = a.data("$$ngAnimateState")) &&
                        a.active && g(a.active, function(a) {
                            a.cancel()
                        })
                    })
            }
            function l(a, c) {
                if (N(a, x))
                    t.disabled || (t.running=!1, t.structural=!1);
                else if (c) {
                    var b = a.data("$$ngAnimateState") || {}, e=!0 === c;
                    !e && b.active && b.active[c] && (b.totalActive--, delete b.active[c]);
                    if (e ||!b.totalActive)
                        a.removeClass("ng-animate"), a.removeData("$$ngAnimateState")
                }
            }
            function Y(a, c) {
                if (t.disabled)
                    return !0;
                if (N(a, x))
                    return t.running;
                var b, e, k;
                do {
                    if (0 === c.length)
                        break;
                    var g = N(c, x), p = g ? t: c.data("$$ngAnimateState") || {};
                    if (p.disabled)
                        return !0;
                    g && (k =
                    !0);
                    !1 !== b && (g = c.data("$$ngAnimateChildren"), f.isDefined(g) && (b = g));
                    e = e || p.running || p.last&&!p.last.isClassBased
                }
                while (c = c.parent());
                return !k ||!b && e
            }
            x.data("$$ngAnimateState", t);
            var L = P.$watch(function() {
                return V.totalPendingRequests
            }, function(a, c) {
                0 === a && (L(), P.$$postDigest(function() {
                    P.$$postDigest(function() {
                        t.running=!1
                    })
                }))
            }), Z = 0, E = B.classNameFilter(), X = E ? function(a) {
                return E.test(a)
            }
            : function() {
                return !0
            };
            return {
                animate: function(a, c, b, e, g) {
                    e = e || "ng-inline-animate";
                    g = J(g) || {};
                    g.from = b ? c : null;
                    g.to = b ? b : c;
                    return z(function(b) {
                        return y("animate", e, f.element(k(a)), null, null, s, g, b)
                    })
                },
                enter: function(a, c, b, e) {
                    e = J(e);
                    a = f.element(a);
                    c = c && f.element(c);
                    b = b && f.element(b);
                    A(a, !0);
                    O.enter(a, c, b);
                    return z(function(g) {
                        return y("enter", "ng-enter", f.element(k(a)), c, b, s, e, g)
                    })
                },
                leave: function(a, c) {
                    c = J(c);
                    a = f.element(a);
                    K(a);
                    A(a, !0);
                    return z(function(b) {
                        return y("leave", "ng-leave", f.element(k(a)), null, null, function() {
                            O.leave(a)
                        }, c, b)
                    })
                },
                move: function(a, c, b, e) {
                    e = J(e);
                    a = f.element(a);
                    c = c && f.element(c);
                    b = b &&
                    f.element(b);
                    K(a);
                    A(a, !0);
                    O.move(a, c, b);
                    return z(function(g) {
                        return y("move", "ng-move", f.element(k(a)), c, b, s, e, g)
                    })
                },
                addClass: function(a, c, b) {
                    return this.setClass(a, c, [], b)
                },
                removeClass: function(a, c, b) {
                    return this.setClass(a, [], c, b)
                },
                setClass: function(a, c, b, e) {
                    e = J(e);
                    a = f.element(a);
                    a = f.element(k(a));
                    if (A(a))
                        return O.$$setClassImmediately(a, c, b, e);
                    var m, l = a.data("$$animateClasses"), p=!!l;
                    l || (l = {
                        classes: {}
                    });
                    m = l.classes;
                    c = $(c) ? c : c.split(" ");
                    g(c, function(a) {
                        a && a.length && (m[a]=!0)
                    });
                    b = $(b) ? b : b.split(" ");
                    g(b, function(a) {
                        a && a.length && (m[a]=!1)
                    });
                    if (p)
                        return e && l.options && (l.options = f.extend(l.options || {}, e)), l.promise;
                    a.data("$$animateClasses", l = {
                        classes: m,
                        options: e
                    });
                    return l.promise = z(function(b) {
                        var d = a.parent(), h = k(a), c = h.parentNode;
                        if (!c || c.$$NG_REMOVED || h.$$NG_REMOVED)
                            b();
                        else {
                            h = a.data("$$animateClasses");
                            a.removeData("$$animateClasses");
                            var c = a.data("$$ngAnimateState") || {}, e = W(a, h, c.active);
                            return e ? y("setClass", e, a, d, null, function() {
                                e[0] && O.$$addClassImmediately(a, e[0]);
                                e[1] && O.$$removeClassImmediately(a,
                                e[1])
                            }, h.options, b) : b()
                        }
                    })
                },
                cancel: function(a) {
                    a.$$cancelFn()
                },
                enabled: function(a, c) {
                    switch (arguments.length) {
                    case 2:
                        if (a)
                            l(c);
                        else {
                            var b = c.data("$$ngAnimateState") || {};
                            b.disabled=!0;
                            c.data("$$ngAnimateState", b)
                        }
                        break;
                    case 1:
                        t.disabled=!a;
                        break;
                    default:
                        a=!t.disabled
                    }
                    return !!a
                }
            }
        }
        ]);
        B.register("", ["$window", "$sniffer", "$timeout", "$$animateReflow", function(t, B, I, U) {
            function x() {
                e || (e = U(function() {
                    b = [];
                    e = null;
                    a = {}
                }))
            }
            function C(c, d) {
                e && e();
                b.push(d);
                e = U(function() {
                    g(b, function(a) {
                        a()
                    });
                    b = [];
                    e = null;
                    a =
                    {}
                })
            }
            function P(a, d) {
                var h = k(a);
                a = f.element(h);
                p.push(a);
                h = Date.now() + d;
                h <= N || (I.cancel(m), N = h, m = I(function() {
                    T(p);
                    p = []
                }, d, !1))
            }
            function T(a) {
                g(a, function(a) {
                    (a = a.data("$$ngAnimateCSS3Data")) && g(a.closeAnimationFns, function(a) {
                        a()
                    })
                })
            }
            function V(b, d) {
                var h = d ? a[d]: null;
                if (!h) {
                    var c = 0, e = 0, f = 0, k = 0;
                    g(b, function(a) {
                        if (1 == a.nodeType) {
                            a = t.getComputedStyle(a) || {};
                            c = Math.max(A(a[L + "Duration"]), c);
                            e = Math.max(A(a[L + "Delay"]), e);
                            k = Math.max(A(a[E + "Delay"]), k);
                            var d = A(a[E + "Duration"]);
                            0 < d && (d*=parseInt(a[E + "IterationCount"],
                            10) || 1);
                            f = Math.max(d, f)
                        }
                    });
                    h = {
                        total: 0,
                        transitionDelay: e,
                        transitionDuration: c,
                        animationDelay: k,
                        animationDuration: f
                    };
                    d && (a[d] = h)
                }
                return h
            }
            function A(a) {
                var d = 0;
                a = ca(a) ? a.split(/\s*,\s*/) : [];
                g(a, function(a) {
                    d = Math.max(parseFloat(a) || 0, d)
                });
                return d
            }
            function z(b, d, h, e) {
                b = 0 <= ["ng-enter", "ng-leave", "ng-move"].indexOf(h);
                var f, g = d.parent(), n = g.data("$$ngAnimateKey");
                n || (g.data("$$ngAnimateKey", ++c), n = c);
                f = n + "-" + k(d).getAttribute("class");
                var g = f + " " + h, n = a[g]?++a[g].total : 0, l = {};
                if (0 < n) {
                    var q = h + "-stagger",
                    l = f + " " + q;
                    (f=!a[l]) && d.addClass(q);
                    l = V(d, l);
                    f && d.removeClass(q)
                }
                d.addClass(h);
                var q = d.data("$$ngAnimateCSS3Data") || {}, r = V(d, g);
                f = r.transitionDuration;
                r = r.animationDuration;
                if (b && 0 === f && 0 === r)
                    return d.removeClass(h), !1;
                h = e || b && 0 < f;
                b = 0 < r && 0 < l.animationDelay && 0 === l.animationDuration;
                d.data("$$ngAnimateCSS3Data", {
                    stagger: l,
                    cacheKey: g,
                    running: q.running || 0,
                    itemIndex: n,
                    blockTransition: h,
                    closeAnimationFns: q.closeAnimationFns || []
                });
                g = k(d);
                h && (W(g, !0), e && d.css(e));
                b && (g.style[E + "PlayState"] = "paused");
                return !0
            }
            function J(a, d, b, c, e) {
                function f() {
                    d.off(C, l);
                    d.removeClass(q);
                    d.removeClass(r);
                    z && I.cancel(z);
                    K(d, b);
                    var a = k(d), c;
                    for (c in p)
                        a.style.removeProperty(p[c])
                }
                function l(a) {
                    a.stopPropagation();
                    var d = a.originalEvent || a;
                    a = d.$manualTimeStamp || d.timeStamp || Date.now();
                    d = parseFloat(d.elapsedTime.toFixed(3));
                    Math.max(a - B, 0) >= A && d >= x && c()
                }
                var m = k(d);
                a = d.data("$$ngAnimateCSS3Data");
                if ( - 1 != m.getAttribute("class").indexOf(b) && a) {
                    var q = "", r = "";
                    g(b.split(" "), function(a, d) {
                        var b = (0 < d ? " " : "") + a;
                        q += b + "-active";
                        r += b +
                        "-pending"
                    });
                    var p = [], t = a.itemIndex, v = a.stagger, s = 0;
                    if (0 < t) {
                        s = 0;
                        0 < v.transitionDelay && 0 === v.transitionDuration && (s = v.transitionDelay * t);
                        var y = 0;
                        0 < v.animationDelay && 0 === v.animationDuration && (y = v.animationDelay * t, p.push(Y + "animation-play-state"));
                        s = Math.round(100 * Math.max(s, y)) / 100
                    }
                    s || (d.addClass(q), a.blockTransition && W(m, !1));
                    var D = V(d, a.cacheKey + " " + q), x = Math.max(D.transitionDuration, D.animationDuration);
                    if (0 === x)
                        d.removeClass(q), K(d, b), c();
                    else {
                        !s && e && (D.transitionDuration || (d.css("transition", D.animationDuration +
                        "s linear all"), p.push("transition")), d.css(e));
                        var t = Math.max(D.transitionDelay, D.animationDelay), A = 1E3 * t;
                        0 < p.length && (v = m.getAttribute("style") || "", ";" !== v.charAt(v.length - 1) && (v += ";"), m.setAttribute("style", v + " "));
                        var B = Date.now(), C = X + " " + Z, t = 1E3 * (s + 1.5 * (t + x)), z;
                        0 < s && (d.addClass(r), z = I(function() {
                            z = null;
                            0 < D.transitionDuration && W(m, !1);
                            0 < D.animationDuration && (m.style[E + "PlayState"] = "");
                            d.addClass(q);
                            d.removeClass(r);
                            e && (0 === D.transitionDuration && d.css("transition", D.animationDuration + "s linear all"),
                            d.css(e), p.push("transition"))
                        }, 1E3 * s, !1));
                        d.on(C, l);
                        a.closeAnimationFns.push(function() {
                            f();
                            c()
                        });
                        a.running++;
                        P(d, t);
                        return f
                    }
                } else
                    c()
            }
            function W(a, d) {
                a.style[L + "Property"] = d ? "none" : ""
            }
            function Q(a, d, b, c) {
                if (z(a, d, b, c))
                    return function(a) {
                        a && K(d, b)
                    }
            }
            function R(a, d, b, c, e) {
                if (d.data("$$ngAnimateCSS3Data"))
                    return J(a, d, b, c, e);
                K(d, b);
                c()
            }
            function y(a, d, b, c, e) {
                var f = Q(a, d, b, e.from);
                if (f) {
                    var g = f;
                    C(d, function() {
                        g = R(a, d, b, c, e.to)
                    });
                    return function(a) {
                        (g || s)(a)
                    }
                }
                x();
                c()
            }
            function K(a, d) {
                a.removeClass(d);
                var b = a.data("$$ngAnimateCSS3Data");
                b && (b.running && b.running--, b.running && 0 !== b.running || a.removeData("$$ngAnimateCSS3Data"))
            }
            function l(a, d) {
                var b = "";
                a = $(a) ? a : a.split(/\s+/);
                g(a, function(a, c) {
                    a && 0 < a.length && (b += (0 < c ? " " : "") + a + d)
                });
                return b
            }
            var Y = "", L, Z, E, X;
            M.ontransitionend === S && M.onwebkittransitionend !== S ? (Y = "-webkit-", L = "WebkitTransition", Z = "webkitTransitionEnd transitionend") : (L = "transition", Z = "transitionend");
            M.onanimationend === S && M.onwebkitanimationend !== S ? (Y = "-webkit-", E = "WebkitAnimation",
            X = "webkitAnimationEnd animationend") : (E = "animation", X = "animationend");
            var a = {}, c = 0, b = [], e, m = null, N = 0, p = [];
            return {
                animate: function(a, d, b, c, e, f) {
                    f = f || {};
                    f.from = b;
                    f.to = c;
                    return y("animate", a, d, e, f)
                },
                enter: function(a, b, c) {
                    c = c || {};
                    return y("enter", a, "ng-enter", b, c)
                },
                leave: function(a, b, c) {
                    c = c || {};
                    return y("leave", a, "ng-leave", b, c)
                },
                move: function(a, b, c) {
                    c = c || {};
                    return y("move", a, "ng-move", b, c)
                },
                beforeSetClass: function(a, b, c, e, f) {
                    f = f || {};
                    b = l(c, "-remove") + " " + l(b, "-add");
                    if (f = Q("setClass", a, b, f.from))
                        return C(a,
                        e), f;
                    x();
                    e()
                },
                beforeAddClass: function(a, b, c, e) {
                    e = e || {};
                    if (b = Q("addClass", a, l(b, "-add"), e.from))
                        return C(a, c), b;
                    x();
                    c()
                },
                beforeRemoveClass: function(a, b, c, e) {
                    e = e || {};
                    if (b = Q("removeClass", a, l(b, "-remove"), e.from))
                        return C(a, c), b;
                    x();
                    c()
                },
                setClass: function(a, b, c, e, f) {
                    f = f || {};
                    c = l(c, "-remove");
                    b = l(b, "-add");
                    return R("setClass", a, c + " " + b, e, f.to)
                },
                addClass: function(a, b, c, e) {
                    e = e || {};
                    return R("addClass", a, l(b, "-add"), c, e.to)
                },
                removeClass: function(a, b, c, e) {
                    e = e || {};
                    return R("removeClass", a, l(b, "-remove"), c, e.to)
                }
            }
        }
        ])
    }
    ])
})(window,
window.angular);
//# sourceMappingURL=angular-animate.min.js.map
;
/*
 AngularJS v1.3.3
 (c) 2010-2014 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(p, g, q) {
    'use strict';
    function F(a) {
        var d = [];
        t(d, g.noop).chars(a);
        return d.join("")
    }
    function k(a) {
        var d = {};
        a = a.split(",");
        var c;
        for (c = 0; c < a.length; c++)
            d[a[c]]=!0;
        return d
    }
    function G(a, d) {
        function c(a, b, c, h) {
            b = g.lowercase(b);
            if (u[b])
                for (; f.last() && v[f.last()];)
                    e("", f.last());
            w[b] && f.last() == b && e("", b);
            (h = x[b]||!!h) || f.push(b);
            var n = {};
            c.replace(H, function(a, b, d, c, e) {
                n[b] = s(d || c || e || "")
            });
            d.start && d.start(b, n, h)
        }
        function e(a, b) {
            var c = 0, e;
            if (b = g.lowercase(b))
                for (c = f.length - 1; 0 <= c && f[c] != b; c--);
            if (0 <= c) {
                for (e = f.length - 1; e >= c; e--)
                    d.end && d.end(f[e]);
                f.length = c
            }
        }
        "string" !== typeof a && (a = null === a || "undefined" === typeof a ? "" : "" + a);
        var b, m, f = [], n = a, h;
        for (f.last = function() {
            return f[f.length - 1]
        }; a;) {
            h = "";
            m=!0;
            if (f.last() && y[f.last()])
                a = a.replace(new RegExp("(.*)<\\s*\\/\\s*" + f.last() + "[^>]*>", "i"), function(a, b) {
                    b = b.replace(I, "$1").replace(J, "$1");
                    d.chars && d.chars(s(b));
                    return ""
                }), e("", f.last());
            else {
                if (0 === a.indexOf("\x3c!--"))
                    b = a.indexOf("--", 4), 0 <= b && a.lastIndexOf("--\x3e", b) === b && (d.comment && d.comment(a.substring(4,
                    b)), a = a.substring(b + 3), m=!1);
                else if (z.test(a)) {
                    if (b = a.match(z))
                        a = a.replace(b[0], ""), m=!1
                } else if (K.test(a)) {
                    if (b = a.match(A))
                        a = a.substring(b[0].length), b[0].replace(A, e), m=!1
                } else
                    L.test(a) && ((b = a.match(B)) ? (b[4] && (a = a.substring(b[0].length), b[0].replace(B, c)), m=!1) : (h += "<", a = a.substring(1)));
                m && (b = a.indexOf("<"), h += 0 > b ? a : a.substring(0, b), a = 0 > b ? "" : a.substring(b), d.chars && d.chars(s(h)))
            }
            if (a == n)
                throw M("badparse", a);
            n = a
        }
        e()
    }
    function s(a) {
        if (!a)
            return "";
        var d = N.exec(a);
        a = d[1];
        var c = d[3];
        if (d = d[2])
            r.innerHTML =
            d.replace(/</g, "&lt;"), d = "textContent"in r ? r.textContent : r.innerText;
        return a + d + c
    }
    function C(a) {
        return a.replace(/&/g, "&amp;").replace(O, function(a) {
            var c = a.charCodeAt(0);
            a = a.charCodeAt(1);
            return "&#" + (1024 * (c - 55296) + (a - 56320) + 65536) + ";"
        }).replace(P, function(a) {
            return "&#" + a.charCodeAt(0) + ";"
        }).replace(/</g, "&lt;").replace(/>/g, "&gt;")
    }
    function t(a, d) {
        var c=!1, e = g.bind(a, a.push);
        return {
            start: function(a, m, f) {
                a = g.lowercase(a);
                !c && y[a] && (c = a);
                c ||!0 !== D[a] || (e("<"), e(a), g.forEach(m, function(c, f) {
                    var l =
                    g.lowercase(f), m = "img" === a && "src" === l || "background" === l;
                    !0 !== Q[l] ||!0 === E[l]&&!d(c, m) || (e(" "), e(f), e('="'), e(C(c)), e('"'))
                }), e(f ? "/>" : ">"))
            },
            end: function(a) {
                a = g.lowercase(a);
                c ||!0 !== D[a] || (e("</"), e(a), e(">"));
                a == c && (c=!1)
            },
            chars: function(a) {
                c || e(C(a))
            }
        }
    }
    var M = g.$$minErr("$sanitize"), B = /^<((?:[a-zA-Z])[\w:-]*)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*(>?)/, A = /^<\/\s*([\w:-]+)[^>]*>/, H = /([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g, L = /^</,
    K = /^<\//, I = /\x3c!--(.*?)--\x3e/g, z = /<!DOCTYPE([^>]*?)>/i, J = /<!\[CDATA\[(.*?)]]\x3e/g, O = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g, P = /([^\#-~| |!])/g, x = k("area,br,col,hr,img,wbr");
    p = k("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr");
    q = k("rp,rt");
    var w = g.extend({}, q, p), u = g.extend({}, p, k("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul")), v = g.extend({}, q, k("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var"));
    p = k("animate,animateColor,animateMotion,animateTransform,circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,set,stop,svg,switch,text,title,tspan,use");
    var y = k("script,style"), D = g.extend({}, x, u, v, w, p), E = k("background,cite,href,longdesc,src,usemap,xlink:href");
    p = k("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,target,title,type,valign,value,vspace,width");
    q = k("accent-height,accumulate,additive,alphabetic,arabic-form,ascent,attributeName,attributeType,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan");
    var Q = g.extend({}, E, q, p), r = document.createElement("pre"), N = /^(\s*)([\s\S]*?)(\s*)$/;
    g.module("ngSanitize", []).provider("$sanitize", function() {
        this.$get = ["$$sanitizeUri", function(a) {
            return function(d) {
                var c = [];
                G(d, t(c, function(c, b) {
                    return !/^unsafe/.test(a(c, b))
                }));
                return c.join("")
            }
        }
        ]
    });
    g.module("ngSanitize").filter("linky", ["$sanitize", function(a) {
        var d = /((ftp|https?):\/\/|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"]/, c = /^mailto:/;
        return function(e, b) {
            function m(a) {
                a && l.push(F(a))
            }
            function f(a,
            c) {
                l.push("<a ");
                g.isDefined(b) && (l.push('target="'), l.push(b), l.push('" '));
                l.push('href="');
                l.push(a);
                l.push('">');
                m(c);
                l.push("</a>")
            }
            if (!e)
                return e;
            for (var n, h = e, l = [], k, p; n = h.match(d);)
                k = n[0], n[2] == n[3] && (k = "mailto:" + k), p = n.index, m(h.substr(0, p)), f(k, n[0].replace(c, "")), h = h.substring(p + n[0].length);
            m(h);
            return a(l.join(""))
        }
    }
    ])
})(window, window.angular);
//# sourceMappingURL=angular-sanitize.min.js.map
;
/*
 AngularJS v1.3.3
 (c) 2010-2014 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(y, u, z) {
    'use strict';
    function s(h, k, p) {
        n.directive(h, ["$parse", "$swipe", function(d, e) {
            return function(l, m, f) {
                function g(a) {
                    if (!c)
                        return !1;
                    var b = Math.abs(a.y - c.y);
                    a = (a.x - c.x) * k;
                    return q && 75 > b && 0 < a && 30 < a && .3 > b / a
                }
                var b = d(f[h]), c, q, a = ["touch"];
                u.isDefined(f.ngSwipeDisableMouse) || a.push("mouse");
                e.bind(m, {
                    start: function(a, b) {
                        c = a;
                        q=!0
                    },
                    cancel: function(a) {
                        q=!1
                    },
                    end: function(a, c) {
                        g(a) && l.$apply(function() {
                            m.triggerHandler(p);
                            b(l, {
                                $event: c
                            })
                        })
                    }
                }, a)
            }
        }
        ])
    }
    var n = u.module("ngTouch", []);
    n.factory("$swipe",
    [function() {
        function h(d) {
            var e = d.touches && d.touches.length ? d.touches: [d];
            d = d.changedTouches && d.changedTouches[0] || d.originalEvent && d.originalEvent.changedTouches && d.originalEvent.changedTouches[0] || e[0].originalEvent || e[0];
            return {
                x: d.clientX,
                y: d.clientY
            }
        }
        function k(d, e) {
            var l = [];
            u.forEach(d, function(d) {
                (d = p[d][e]) && l.push(d)
            });
            return l.join(" ")
        }
        var p = {
            mouse: {
                start: "mousedown",
                move: "mousemove",
                end: "mouseup"
            },
            touch: {
                start: "touchstart",
                move: "touchmove",
                end: "touchend",
                cancel: "touchcancel"
            }
        };
        return {
            bind: function(d,
            e, l) {
                var m, f, g, b, c=!1;
                l = l || ["mouse", "touch"];
                d.on(k(l, "start"), function(a) {
                    g = h(a);
                    c=!0;
                    f = m = 0;
                    b = g;
                    e.start && e.start(g, a)
                });
                var q = k(l, "cancel");
                if (q)
                    d.on(q, function(a) {
                        c=!1;
                        e.cancel && e.cancel(a)
                    });
                d.on(k(l, "move"), function(a) {
                    if (c && g) {
                        var d = h(a);
                        m += Math.abs(d.x - b.x);
                        f += Math.abs(d.y - b.y);
                        b = d;
                        10 > m && 10 > f || (f > m ? (c=!1, e.cancel && e.cancel(a)) : (a.preventDefault(), e.move && e.move(d, a)))
                    }
                });
                d.on(k(l, "end"), function(a) {
                    c && (c=!1, e.end && e.end(h(a), a))
                })
            }
        }
    }
    ]);
    n.config(["$provide", function(h) {
        h.decorator("ngClickDirective",
        ["$delegate", function(k) {
            k.shift();
            return k
        }
        ])
    }
    ]);
    n.directive("ngClick", ["$parse", "$timeout", "$rootElement", function(h, k, p) {
        function d(b, c, d) {
            for (var a = 0; a < b.length; a += 2) {
                var e = b[a + 1], f = d;
                if (25 > Math.abs(b[a] - c) && 25 > Math.abs(e - f))
                    return b.splice(a, a + 2), !0
            }
            return !1
        }
        function e(b) {
            if (!(2500 < Date.now() - m)) {
                var c = b.touches && b.touches.length ? b.touches: [b], e = c[0].clientX, c = c[0].clientY;
                1 > e && 1 > c || g && g[0] === e && g[1] === c || (g && (g = null), "label" === b.target.tagName.toLowerCase() && (g = [e, c]), d(f, e, c) || (b.stopPropagation(),
                b.preventDefault(), b.target && b.target.blur()))
            }
        }
        function l(b) {
            b = b.touches && b.touches.length ? b.touches : [b];
            var c = b[0].clientX, d = b[0].clientY;
            f.push(c, d);
            k(function() {
                for (var a = 0; a < f.length; a += 2)
                    if (f[a] == c && f[a + 1] == d) {
                        f.splice(a, a + 2);
                        break
                    }
            }, 2500, !1)
        }
        var m, f, g;
        return function(b, c, g) {
            function a() {
                n=!1;
                c.removeClass("ng-click-active")
            }
            var k = h(g.ngClick), n=!1, r, s, v, w;
            c.on("touchstart", function(a) {
                n=!0;
                r = a.target ? a.target : a.srcElement;
                3 == r.nodeType && (r = r.parentNode);
                c.addClass("ng-click-active");
                s = Date.now();
                a = a.touches && a.touches.length ? a.touches : [a];
                a = a[0].originalEvent || a[0];
                v = a.clientX;
                w = a.clientY
            });
            c.on("touchmove", function(c) {
                a()
            });
            c.on("touchcancel", function(c) {
                a()
            });
            c.on("touchend", function(b) {
                var k = Date.now() - s, h = b.changedTouches && b.changedTouches.length ? b.changedTouches: b.touches && b.touches.length ? b.touches: [b], t = h[0].originalEvent || h[0], h = t.clientX, t = t.clientY, x = Math.sqrt(Math.pow(h - v, 2) + Math.pow(t - w, 2));
                n && 750 > k && 12 > x && (f || (p[0].addEventListener("click", e, !0), p[0].addEventListener("touchstart",
                l, !0), f = []), m = Date.now(), d(f, h, t), r && r.blur(), u.isDefined(g.disabled)&&!1 !== g.disabled || c.triggerHandler("click", [b]));
                a()
            });
            c.onclick = function(a) {};
            c.on("click", function(a, c) {
                b.$apply(function() {
                    k(b, {
                        $event: c || a
                    })
                })
            });
            c.on("mousedown", function(a) {
                c.addClass("ng-click-active")
            });
            c.on("mousemove mouseup", function(a) {
                c.removeClass("ng-click-active")
            })
        }
    }
    ]);
    s("ngSwipeLeft", - 1, "swipeleft");
    s("ngSwipeRight", 1, "swiperight")
})(window, window.angular);
//# sourceMappingURL=angular-touch.min.js.map
;
/*
 AngularJS v1.3.3
 (c) 2010-2014 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(p, f, n) {
    'use strict';
    f.module("ngCookies", ["ng"]).factory("$cookies", ["$rootScope", "$browser", function(e, b) {
        var c = {}, g = {}, h, k=!1, l = f.copy, m = f.isUndefined;
        b.addPollFn(function() {
            var a = b.cookies();
            h != a && (h = a, l(a, g), l(a, c), k && e.$apply())
        })();
        k=!0;
        e.$watch(function() {
            var a, d, e;
            for (a in g)
                m(c[a]) && b.cookies(a, n);
            for (a in c)
                d = c[a], f.isString(d) || (d = "" + d, c[a] = d), d !== g[a] && (b.cookies(a, d), e=!0);
            if (e)
                for (a in d = b.cookies(), c)
                    c[a] !== d[a] && (m(d[a]) ? delete c[a] : c[a] = d[a])
        });
        return c
    }
    ]).factory("$cookieStore",
    ["$cookies", function(e) {
        return {
            get: function(b) {
                return (b = e[b]) ? f.fromJson(b) : b
            },
            put: function(b, c) {
                e[b] = f.toJson(c)
            },
            remove: function(b) {
                delete e[b]
            }
        }
    }
    ])
})(window, window.angular);
//# sourceMappingURL=angular-cookies.min.js.map
;
var require_jocly = (function () {
    //Define a require object here that has any
    //default configuration you want for RequireJS. If
    //you do not have any config options you want to set,
    //just use an simple object literal, {}. You may need
    //to at least set baseUrl.
    var require = {
        baseUrl: './'
    };

    /** vim: et:ts=4:sw=4:sts=4
     * @license RequireJS 2.1.11+ Copyright (c) 2010-2014, The Dojo Foundation All Rights Reserved.
     * Available via the MIT or new BSD license.
     * see: http://github.com/jrburke/requirejs for details
     */
    //Not using strict: uneven strict support in browsers, #392, and causes
    //problems with requirejs.exec()/transpiler plugins that may not be strict.
    /*jslint regexp: true, nomen: true, sloppy: true */
    /*global window, navigator, document, importScripts, setTimeout, opera */

    var requirejs, require, define;
    (function (global) {
        var req, s, head, baseElement, dataMain, src,
        interactiveScript, currentlyAddingScript, mainScript, subPath,
        version = '2.1.11+',
        commentRegExp = /(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/mg,
        cjsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,
        jsSuffixRegExp = /\.js$/,
        currDirRegExp = /^\.\//,
        op = Object.prototype,
        ostring = op.toString,
        hasOwn = op.hasOwnProperty,
        ap = Array.prototype,
        apsp = ap.splice,
        isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document),
        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',
        //PS3 indicates loaded and complete, but need to wait for complete
        //specifically. Sequence is 'loading', 'loaded', execution,
        // then 'complete'. The UA check is unfortunate, but not sure how
        //to feature test w/o causing perf issues.
        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?
        /^complete$/ : /^(complete|loaded)$/,
        defContextName = '_',
        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.
        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',
        contexts = {},
        cfg = {},
        globalDefQueue = [],
        useInteractive = false;

        function isFunction(it) {
            return ostring.call(it) === '[object Function]';
        }

        function isArray(it) {
            return ostring.call(it) === '[object Array]';
        }

        /**
             * Helper function for iterating over an array. If the func returns
             * a true value, it will break out of the loop.
             */
        function each(ary, func) {
            if (ary) {
                var i;
                for (i = 0; i < ary.length; i += 1) {
                    if (ary[i] && func(ary[i], i, ary)) {
                        break;
                    }
                }
            }
        }

        /**
             * Helper function for iterating over an array backwards. If the func
             * returns a true value, it will break out of the loop.
             */
        function eachReverse(ary, func) {
            if (ary) {
                var i;
                for (i = ary.length - 1; i > - 1; i -= 1) {
                    if (ary[i] && func(ary[i], i, ary)) {
                        break;
                    }
                }
            }
        }

        function hasProp(obj, prop) {
            return hasOwn.call(obj, prop);
        }

        function getOwn(obj, prop) {
            return hasProp(obj, prop) && obj[prop];
        }

        /**
             * Cycles over properties in an object and calls a function for each
             * property value. If the function returns a truthy value, then the
             * iteration is stopped.
             */
        function eachProp(obj, func) {
            var prop;
            for (prop in obj) {
                if (hasProp(obj, prop)) {
                    if (func(obj[prop], prop)) {
                        break;
                    }
                }
            }
        }

        /**
             * Simple function to mix in properties from source into target,
             * but only if target does not already have a property of the same name.
             */
        function mixin(target, source, force, deepStringMixin) {
            if (source) {
                eachProp(source, function (value, prop) {
                    if (force || !hasProp(target, prop)) {
                        if (deepStringMixin && typeof value === 'object' && value &&
                        !isArray(value) && !isFunction(value) &&
                        !(value instanceof RegExp)) {

                            if (!target[prop]) {
                                target[prop] = {};
                            }
                            mixin(target[prop], value, force, deepStringMixin);
                        } else {
                            target[prop] = value;
                        }
                    }
                });
            }
            return target;
        }

        //Similar to Function.prototype.bind, but the 'this' object is specified
        //first, since it is easier to read/figure out what 'this' will be.
        function bind(obj, fn) {
            return function () {
                return fn.apply(obj, arguments);
            };
        }

        function scripts() {
            return document.getElementsByTagName('script');
        }

        function defaultOnError(err) {
            throw err;
        }

        //Allow getting a global that is expressed in
        //dot notation, like 'a.b.c'.
        function getGlobal(value) {
            if (!value) {
                return value;
            }
            var g = global;
            each(value.split('.'), function (part) {
                g = g[part];
            });
            return g;
        }

        /**
             * Constructs an error with a pointer to an URL with more information.
             * @param {String} id the error ID that maps to an ID on a web page.
             * @param {String} message human readable error.
             * @param {Error} [err] the original error, if there is one.
             *
             * @returns {Error}
             */
        function makeError(id, msg, err, requireModules) {
            var e = new Error(msg + '\nhttp://requirejs.org/docs/errors.html#' + id);
            e.requireType = id;
            e.requireModules = requireModules;
            if (err) {
                e.originalError = err;
            }
            return e;
        }

        if (typeof define !== 'undefined') {
            //If a define is already in play via another AMD loader,
            //do not overwrite.
            return;
        }

        if (typeof requirejs !== 'undefined') {
            if (isFunction(requirejs)) {
                //Do not overwrite an existing requirejs instance.
                return;
            }
            cfg = requirejs;
            requirejs = undefined;
        }

        //Allow for a require config object
        if (typeof require !== 'undefined' && !isFunction(require)) {
            //assume it is a config object.
            cfg = require;
            require = undefined;
        }

        function newContext(contextName) {
            var inCheckLoaded, Module, context, handlers,
            checkLoadedTimeoutId,
            config = {
                //Defaults. Do not set a default for map
                //config to speed up normalize(), which
                //will run faster if there is no default.
                waitSeconds: 28,
                // original is 7 seconds
                baseUrl: './',
                paths: {},
                bundles: {},
                pkgs: {},
                shim: {},
                config: {}
            },
            registry = {},
            //registry of just enabled modules, to speed
            //cycle breaking code when lots of modules
            //are registered, but not activated.
            enabledRegistry = {},
            undefEvents = {},
            defQueue = [],
            defined = {},
            urlFetched = {},
            bundlesMap = {},
            requireCounter = 1,
            unnormalizedCounter = 1;

            /**
                     * Trims the . and .. from an array of path segments.
                     * It will keep a leading path segment if a .. will become
                     * the first path segment, to help with module name lookups,
                     * which act like paths, but can be remapped. But the end result,
                     * all paths that use this function should look normalized.
                     * NOTE: this method MODIFIES the input array.
                     * @param {Array} ary the array of path segments.
                     */
            function trimDots(ary) {
                var i, part, length = ary.length;
                for (i = 0; i < length; i++) {
                    part = ary[i];
                    if (part === '.') {
                        ary.splice(i, 1);
                        i -= 1;
                    } else if (part === '..') {
                        if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            ary.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
            }

            /**
                     * Given a relative module name, like ./something, normalize it to
                     * a real name that can be mapped to a path.
                     * @param {String} name the relative name
                     * @param {String} baseName a real name that the name arg is relative
                     * to.
                     * @param {Boolean} applyMap apply the map config to the value. Should
                     * only be done if this normalization is for a dependency ID.
                     * @returns {String} normalized name
                     */
            function normalize(name, baseName, applyMap) {
                var pkgMain, mapValue, nameParts, i, j, nameSegment, lastIndex,
                foundMap, foundI, foundStarMap, starI,
                baseParts = baseName && baseName.split('/'),
                normalizedBaseParts = baseParts,
                map = config.map,
                starMap = map && map['*'];

                //Adjust any relative paths.
                if (name && name.charAt(0) === '.') {
                    //If have a base name, try to normalize against it,
                    //otherwise, assume it is a top-level require that will
                    //be relative to baseUrl in the end.
                    if (baseName) {
                        //Convert baseName to array, and lop off the last part,
                        //so that . matches that 'directory' and not name of the baseName's
                        //module. For instance, baseName of 'one/two/three', maps to
                        //'one/two/three.js', but we want the directory, 'one/two' for
                        //this normalization.
                        normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                        name = name.split('/');
                        lastIndex = name.length - 1;

                        // If wanting node ID compatibility, strip .js from end
                        // of IDs. Have to do this here, and not in nameToUrl
                        // because node allows either .js or non .js to map
                        // to same file.
                        if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                            name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                        }

                        name = normalizedBaseParts.concat(name);
                        trimDots(name);
                        name = name.join('/');
                    } else if (name.indexOf('./') === 0) {
                        // No baseName, so this is ID is resolved relative
                        // to baseUrl, pull off the leading dot.
                        name = name.substring(2);
                    }
                }

                //Apply map config if available.
                if (applyMap && map && (baseParts || starMap)) {
                    nameParts = name.split('/');

                    outerLoop:
                    for (i = nameParts.length; i > 0; i -= 1) {
                        nameSegment = nameParts.slice(0, i).join('/');

                        if (baseParts) {
                            //Find the longest baseName segment match in the config.
                            //So, do joins on the biggest to smallest lengths of baseParts.
                            for (j = baseParts.length; j > 0; j -= 1) {
                                mapValue = getOwn(map, baseParts.slice(0, j).join('/'));

                                //baseName segment has config, find if it has one for
                                //this name.
                                if (mapValue) {
                                    mapValue = getOwn(mapValue, nameSegment);
                                    if (mapValue) {
                                        //Match, update name to the new value.
                                        foundMap = mapValue;
                                        foundI = i;
                                        break outerLoop;
                                    }
                                }
                            }
                        }

                        //Check for a star map match, but just hold on to it,
                        //if there is a shorter segment match later in a matching
                        //config, then favor over this star map.
                        if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {
                            foundStarMap = getOwn(starMap, nameSegment);
                            starI = i;
                        }
                    }

                    if (!foundMap && foundStarMap) {
                        foundMap = foundStarMap;
                        foundI = starI;
                    }

                    if (foundMap) {
                        nameParts.splice(0, foundI, foundMap);
                        name = nameParts.join('/');
                    }
                }

                // If the name points to a package's name, use
                // the package main instead.
                pkgMain = getOwn(config.pkgs, name);

                return pkgMain ? pkgMain : name;
            }

            function removeScript(name) {
                if (isBrowser) {
                    each(scripts(), function (scriptNode) {
                        if (scriptNode.getAttribute('data-requiremodule') === name &&
                        scriptNode.getAttribute('data-requirecontext') === context.contextName) {
                            scriptNode.parentNode.removeChild(scriptNode);
                            return true;
                        }
                    });
                }
            }

            function hasPathFallback(id) {
                var pathConfig = getOwn(config.paths, id);
                if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {
                    //Pop off the first array value, since it failed, and
                    //retry
                    pathConfig.shift();
                    context.require.undef(id);

                    //Custom require that does not do map translation, since
                    //ID is "absolute", already mapped/resolved.
                    context.makeRequire(null, {
                        skipMap: true
                    })([id]);

                    return true;
                }
            }

            //Turns a plugin!resource to [plugin, resource]
            //with the plugin being undefined if the name
            //did not have a plugin prefix.
            function splitPrefix(name) {
                var prefix,
                index = name ? name.indexOf('!') : - 1;
                if (index > - 1) {
                    prefix = name.substring(0, index);
                    name = name.substring(index + 1, name.length);
                }
                return [prefix, name];
            }

            /**
                     * Creates a module mapping that includes plugin prefix, module
                     * name, and path. If parentModuleMap is provided it will
                     * also normalize the name via require.normalize()
                     *
                     * @param {String} name the module name
                     * @param {String} [parentModuleMap] parent module map
                     * for the module name, used to resolve relative names.
                     * @param {Boolean} isNormalized: is the ID already normalized.
                     * This is true if this call is done for a define() module ID.
                     * @param {Boolean} applyMap: apply the map config to the ID.
                     * Should only be true if this map is for a dependency.
                     *
                     * @returns {Object}
                     */
            function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {
                var url, pluginModule, suffix, nameParts,
                prefix = null,
                parentName = parentModuleMap ? parentModuleMap.name : null,
                originalName = name,
                isDefine = true,
                normalizedName = '';

                //If no name, then it means it is a require call, generate an
                //internal name.
                if (!name) {
                    isDefine = false;
                    name = '_@r' + (requireCounter += 1);
                }

                nameParts = splitPrefix(name);
                prefix = nameParts[0];
                name = nameParts[1];

                if (prefix) {
                    prefix = normalize(prefix, parentName, applyMap);
                    pluginModule = getOwn(defined, prefix);
                }

                //Account for relative paths if there is a base name.
                if (name) {
                    if (prefix) {
                        if (pluginModule && pluginModule.normalize) {
                            //Plugin is loaded, use its normalize method.
                            normalizedName = pluginModule.normalize(name, function (name) {
                                return normalize(name, parentName, applyMap);
                            });
                        } else {
                            normalizedName = normalize(name, parentName, applyMap);
                        }
                    } else {
                        //A regular module.
                        normalizedName = normalize(name, parentName, applyMap);

                        //Normalized name may be a plugin ID due to map config
                        //application in normalize. The map config values must
                        //already be normalized, so do not need to redo that part.
                        nameParts = splitPrefix(normalizedName);
                        prefix = nameParts[0];
                        normalizedName = nameParts[1];
                        isNormalized = true;

                        url = context.nameToUrl(normalizedName);
                    }
                }

                //If the id is a plugin id that cannot be determined if it needs
                //normalization, stamp it with a unique ID so two matching relative
                //ids that may conflict can be separate.
                suffix = prefix && !pluginModule && !isNormalized ?
                '_unnormalized' + (unnormalizedCounter += 1) :
                '';

                return {
                    prefix: prefix,
                    name: normalizedName,
                    parentMap: parentModuleMap,
                    unnormalized: !!suffix,
                    url: url,
                    originalName: originalName,
                    isDefine: isDefine,
                    id: (prefix ?
                    prefix + '!' + normalizedName :
                    normalizedName) + suffix
                };
            }

            function getModule(depMap) {
                var id = depMap.id,
                mod = getOwn(registry, id);

                if (!mod) {
                    mod = registry[id] = new context.Module(depMap);
                }

                return mod;
            }

            function on(depMap, name, fn) {
                var id = depMap.id,
                mod = getOwn(registry, id);

                if (hasProp(defined, id) &&
                (!mod || mod.defineEmitComplete)) {
                    if (name === 'defined') {
                        fn(defined[id]);
                    }
                } else {
                    mod = getModule(depMap);
                    if (mod.error && name === 'error') {
                        fn(mod.error);
                    } else {
                        mod.on(name, fn);
                    }
                }
            }

            function onError(err, errback) {
                var ids = err.requireModules,
                notified = false;

                if (errback) {
                    errback(err);
                } else {
                    each(ids, function (id) {
                        var mod = getOwn(registry, id);
                        if (mod) {
                            //Set error on module, so it skips timeout checks.
                            mod.error = err;
                            if (mod.events.error) {
                                notified = true;
                                mod.emit('error', err);
                            }
                        }
                    });

                    if (!notified) {
                        req.onError(err);
                    }
                }
            }

            /**
                     * Internal method to transfer globalQueue items to this context's
                     * defQueue.
                     */
            function takeGlobalQueue() {
                //Push all the globalDefQueue items into the context's defQueue
                if (globalDefQueue.length) {
                    //Array splice in the values since the context code has a
                    //local var ref to defQueue, so cannot just reassign the one
                    //on context.
                    apsp.apply(defQueue,
                    [defQueue.length, 0].concat(globalDefQueue));
                    globalDefQueue = [];
                }
            }

            handlers = {
                'require': function (mod) {
                    if (mod.require) {
                        return mod.require;
                    } else {
                        return (mod.require = context.makeRequire(mod.map));
                    }
                },
                'exports': function (mod) {
                    mod.usingExports = true;
                    if (mod.map.isDefine) {
                        if (mod.exports) {
                            return (defined[mod.map.id] = mod.exports);
                        } else {
                            return (mod.exports = defined[mod.map.id] = {});
                        }
                    }
                },
                'module': function (mod) {
                    if (mod.module) {
                        return mod.module;
                    } else {
                        return (mod.module = {
                            id: mod.map.id,
                            uri: mod.map.url,
                            config: function () {
                                return getOwn(config.config, mod.map.id) || {};
                            },
                            exports: mod.exports || (mod.exports = {})
                        });
                    }
                }
            };

            function cleanRegistry(id) {
                //Clean up machinery used for waiting modules.
                delete registry[id];
                delete enabledRegistry[id];
            }

            function breakCycle(mod, traced, processed) {
                var id = mod.map.id;

                if (mod.error) {
                    mod.emit('error', mod.error);
                } else {
                    traced[id] = true;
                    each(mod.depMaps, function (depMap, i) {
                        var depId = depMap.id,
                        dep = getOwn(registry, depId);

                        //Only force things that have not completed
                        //being defined, so still in the registry,
                        //and only if it has not been matched up
                        //in the module already.
                        if (dep && !mod.depMatched[i] && !processed[depId]) {
                            if (getOwn(traced, depId)) {
                                mod.defineDep(i, defined[depId]);
                                mod.check(); //pass false?
                            } else {
                                breakCycle(dep, traced, processed);
                            }
                        }
                    });
                    processed[id] = true;
                }
            }

            function checkLoaded() {
                var err, usingPathFallback,
                waitInterval = config.waitSeconds * 1000,
                //It is possible to disable the wait interval by using waitSeconds of 0.
                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),
                noLoads = [],
                reqCalls = [],
                stillLoading = false,
                needCycleCheck = true;

                //Do not bother if this call was a result of a cycle break.
                if (inCheckLoaded) {
                    return;
                }

                inCheckLoaded = true;

                //Figure out the state of all the modules.
                eachProp(enabledRegistry, function (mod) {
                    var map = mod.map,
                    modId = map.id;

                    //Skip things that are not enabled or in error state.
                    if (!mod.enabled) {
                        return;
                    }

                    if (!map.isDefine) {
                        reqCalls.push(mod);
                    }

                    if (!mod.error) {
                        //If the module should be executed, and it has not
                        //been inited and time is up, remember it.
                        if (!mod.inited && expired) {
                            if (hasPathFallback(modId)) {
                                usingPathFallback = true;
                                stillLoading = true;
                            } else {
                                noLoads.push(modId);
                                removeScript(modId);
                            }
                        } else if (!mod.inited && mod.fetched && map.isDefine) {
                            stillLoading = true;
                            if (!map.prefix) {
                                //No reason to keep looking for unfinished
                                //loading. If the only stillLoading is a
                                //plugin resource though, keep going,
                                //because it may be that a plugin resource
                                //is waiting on a non-plugin cycle.
                                return (needCycleCheck = false);
                            }
                        }
                    }
                });

                if (expired && noLoads.length) {
                    //If wait time expired, throw error of unloaded modules.
                    err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);
                    err.contextName = context.contextName;
                    return onError(err);
                }

                //Not expired, check for a cycle.
                if (needCycleCheck) {
                    each(reqCalls, function (mod) {
                        breakCycle(mod, {}, {});
                    });
                }

                //If still waiting on loads, and the waiting load is something
                //other than a plugin resource, or there are still outstanding
                //scripts, then just try back later.
                if ((!expired || usingPathFallback) && stillLoading) {
                    //Something is still waiting to load. Wait for it, but only
                    //if a timeout is not already in effect.
                    if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {
                        checkLoadedTimeoutId = setTimeout(function () {
                            checkLoadedTimeoutId = 0;
                            checkLoaded();
                        }, 50);
                    }
                }

                inCheckLoaded = false;
            }

            Module = function (map) {
                this.events = getOwn(undefEvents, map.id) || {};
                this.map = map;
                this.shim = getOwn(config.shim, map.id);
                this.depExports = [];
                this.depMaps = [];
                this.depMatched = [];
                this.pluginMaps = {};
                this.depCount = 0;

                /* this.exports this.factory
                               this.depMaps = [],
                               this.enabled, this.fetched
                            */
            };

            Module.prototype = {
                init: function (depMaps, factory, errback, options) {
                    options = options || {};

                    //Do not do more inits if already done. Can happen if there
                    //are multiple define calls for the same module. That is not
                    //a normal, common case, but it is also not unexpected.
                    if (this.inited) {
                        return;
                    }

                    this.factory = factory;

                    if (errback) {
                        //Register for errors on this module.
                        this.on('error', errback);
                    } else if (this.events.error) {
                        //If no errback already, but there are error listeners
                        //on this module, set up an errback to pass to the deps.
                        errback = bind(this, function (err) {
                            this.emit('error', err);
                        });
                    }

                    //Do a copy of the dependency array, so that
                    //source inputs are not modified. For example
                    //"shim" deps are passed in here directly, and
                    //doing a direct modification of the depMaps array
                    //would affect that config.
                    this.depMaps = depMaps && depMaps.slice(0);

                    this.errback = errback;

                    //Indicate this module has be initialized
                    this.inited = true;

                    this.ignore = options.ignore;

                    //Could have option to init this module in enabled mode,
                    //or could have been previously marked as enabled. However,
                    //the dependencies are not known until init is called. So
                    //if enabled previously, now trigger dependencies as enabled.
                    if (options.enabled || this.enabled) {
                        //Enable this module and dependencies.
                        //Will call this.check()
                        this.enable();
                    } else {
                        this.check();
                    }
                },

                defineDep: function (i, depExports) {
                    //Because of cycles, defined callback for a given
                    //export can be called more than once.
                    if (!this.depMatched[i]) {
                        this.depMatched[i] = true;
                        this.depCount -= 1;
                        this.depExports[i] = depExports;
                    }
                },

                fetch: function () {
                    if (this.fetched) {
                        return;
                    }
                    this.fetched = true;

                    context.startTime = (new Date()).getTime();

                    var map = this.map;

                    //If the manager is for a plugin managed resource,
                    //ask the plugin to load it now.
                    if (this.shim) {
                        context.makeRequire(this.map, {
                            enableBuildCallback: true
                        })(this.shim.deps || [], bind(this, function () {
                            return map.prefix ? this.callPlugin() : this.load();
                        }));
                    } else {
                        //Regular dependency.
                        return map.prefix ? this.callPlugin() : this.load();
                    }
                },

                load: function () {
                    var url = this.map.url;

                    //Regular dependency.
                    if (!urlFetched[url]) {
                        urlFetched[url] = true;
                        context.load(this.map.id, url);
                    }
                },

                /**
                             * Checks if the module is ready to define itself, and if so,
                             * define it.
                             */
                check: function () {
                    if (!this.enabled || this.enabling) {
                        return;
                    }

                    var err, cjsModule,
                    id = this.map.id,
                    depExports = this.depExports,
                    exports = this.exports,
                    factory = this.factory;

                    if (!this.inited) {
                        this.fetch();
                    } else if (this.error) {
                        this.emit('error', this.error);
                    } else if (!this.defining) {
                        //The factory could trigger another require call
                        //that would result in checking this module to
                        //define itself again. If already in the process
                        //of doing that, skip this work.
                        this.defining = true;

                        if (this.depCount < 1 && !this.defined) {
                            if (isFunction(factory)) {
                                //If there is an error listener, favor passing
                                //to that instead of throwing an error. However,
                                //only do it for define()'d  modules. require
                                //errbacks should not be called for failures in
                                //their callbacks (#699). However if a global
                                //onError is set, use that.
                                if ((this.events.error && this.map.isDefine) ||
                                req.onError !== defaultOnError) {
                                    try {
                                        exports = context.execCb(id, factory, depExports, exports);
                                    } catch (e) {
                                        err = e;
                                    }
                                } else {
                                    exports = context.execCb(id, factory, depExports, exports);
                                }

                                // Favor return value over exports. If node/cjs in play,
                                // then will not have a return value anyway. Favor
                                // module.exports assignment over exports object.
                                if (this.map.isDefine && exports === undefined) {
                                    cjsModule = this.module;
                                    if (cjsModule) {
                                        exports = cjsModule.exports;
                                    } else if (this.usingExports) {
                                        //exports already set the defined value.
                                        exports = this.exports;
                                    }
                                }

                                if (err) {
                                    err.requireMap = this.map;
                                    err.requireModules = this.map.isDefine ? [this.map.id] : null;
                                    err.requireType = this.map.isDefine ? 'define' : 'require';
                                    return onError((this.error = err));
                                }

                            } else {
                                //Just a literal value
                                exports = factory;
                            }

                            this.exports = exports;

                            if (this.map.isDefine && !this.ignore) {
                                defined[id] = exports;

                                if (req.onResourceLoad) {
                                    req.onResourceLoad(context, this.map, this.depMaps);
                                }
                            }

                            //Clean up
                            cleanRegistry(id);

                            this.defined = true;
                        }

                        //Finished the define stage. Allow calling check again
                        //to allow define notifications below in the case of a
                        //cycle.
                        this.defining = false;

                        if (this.defined && !this.defineEmitted) {
                            this.defineEmitted = true;
                            this.emit('defined', this.exports);
                            this.defineEmitComplete = true;
                        }

                    }
                },

                callPlugin: function () {
                    var map = this.map,
                    id = map.id,
                    //Map already normalized the prefix.
                    pluginMap = makeModuleMap(map.prefix);

                    //Mark this as a dependency for this plugin, so it
                    //can be traced for cycles.
                    this.depMaps.push(pluginMap);

                    on(pluginMap, 'defined', bind(this, function (plugin) {
                        var load, normalizedMap, normalizedMod,
                        bundleId = getOwn(bundlesMap, this.map.id),
                        name = this.map.name,
                        parentName = this.map.parentMap ? this.map.parentMap.name : null,
                        localRequire = context.makeRequire(map.parentMap, {
                            enableBuildCallback: true
                        });

                        //If current map is not normalized, wait for that
                        //normalized name to load instead of continuing.
                        if (this.map.unnormalized) {
                            //Normalize the ID if the plugin allows it.
                            if (plugin.normalize) {
                                name = plugin.normalize(name, function (name) {
                                    return normalize(name, parentName, true);
                                }) || '';
                            }

                            //prefix and name should already be normalized, no need
                            //for applying map config again either.
                            normalizedMap = makeModuleMap(map.prefix + '!' + name,
                            this.map.parentMap);
                            on(normalizedMap,
                            'defined', bind(this, function (value) {
                                this.init([], function () {
                                    return value;
                                }, null, {
                                    enabled: true,
                                    ignore: true
                                });
                            }));

                            normalizedMod = getOwn(registry, normalizedMap.id);
                            if (normalizedMod) {
                                //Mark this as a dependency for this plugin, so it
                                //can be traced for cycles.
                                this.depMaps.push(normalizedMap);

                                if (this.events.error) {
                                    normalizedMod.on('error', bind(this, function (err) {
                                        this.emit('error', err);
                                    }));
                                }
                                normalizedMod.enable();
                            }

                            return;
                        }

                        //If a paths config, then just load that file instead to
                        //resolve the plugin, as it is built into that paths layer.
                        if (bundleId) {
                            this.map.url = context.nameToUrl(bundleId);
                            this.load();
                            return;
                        }

                        load = bind(this, function (value) {
                            this.init([], function () {
                                return value;
                            }, null, {
                                enabled: true
                            });
                        });

                        load.error = bind(this, function (err) {
                            this.inited = true;
                            this.error = err;
                            err.requireModules = [id];

                            //Remove temp unnormalized modules for this module,
                            //since they will never be resolved otherwise now.
                            eachProp(registry, function (mod) {
                                if (mod.map.id.indexOf(id + '_unnormalized') === 0) {
                                    cleanRegistry(mod.map.id);
                                }
                            });

                            onError(err);
                        });

                        //Allow plugins to load other code without having to know the
                        //context or how to 'complete' the load.
                        load.fromText = bind(this, function (text, textAlt) {
                            /*jslint evil: true */
                            var moduleName = map.name,
                            moduleMap = makeModuleMap(moduleName),
                            hasInteractive = useInteractive;

                            //As of 2.1.0, support just passing the text, to reinforce
                            //fromText only being called once per resource. Still
                            //support old style of passing moduleName but discard
                            //that moduleName in favor of the internal ref.
                            if (textAlt) {
                                text = textAlt;
                            }

                            //Turn off interactive script matching for IE for any define
                            //calls in the text, then turn it back on at the end.
                            if (hasInteractive) {
                                useInteractive = false;
                            }

                            //Prime the system by creating a module instance for
                            //it.
                            getModule(moduleMap);

                            //Transfer any config to this other module.
                            if (hasProp(config.config, id)) {
                                config.config[moduleName] = config.config[id];
                            }

                            try {
                                req.exec(text);
                            } catch (e) {
                                return onError(makeError('fromtexteval',
                                'fromText eval for ' + id +
                                ' failed: ' + e,
                                e,
                                [id]));
                            }

                            if (hasInteractive) {
                                useInteractive = true;
                            }

                            //Mark this as a dependency for the plugin
                            //resource
                            this.depMaps.push(moduleMap);

                            //Support anonymous modules.
                            context.completeLoad(moduleName);

                            //Bind the value of that module to the value for this
                            //resource ID.
                            localRequire([moduleName], load);
                        });

                        //Use parentName here since the plugin's name is not reliable,
                        //could be some weird string with no path that actually wants to
                        //reference the parentName's path.
                        plugin.load(map.name, localRequire, load, config);
                    }));

                    context.enable(pluginMap, this);
                    this.pluginMaps[pluginMap.id] = pluginMap;
                },

                enable: function () {
                    enabledRegistry[this.map.id] = this;
                    this.enabled = true;

                    //Set flag mentioning that the module is enabling,
                    //so that immediate calls to the defined callbacks
                    //for dependencies do not trigger inadvertent load
                    //with the depCount still being zero.
                    this.enabling = true;

                    //Enable each dependency
                    each(this.depMaps, bind(this, function (depMap, i) {
                        var id, mod, handler;

                        if (typeof depMap === 'string') {
                            //Dependency needs to be converted to a depMap
                            //and wired up to this module.
                            depMap = makeModuleMap(depMap,
                            (this.map.isDefine ? this.map : this.map.parentMap),
                            false,
                            !this.skipMap);
                            this.depMaps[i] = depMap;

                            handler = getOwn(handlers, depMap.id);

                            if (handler) {
                                this.depExports[i] = handler(this);
                                return;
                            }

                            this.depCount += 1;

                            on(depMap, 'defined', bind(this, function (depExports) {
                                this.defineDep(i, depExports);
                                this.check();
                            }));

                            if (this.errback) {
                                on(depMap, 'error', bind(this, this.errback));
                            }
                        }

                        id = depMap.id;
                        mod = registry[id];

                        //Skip special modules like 'require', 'exports', 'module'
                        //Also, don't call enable if it is already enabled,
                        //important in circular dependency cases.
                        if (!hasProp(handlers, id) && mod && !mod.enabled) {
                            context.enable(depMap, this);
                        }
                    }));

                    //Enable each plugin that is used in
                    //a dependency
                    eachProp(this.pluginMaps, bind(this, function (pluginMap) {
                        var mod = getOwn(registry, pluginMap.id);
                        if (mod && !mod.enabled) {
                            context.enable(pluginMap, this);
                        }
                    }));

                    this.enabling = false;

                    this.check();
                },

                on: function (name, cb) {
                    var cbs = this.events[name];
                    if (!cbs) {
                        cbs = this.events[name] = [];
                    }
                    cbs.push(cb);
                },

                emit: function (name, evt) {
                    each(this.events[name], function (cb) {
                        cb(evt);
                    });
                    if (name === 'error') {
                        //Now that the error handler was triggered, remove
                        //the listeners, since this broken Module instance
                        //can stay around for a while in the registry.
                        delete this.events[name];
                    }
                }
            };

            function callGetModule(args) {
                //Skip modules already defined.
                if (!hasProp(defined, args[0])) {
                    getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);
                }
            }

            function removeListener(node, func, name, ieName) {
                //Favor detachEvent because of IE9
                //issue, see attachEvent/addEventListener comment elsewhere
                //in this file.
                if (node.detachEvent && !isOpera) {
                    //Probably IE. If not it will throw an error, which will be
                    //useful to know.
                    if (ieName) {
                        node.detachEvent(ieName, func);
                    }
                } else {
                    node.removeEventListener(name, func, false);
                }
            }

            /**
                     * Given an event from a script node, get the requirejs info from it,
                     * and then removes the event listeners on the node.
                     * @param {Event} evt
                     * @returns {Object}
                     */
            function getScriptData(evt) {
                //Using currentTarget instead of target for Firefox 2.0's sake. Not
                //all old browsers will be supported, but this one was easy enough
                //to support and still makes sense.
                var node = evt.currentTarget || evt.srcElement;

                //Remove the listeners once here.
                removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');
                removeListener(node, context.onScriptError, 'error');

                return {
                    node: node,
                    id: node && node.getAttribute('data-requiremodule')
                };
            }

            function intakeDefines() {
                var args;

                //Any defined modules in the global queue, intake them now.
                takeGlobalQueue();

                //Make sure any remaining defQueue items get properly processed.
                while (defQueue.length) {
                    args = defQueue.shift();
                    if (args[0] === null) {
                        return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' + args[args.length - 1]));
                    } else {
                        //args are id, deps, factory. Should be normalized by the
                        //define() function.
                        callGetModule(args);
                    }
                }
            }

            context = {
                config: config,
                contextName: contextName,
                registry: registry,
                defined: defined,
                urlFetched: urlFetched,
                defQueue: defQueue,
                Module: Module,
                makeModuleMap: makeModuleMap,
                nextTick: req.nextTick,
                onError: onError,

                /**
                             * Set a configuration for the context.
                             * @param {Object} cfg config object to integrate.
                             */
                configure: function (cfg) {
                    //Make sure the baseUrl ends in a slash.
                    if (cfg.baseUrl) {
                        if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {
                            cfg.baseUrl += '/';
                        }
                    }

                    //Save off the paths since they require special processing,
                    //they are additive.
                    var shim = config.shim,
                    objs = {
                        paths: true,
                        bundles: true,
                        config: true,
                        map: true
                    };

                    eachProp(cfg, function (value, prop) {
                        if (objs[prop]) {
                            if (!config[prop]) {
                                config[prop] = {};
                            }
                            mixin(config[prop], value, true, true);
                        } else {
                            config[prop] = value;
                        }
                    });

                    //Reverse map the bundles
                    if (cfg.bundles) {
                        eachProp(cfg.bundles, function (value, prop) {
                            each(value, function (v) {
                                if (v !== prop) {
                                    bundlesMap[v] = prop;
                                }
                            });
                        });
                    }

                    //Merge shim
                    if (cfg.shim) {
                        eachProp(cfg.shim, function (value, id) {
                            //Normalize the structure
                            if (isArray(value)) {
                                value = {
                                    deps: value
                                };
                            }
                            if ((value.exports || value.init) && !value.exportsFn) {
                                value.exportsFn = context.makeShimExports(value);
                            }
                            shim[id] = value;
                        });
                        config.shim = shim;
                    }

                    //Adjust packages if necessary.
                    if (cfg.packages) {
                        each(cfg.packages, function (pkgObj) {
                            var location, name;

                            pkgObj = typeof pkgObj === 'string' ? {
                                name: pkgObj
                            } : pkgObj;

                            name = pkgObj.name;
                            location = pkgObj.location;
                            if (location) {
                                config.paths[name] = pkgObj.location;
                            }

                            //Save pointer to main module ID for pkg name.
                            //Remove leading dot in main, so main paths are normalized,
                            //and remove any trailing .js, since different package
                            //envs have different conventions: some use a module name,
                            //some use a file name.
                            config.pkgs[name] = pkgObj.name + '/' + (pkgObj.main || 'main')
                            .replace(currDirRegExp, '')
                            .replace(jsSuffixRegExp, '');
                        });
                    }

                    //If there are any "waiting to execute" modules in the registry,
                    //update the maps for them, since their info, like URLs to load,
                    //may have changed.
                    eachProp(registry, function (mod, id) {
                        //If module already has init called, since it is too
                        //late to modify them, and ignore unnormalized ones
                        //since they are transient.
                        if (!mod.inited && !mod.map.unnormalized) {
                            mod.map = makeModuleMap(id);
                        }
                    });

                    //If a deps array or a config callback is specified, then call
                    //require with those args. This is useful when require is defined as a
                    //config object before require.js is loaded.
                    if (cfg.deps || cfg.callback) {
                        context.require(cfg.deps || [], cfg.callback);
                    }
                },

                makeShimExports: function (value) {
                    function fn() {
                        var ret;
                        if (value.init) {
                            ret = value.init.apply(global, arguments);
                        }
                        return ret || (value.exports && getGlobal(value.exports));
                    }
                    return fn;
                },

                makeRequire: function (relMap, options) {
                    options = options || {};

                    function localRequire(deps, callback, errback) {
                        var id, map, requireMod;

                        if (options.enableBuildCallback && callback && isFunction(callback)) {
                            callback.__requireJsBuild = true;
                        }

                        if (typeof deps === 'string') {
                            if (isFunction(callback)) {
                                //Invalid call
                                return onError(makeError('requireargs', 'Invalid require call'), errback);
                            }

                            //If require|exports|module are requested, get the
                            //value for them from the special handlers. Caveat:
                            //this only works while module is being defined.
                            if (relMap && hasProp(handlers, deps)) {
                                return handlers[deps](registry[relMap.id]);
                            }

                            //Synchronous access to one module. If require.get is
                            //available (as in the Node adapter), prefer that.
                            if (req.get) {
                                return req.get(context, deps, relMap, localRequire);
                            }

                            //Normalize module name, if it contains . or ..
                            map = makeModuleMap(deps, relMap, false, true);
                            id = map.id;

                            if (!hasProp(defined, id)) {
                                return onError(makeError('notloaded', 'Module name "' +
                                id +
                                '" has not been loaded yet for context: ' +
                                contextName +
                                (relMap ? '' : '. Use require([])')));
                            }
                            return defined[id];
                        }

                        //Grab defines waiting in the global queue.
                        intakeDefines();

                        //Mark all the dependencies as needing to be loaded.
                        context.nextTick(function () {
                            //Some defines could have been added since the
                            //require call, collect them.
                            intakeDefines();

                            requireMod = getModule(makeModuleMap(null, relMap));

                            //Store if map config should be applied to this require
                            //call for dependencies.
                            requireMod.skipMap = options.skipMap;

                            requireMod.init(deps, callback, errback, {
                                enabled: true
                            });

                            checkLoaded();
                        });

                        return localRequire;
                    }

                    mixin(localRequire, {
                        isBrowser: isBrowser,

                        /**
                                             * Converts a module name + .extension into an URL path.
                                             * *Requires* the use of a module name. It does not support using
                                             * plain URLs like nameToUrl.
                                             */
                        toUrl: function (moduleNamePlusExt) {
                            var ext,
                            index = moduleNamePlusExt.lastIndexOf('.'),
                            segment = moduleNamePlusExt.split('/')[0],
                            isRelative = segment === '.' || segment === '..';

                            //Have a file extension alias, and it is not the
                            //dots from a relative path.
                            if (index !== - 1 && (!isRelative || index > 1)) {
                                ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);
                                moduleNamePlusExt = moduleNamePlusExt.substring(0, index);
                            }

                            return context.nameToUrl(normalize(moduleNamePlusExt,
                            relMap && relMap.id, true), ext, true);
                        },

                        defined: function (id) {
                            return hasProp(defined, makeModuleMap(id, relMap, false, true).id);
                        },

                        specified: function (id) {
                            id = makeModuleMap(id, relMap, false, true).id;
                            return hasProp(defined, id) || hasProp(registry, id);
                        }
                    });

                    //Only allow undef on top level require calls
                    if (!relMap) {
                        localRequire.undef = function (id) {
                            //Bind any waiting define() calls to this context,
                            //fix for #408
                            takeGlobalQueue();

                            var map = makeModuleMap(id, relMap, true),
                            mod = getOwn(registry, id);

                            removeScript(id);

                            delete defined[id];
                            delete urlFetched[map.url];
                            delete undefEvents[id];

                            //Clean queued defines too. Go backwards
                            //in array so that the splices do not
                            //mess up the iteration.
                            eachReverse(defQueue, function(args, i) {
                                if (args[0] === id) {
                                    defQueue.splice(i, 1);
                                }
                            });

                            if (mod) {
                                //Hold on to listeners in case the
                                //module will be attempted to be reloaded
                                //using a different config.
                                if (mod.events.defined) {
                                    undefEvents[id] = mod.events;
                                }

                                cleanRegistry(id);
                            }
                        };
                    }

                    return localRequire;
                },

                /**
                             * Called to enable a module if it is still in the registry
                             * awaiting enablement. A second arg, parent, the parent module,
                             * is passed in for context, when this method is overridden by
                             * the optimizer. Not shown here to keep code compact.
                             */
                enable: function (depMap) {
                    var mod = getOwn(registry, depMap.id);
                    if (mod) {
                        getModule(depMap).enable();
                    }
                },

                /**
                             * Internal method used by environment adapters to complete a load event.
                             * A load event could be a script load or just a load pass from a synchronous
                             * load call.
                             * @param {String} moduleName the name of the module to potentially complete.
                             */
                completeLoad: function (moduleName) {
                    var found, args, mod,
                    shim = getOwn(config.shim, moduleName) || {},
                    shExports = shim.exports;

                    takeGlobalQueue();

                    while (defQueue.length) {
                        args = defQueue.shift();
                        if (args[0] === null) {
                            args[0] = moduleName;
                            //If already found an anonymous module and bound it
                            //to this name, then this is some other anon module
                            //waiting for its completeLoad to fire.
                            if (found) {
                                break;
                            }
                            found = true;
                        } else if (args[0] === moduleName) {
                            //Found matching define call for this script!
                            found = true;
                        }

                        callGetModule(args);
                    }

                    //Do this after the cycle of callGetModule in case the result
                    //of those calls/init calls changes the registry.
                    mod = getOwn(registry, moduleName);

                    if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {
                        if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {
                            if (hasPathFallback(moduleName)) {
                                return;
                            } else {
                                return onError(makeError('nodefine',
                                'No define call for ' + moduleName,
                                null,
                                [moduleName]));
                            }
                        } else {
                            //A script that does not call define(), so just simulate
                            //the call for it.
                            callGetModule([moduleName, (shim.deps || []), shim.exportsFn]);
                        }
                    }

                    checkLoaded();
                },

                /**
                             * Converts a module name to a file path. Supports cases where
                             * moduleName may actually be just an URL.
                             * Note that it **does not** call normalize on the moduleName,
                             * it is assumed to have already been normalized. This is an
                             * internal API, not a public one. Use toUrl for the public API.
                             */
                nameToUrl: function (moduleName, ext, skipExt) {
                    var paths, syms, i, parentModule, url,
                    parentPath, bundleId,
                    pkgMain = getOwn(config.pkgs, moduleName);

                    if (pkgMain) {
                        moduleName = pkgMain;
                    }

                    bundleId = getOwn(bundlesMap, moduleName);

                    if (bundleId) {
                        return context.nameToUrl(bundleId, ext, skipExt);
                    }

                    //If a colon is in the URL, it indicates a protocol is used and it is just
                    //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)
                    //or ends with .js, then assume the user meant to use an url and not a module id.
                    //The slash is important for protocol-less URLs as well as full paths.
                    if (req.jsExtRegExp.test(moduleName)) {
                        //Just a plain path, not module name lookup, so just return it.
                        //Add extension if it is included. This is a bit wonky, only non-.js things pass
                        //an extension, this method probably needs to be reworked.
                        url = moduleName + (ext || '');
                    } else {
                        //A module that needs to be converted to a path.
                        paths = config.paths;

                        syms = moduleName.split('/');
                        //For each module name segment, see if there is a path
                        //registered for it. Start with most specific name
                        //and work up from it.
                        for (i = syms.length; i > 0; i -= 1) {
                            parentModule = syms.slice(0, i).join('/');

                            parentPath = getOwn(paths, parentModule);
                            if (parentPath) {
                                //If an array, it means there are a few choices,
                                //Choose the one that is desired
                                if (isArray(parentPath)) {
                                    parentPath = parentPath[0];
                                }
                                syms.splice(0, i, parentPath);
                                break;
                            }
                        }

                        //Join the path parts together, then figure out if baseUrl is needed.
                        url = syms.join('/');
                        url += (ext || (/^data\:|\?/.test(url) || skipExt ? '' : '.js'));
                        url = (url.charAt(0) === '/' || url.match(/^[\w\+\.\-]+:/) ? '' : config.baseUrl) + url;
                    }

                    return config.urlArgs ? url +
                    ((url.indexOf('?') === - 1 ? '?' : '&') +
                    config.urlArgs) : url;
                },

                //Delegates to req.load. Broken out as a separate function to
                //allow overriding in the optimizer.
                load: function (id, url) {
                    req.load(context, id, url);
                },

                /**
                             * Executes a module callback function. Broken out as a separate function
                             * solely to allow the build system to sequence the files in the built
                             * layer in the right sequence.
                             *
                             * @private
                             */
                execCb: function (name, callback, args, exports) {
                    return callback.apply(exports, args);
                },

                /**
                             * callback for script loads, used to check status of loading.
                             *
                             * @param {Event} evt the event from the browser for the script
                             * that was loaded.
                             */
                onScriptLoad: function (evt) {
                    //Using currentTarget instead of target for Firefox 2.0's sake. Not
                    //all old browsers will be supported, but this one was easy enough
                    //to support and still makes sense.
                    if (evt.type === 'load' ||
                    (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {
                        //Reset interactive script so a script node is not held onto for
                        //to long.
                        interactiveScript = null;

                        //Pull out the name of the module and the context.
                        var data = getScriptData(evt);
                        context.completeLoad(data.id);
                    }
                },

                /**
                             * Callback for script errors.
                             */
                onScriptError: function (evt) {
                    var data = getScriptData(evt);
                    if (!hasPathFallback(data.id)) {
                        return onError(makeError('scripterror', 'Script error for: ' + data.id, evt, [data.id]));
                    }
                }
            };

            context.require = context.makeRequire();
            return context;
        }

        /**
             * Main entry point.
             *
             * If the only argument to require is a string, then the module that
             * is represented by that string is fetched for the appropriate context.
             *
             * If the first argument is an array, then it will be treated as an array
             * of dependency string names to fetch. An optional function callback can
             * be specified to execute when all of those dependencies are available.
             *
             * Make a local req variable to help Caja compliance (it assumes things
             * on a require that are not standardized), and to give a short
             * name for minification/local scope use.
             */
        req = requirejs = function (deps, callback, errback, optional) {

            //Find the right context, use default
            var context, config,
            contextName = defContextName;

            // Determine if have config object in the call.
            if (!isArray(deps) && typeof deps !== 'string') {
                // deps is a config object
                config = deps;
                if (isArray(callback)) {
                    // Adjust args if there are dependencies
                    deps = callback;
                    callback = errback;
                    errback = optional;
                } else {
                    deps = [];
                }
            }

            if (config && config.context) {
                contextName = config.context;
            }

            context = getOwn(contexts, contextName);
            if (!context) {
                context = contexts[contextName] = req.s.newContext(contextName);
            }

            if (config) {
                context.configure(config);
            }

            return context.require(deps, callback, errback);
        };

        /**
             * Support require.config() to make it easier to cooperate with other
             * AMD loaders on globally agreed names.
             */
        req.config = function (config) {
            return req(config);
        };

        /**
             * Execute something after the current tick
             * of the event loop. Override for other envs
             * that have a better solution than setTimeout.
             * @param  {Function} fn function to execute later.
             */
        req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {
            setTimeout(fn, 4);
        } : function (fn) {
            fn();
        };

        /**
             * Export require as a global, but only if it does not already exist.
             */
        if (!require) {
            require = req;
        }

        req.version = version;

        //Used to filter out dependencies that are already paths.
        req.jsExtRegExp = /^\/|:|\?|\.js$/;
        req.isBrowser = isBrowser;
        s = req.s = {
            contexts: contexts,
            newContext: newContext
        };

        //Create default context.
        req({});

        //Exports some context-sensitive methods on global require.
        each([
        'toUrl',
        'undef',
        'defined',
        'specified'
        ], function (prop) {
            //Reference from contexts instead of early binding to default context,
            //so that during builds, the latest instance of the default context
            //with its config gets used.
            req[prop] = function () {
                var ctx = contexts[defContextName];
                return ctx.require[prop].apply(ctx, arguments);
            };
        });

        if (isBrowser) {
            head = s.head = document.getElementsByTagName('head')[0];
            //If BASE tag is in play, using appendChild is a problem for IE6.
            //When that browser dies, this can be removed. Details in this jQuery bug:
            //http://dev.jquery.com/ticket/2709
            baseElement = document.getElementsByTagName('base')[0];
            if (baseElement) {
                head = s.head = baseElement.parentNode;
            }
        }

        /**
             * Any errors that require explicitly generates will be passed to this
             * function. Intercept/override it if you want custom error handling.
             * @param {Error} err the error object.
             */
        req.onError = defaultOnError;

        /**
             * Creates the node for the load command. Only used in browser envs.
             */
        req.createNode = function (config, moduleName, url) {
            var node = config.xhtml ?
            document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :
            document.createElement('script');
            node.type = config.scriptType || 'text/javascript';
            node.charset = 'utf-8';
            node.async = true;
            return node;
        };

        /**
             * Does the request to load a module for the browser case.
             * Make this a separate function to allow other environments
             * to override it.
             *
             * @param {Object} context the require context to find state.
             * @param {String} moduleName the name of the module.
             * @param {Object} url the URL to the module.
             */
        req.load = function (context, moduleName, url) {
            var config = (context && context.config) || {},
            node;
            if (isBrowser) {
                //In the browser so use a script tag
                node = req.createNode(config, moduleName, url);

                node.setAttribute('data-requirecontext', context.contextName);
                node.setAttribute('data-requiremodule', moduleName);

                //Set up load listener. Test attachEvent first because IE9 has
                //a subtle issue in its addEventListener and script onload firings
                //that do not match the behavior of all other browsers with
                //addEventListener support, which fire the onload event for a
                //script right after the script execution. See:
                //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution
                //UNFORTUNATELY Opera implements attachEvent but does not follow the script
                //script execution mode.
                if (node.attachEvent &&
                //Check if node.attachEvent is artificially added by custom script or
                //natively supported by browser
                //read https://github.com/jrburke/requirejs/issues/187
                //if we can NOT find [native code] then it must NOT natively supported.
                //in IE8, node.attachEvent does not have toString()
                //Note the test for "[native code" with no closing brace, see:
                //https://github.com/jrburke/requirejs/issues/273
                !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&
                !isOpera) {
                    //Probably IE. IE (at least 6-8) do not fire
                    //script onload right after executing the script, so
                    //we cannot tie the anonymous define call to a name.
                    //However, IE reports the script as being in 'interactive'
                    //readyState at the time of the define call.
                    useInteractive = true;

                    node.attachEvent('onreadystatechange', context.onScriptLoad);
                    //It would be great to add an error handler here to catch
                    //404s in IE9+. However, onreadystatechange will fire before
                    //the error handler, so that does not help. If addEventListener
                    //is used, then IE will fire error before load, but we cannot
                    //use that pathway given the connect.microsoft.com issue
                    //mentioned above about not doing the 'script execute,
                    //then fire the script load event listener before execute
                    //next script' that other browsers do.
                    //Best hope: IE10 fixes the issues,
                    //and then destroys all installs of IE 6-9.
                    //node.attachEvent('onerror', context.onScriptError);
                } else {
                    node.addEventListener('load', context.onScriptLoad, false);
                    node.addEventListener('error', context.onScriptError, false);
                }
                node.src = url;

                //For some cache cases in IE 6-8, the script executes before the end
                //of the appendChild execution, so to tie an anonymous define
                //call to the module name (which is stored on the node), hold on
                //to a reference to this node, but clear after the DOM insertion.
                currentlyAddingScript = node;
                if (baseElement) {
                    head.insertBefore(node, baseElement);
                } else {
                    head.appendChild(node);
                }
                currentlyAddingScript = null;

                return node;
            } else if (isWebWorker) {
                try {
                    //In a web worker, use importScripts. This is not a very
                    //efficient use of importScripts, importScripts will block until
                    //its script is downloaded and evaluated. However, if web workers
                    //are in play, the expectation that a build has been done so that
                    //only one script needs to be loaded anyway. This may need to be
                    //reevaluated if other use cases become common.
                    importScripts(url);

                    //Account for anonymous modules
                    context.completeLoad(moduleName);
                } catch (e) {
                    context.onError(makeError('importscripts',
                    'importScripts failed for ' +
                    moduleName + ' at ' + url,
                    e,
                    [moduleName]));
                }
            }
        };

        function getInteractiveScript() {
            if (interactiveScript && interactiveScript.readyState === 'interactive') {
                return interactiveScript;
            }

            eachReverse(scripts(), function (script) {
                if (script.readyState === 'interactive') {
                    return (interactiveScript = script);
                }
            });
            return interactiveScript;
        }

        //Look for a data-main script attribute, which could also adjust the baseUrl.
        if (isBrowser && !cfg.skipDataMain) {
            //Figure out baseUrl. Get it from the script tag with require.js in it.
            eachReverse(scripts(), function (script) {
                //Set the 'head' where we can append children by
                //using the script's parent.
                if (!head) {
                    head = script.parentNode;
                }

                //Look for a data-main attribute to set main script for the page
                //to load. If it is there, the path to data main becomes the
                //baseUrl, if it is not already set.
                dataMain = script.getAttribute('data-main');
                if (dataMain) {
                    //Preserve dataMain in case it is a path (i.e. contains '?')
                    mainScript = dataMain;

                    //Set final baseUrl if there is not already an explicit one.
                    if (!cfg.baseUrl) {
                        //Pull off the directory of data-main for use as the
                        //baseUrl.
                        src = mainScript.split('/');
                        mainScript = src.pop();
                        subPath = src.length ? src.join('/') + '/' : './';

                        cfg.baseUrl = subPath;
                    }

                    //Strip off any trailing .js since mainScript is now
                    //like a module name.
                    mainScript = mainScript.replace(jsSuffixRegExp, '');

                    //If mainScript is still a path, fall back to dataMain
                    if (req.jsExtRegExp.test(mainScript)) {
                        mainScript = dataMain;
                    }

                    //Put the data-main script in the files to load.
                    cfg.deps = cfg.deps ? cfg.deps.concat(mainScript) : [mainScript];

                    return true;
                }
            });
        }

        /**
             * The function that handles definitions of modules. Differs from
             * require() in that a string for the module should be the first argument,
             * and the function to execute after dependencies are loaded should
             * return a value to define the module corresponding to the first argument's
             * name.
             */
        define = function (name, deps, callback) {
            var node, context;

            //Allow for anonymous modules
            if (typeof name !== 'string') {
                //Adjust args appropriately
                callback = deps;
                deps = name;
                name = null;
            }

            //This module may not have dependencies
            if (!isArray(deps)) {
                callback = deps;
                deps = null;
            }

            //If no name, and callback is a function, then figure out if it a
            //CommonJS thing with dependencies.
            if (!deps && isFunction(callback)) {
                deps = [];
                //Remove comments from the callback string,
                //look for require calls, and pull them into the dependencies,
                //but only if there are function args.
                if (callback.length) {
                    callback
                    .toString()
                    .replace(commentRegExp, '')
                    .replace(cjsRequireRegExp, function (match, dep) {
                        deps.push(dep);
                    });

                    //May be a CommonJS thing even without require calls, but still
                    //could use exports, and module. Avoid doing exports and module
                    //work though if it just needs require.
                    //REQUIRES the function to expect the CommonJS variables in the
                    //order listed below.
                    deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);
                }
            }

            //If in IE 6-8 and hit an anonymous define() call, do the interactive
            //work.
            if (useInteractive) {
                node = currentlyAddingScript || getInteractiveScript();
                if (node) {
                    if (!name) {
                        name = node.getAttribute('data-requiremodule');
                    }
                    context = contexts[node.getAttribute('data-requirecontext')];
                }
            }

            //Always save off evaluating the def call until the script onload handler.
            //This allows multiple modules to be in a file without prematurely
            //tracing dependencies, and allows for anonymous module support,
            //where the module name is not known until the script onload event
            //occurs. If no context, use the global queue, and get it processed
            //in the onscript load callback.
            (context ? context.defQueue : globalDefQueue).push([name, deps, callback]);
        };

        define.amd = {
            jQuery: true
        };


        /**
             * Executes the text. Normally just uses eval, but can be modified
             * to use a better, environment-specific call. Only used for transpiling
             * loader plugins, not for plain JS modules.
             * @param {String} text the text to execute/evaluate.
             */
        req.exec = function (text) {
            /*jslint evil: true */
            return eval(text);
        };

        //Set up with config info.
        req(cfg);
    }(this));

    return {
        require: require,
        requirejs: requirejs,
        define: define
    };
}());;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
 * @author mig <michel.gutierrez@gmail.com>
 * @version 0.1
 * @module jfx
 * @overview CSS Layout framework from AngularJS directives.
 */

(function($) {

    'use strict';

    angular.module('com.jocly.jfx', [])

    /**
    	 * jfxLayout service
    	 */
    .service('jfxLayout', [ function() {
        var self = this;
    }
    ])

    .directive('jfxResized',
    [ '$window', '$timeout', 'jfxLayout', function factory($window, $timeout, jfxLayout) {
        return {
            link: function(scope, element, attrs) {
                var timeout = null;
                function Resized() {
                    if (timeout)
                        $timeout.cancel(timeout);
                    timeout = $timeout(function() {
                        scope.$eval(attrs.jfxResized)
                        timeout = null;
                    }, 100);
                }
                scope.$on("jfxResize", function() {
                    Resized();
                });
                scope.$on("$destroy", function() {
                    angular.element($window).unbind("resize", Resized);
                });
                angular.element($window).bind("resize", Resized);
                Resized();
            },
        };
    }
    ])

    .directive('jfxPage',
    [ '$rootScope', '$timeout', '$window', 'JoclyPlazza.layout', function factory($rootScope, $timeout, $window, jpzLayout) {
        return {
            templateUrl : '/jocly/plazza/partial/pzite-page',
            replace: true,
            transclude: true,
            scope: true,
            link: function(scope, element, attrs) {
                element.addClass("jfx-page");
                if (attrs.jfxAllowNoMargin !== undefined)
                    element.addClass("jfx-body-allow-no-margin");
                var leftClosed = false;
                function ScreenWidth() {
                    if ($window && $window.screen)
                        return $window.screen.width || $window.innerWidth;
                    return $window.innerWidth;
                }
                if ($rootScope.pziteLeftMenuClosed !== undefined) {
                    leftClosed = $rootScope.pziteLeftMenuClosed;
                    if (!leftClosed && ScreenWidth() < 768)
                        $timeout(function() {
                            scope.layout.closeLeftMenu();
                        }, 10);
                } else if (($rootScope.features.openMainMenu && ScreenWidth() < 768) || parseInt($rootScope.features.openMainMenu) === 0)
                    leftClosed = true;
                scope.layout = {
                    leftClosed: leftClosed,
                    leftMenu: null,
                    toolbar: null,
                    openLeftMenu: function() {
                        scope.layout.leftClosed = false;
                        $rootScope.pziteLeftMenuClosed = false;
                    },
                    closeLeftMenu: function() {
                        scope.layout.leftClosed = true;
                        $rootScope.pziteLeftMenuClosed = true;
                    },
                    setLeftMenu: function(menu) {
                        scope.layout.leftMenu = '/jocly/plazza/' + menu;
                    },
                    setToolbar: function(toolbar) {
                        scope.layout.toolbar = '/jocly/plazza/' + toolbar;
                    },
                    showToolbar: true,
                    getSize: function() {
                        return {
                            w: $window.innerWidth,
                            h: $window.innerHeight,
                        }
                    },
                }
                function SendResize() {
                    scope.$parent.$broadcast("jfxResize", {});
                }
                if (attrs.jfxLeftMenu) {
                    scope.layout.setLeftMenu(attrs.jfxLeftMenu);
                    var jlm = element.find(".jfx-left-menu");
                    jpzLayout.onTransitionEnd(jlm, SendResize);
                    scope.$on("$destroy", function() {
                        jpzLayout.offTransitionEnd(jlm, SendResize);
                    });
                } else
                    scope.layout.leftClosed = true;
                if (attrs.jfxToolbar)
                    scope.layout.setToolbar(attrs.jfxToolbar);

                $rootScope.layout = scope.layout;
                //scope.$$nextSibling.layout=scope.layout; // attach layout to transcluded scope

                function Resized() {
                    var wClass = $("#jfx-width-class");
                    if (wClass.length == 0)
                        wClass = $("<style/>").attr("id", "jfx-width-class").appendTo($("head"));
                    var width = $window.innerWidth;
                    wClass.text("\n.jfx-body-scroll { width: " + Math.max(320, width - 250) + "px; }\n.jfx-left-closed .jfx-body-scroll { width: " + width + "px; }\n");
                }
                angular.element($window).bind("resize", Resized);
                scope.$on("$destroy", function() {
                    angular.element($window).unbind("resize", Resized);
                    scope.popSwipeHandler();
                });
                Resized();

                scope.swipeIgnore = function() {}
                scope.pushSwipeHandler(function(direction) {
                    if (attrs.jfxSwipe !== undefined)
                        scope.$eval(attrs.jfxSwipe, {
                            direction: direction
                        });
                    else {
                        if (direction == 'right') {
                            if ($rootScope.pziteLeftMenuClosed || $rootScope.pziteLeftMenuClosed === undefined)
                                scope.layout.openLeftMenu();
                        } else if (direction == 'left') {
                            if (!$rootScope.pziteLeftMenuClosed)
                                scope.layout.closeLeftMenu();
                        }
                    }
                });
            },
        };
    }
    ])

    ;


})(jQuery);;
/*!
 * Copyright (c) 2011 Ivan Fomichev
 * http://github.com/codeholic/jscreole
 * Licensed under MIT license, see http://www.opensource.org/licenses/mit-license.php
 */
var creole = function(j) {
    var c = {};
    c._a = '[^\\]|~\\n]*(?:(?:\\](?!\\])|~.)[^\\]|~\\n]*)*';
    c._d = '[^\\]~\\n]*(?:(?:\\](?!\\])|~.)[^\\]~\\n]*)*';
    c._e = '\\b(?:(?:https?|ftp)://|mailto:)';
    c._u = c._e + c._a;
    c._7 = c._e + '\\S*[^\\s!"\',.:;?]';
    c._v = '[\\w.]+:' + c._a;
    c._b = '\\{\\{((?!\\{)[^|}\\n]*(?:}(?!})[^|}\\n]*)*)' + (j && j.strict ? '' : '(?:') + '\\|([^}~\\n]*((}(?!})|~.)[^}~\\n]*)*)' + (j && j.strict ? '' : ')?') + '}}';
    var k = function(e, b) {
        if (b instanceof Function) {
            return b(e)
        }
        b = b instanceof Array ? b : [b];
        if (typeof b[1] == 'undefined') {
            b[1] = ''
        }
        return b[0] + e + b[1]
    };
    var a = {
        _G: {
            _2: 'hr',
            _1: /(^|\n)\s*----\s*(\n|$)/
        },
        _H: {
            _2: 'br',
            _1: /\\\\/
        },
        _I: {
            _2: 'pre',
            _3: 2,
            _1: /(^|\n)\{\{\{\n((.*\n)*?)\}\}\}(\n|$)/,
            _f: /^ ([ \t]*\}\}\})/gm,
            _j: '$1'
        },
        _J: {
            _2: 'tt',
            _1: /\{\{\{(.*?\}\}\}+)/,
            _3: 1,
            _f: /\}\}\}$/,
            _j: ''
        },
        _k: {
            _2: 'ul',
            _3: 0,
            _1: /(^|\n)([ \t]*\*[^*#].*(\n|$)([ \t]*[^\s*#].*(\n|$))*([ \t]*[*#]{2}.*(\n|$))*)+/
        },
        _l: {
            _2: 'ol',
            _3: 0,
            _1: /(^|\n)([ \t]*#[^*#].*(\n|$)([ \t]*[^\s*#].*(\n|$))*([ \t]*[*#]{2}.*(\n|$))*)+/
        },
        _m: {
            _2: 'li',
            _3: 0,
            _1: /[ \t]*([*#]).+(\n[ \t]*[^*#\s].*)*(\n[ \t]*[*#]{2}.+)*/,
            _f: /(^|\n)[ \t]*[*#]/g,
            _j: '$1'
        },
        _w: {
            _2: 'table',
            _3: 0,
            _1: /(^|\n)(\|.*?[ \t]*(\n|$))+/
        },
        _x: {
            _2: 'tr',
            _3: 2,
            _1: /(^|\n)(\|.*?)\|?[ \t]*(\n|$)/
        },
        _y: {
            _2: 'th',
            _1: /\|+=([^|]*)/,
            _3: 1
        },
        _z: {
            _2: 'td',
            _3: 1,
            _1: '\\|+([^|~\\[{]*((~(.|(?=\\n)|$)|\\[\\[' + c._a + '(\\|' + c._d + ')?\\]\\]' + (j && j.strict ? '' : '|' + c._b) + '|[\\[{])[^|~]*)*)'
        },
        _n: {
            _1: /.+/,
            _3: 0
        },
        _A: {
            _2: 'p',
            _3: 0,
            _1: /(^|\n)([ \t]*\S.*(\n|$))+/
        },
        _B: {
            _3: 0,
            _1: /(^|\n)([ \t]*[^\s].*(\n|$))+/
        },
        _C: {
            _2: 'strong',
            _3: 1,
            _1: /\*\*([^*~]*((\*(?!\*)|~(.|(?=\n)|$))[^*~]*)*)(\*\*|\n|$)/
        },
        _D: {
            _2: 'em',
            _3: 1,
            _1: '\\/\\/(((?!' + c._e + ')[^\\/~])*((' + c._7 + '|\\/(?!\\/)|~(.|(?=\\n)|$))((?!' + c._e + ')[^\\/~])*)*)(\\/\\/|\\n|$)'
        },
        _b: {
            _1: c._b,
            _4: function(e, b, d) {
                var f = document.createElement('img');
                f.src = b[1];
                f.alt = b[2] === undefined ? (d && d.defaultImageText ? d.defaultImageText : '') : b[2].replace(/~(.)/g, '$1');
                e.appendChild(f)
            }
        },
        _o: {
            _1: '\\[\\[(' + c._u + ')\\|(' + c._d + ')\\]\\]',
            _4: function(e, b, d) {
                var f = document.createElement('a');
                f.href = b[1];
                if (d && d.isPlainUri) {
                    f.appendChild(document.createTextNode(b[2]))
                } else {
                    this._5(f, b[2], d)
                }
                e.appendChild(f)
            }
        },
        _6: {
            _1: '\\[\\[(' + c._a + ')\\|(' + c._d + ')\\]\\]',
            _4: function(e, b, d) {
                var f = document.createElement('a');
                f.href = d && d.linkFormat ? k(b[1].replace(/~(.)/g, '$1'), d.linkFormat) : b[1].replace(/~(.)/g, '$1');
                this._5(f, b[2], d);
                e.appendChild(f)
            }
        },
        _p: {
            _1: '\\[\\[(' + c._u + ')\\]\\]'
        },
        _q: {
            _1: '\\[\\[(' + c._a + ')\\]\\]'
        },
        _r: {
            _1: '\\[\\[(' + c._v + ')\\]\\]'
        },
        _7: {
            _1: '(' + c._7 + ')'
        },
        _K: {
            _1: '~(' + c._7 + '|.)',
            _3: 1,
            _2: 'span',
            _c: {
                'class': 'escaped'
            }
        },
        _L: {
            _1: /~(.)/,
            _3: 1,
            _2: 'span',
            _c: {
                'class': 'escaped'
            }
        }
    };
    a._p._4 = a._7._4 = function(e, b, d) {
        if (!d) {
            d = {}
        }
        d.isPlainUri = true;
        a._o._4.call(this, e, Array(b[0], b[1], b[1]), d)
    };
    a._q._4 = function(e, b, d) {
        a._6._4.call(this, e, Array(b[0], b[1], b[1]), d)
    };
    a._s = {
        _1: '\\[\\[(' + c._v + ')\\|(' + c._d + ')\\]\\]',
        _4: function(e, b, d) {
            var f = document.createElement('a');
            var g, h;
            if (d && d.interwiki) {
                g = b[1].match(/(.*?):(.*)/);
                h = d.interwiki[g[1]]
            }
            if (typeof h == 'undefined') {
                if (!a._6._5) {
                    a._6 = new this.constructor(a._6)
                }
                return a._6._4.call(a._6, e, b, d)
            }
            f.href = k(g[2].replace(/~(.)/g, '$1'), h);
            this._5(f, b[2], d);
            e.appendChild(f)
        }
    };
    a._r._4 = function(e, b, d) {
        a._s._4.call(this, e, Array(b[0], b[1], b[1]), d)
    };
    a._o._0 = a._p._0 = a._7._0 = a._6._0 = a._q._0 = a._s._0 = a._r._0 = [a._L, a._b];
    for (var l = 1; l <= 6; l++) {
        a['h' + l] = {
            _2: 'h' + l,
            _3: 2,
            _1: '(^|\\n)[ \\t]*={' + l + '}[ \\t]*([^\\n=][^~]*?(~(.|(?=\\n)|$))*)[ \\t]*=*\\s*(\\n|$)'
        }
    }
    a._k._0 = a._l._0 = [a._m];
    a._m._0 = [a._k, a._l];
    a._m._8 = a._B;
    a._w._0 = [a._x];
    a._x._0 = [a._y, a._z];
    a._z._0 = [a._n];
    a._y._0 = [a._n];
    a.h1._0 = a.h2._0 = a.h3._0 = a.h4._0 = a.h5._0 = a.h6._0 = a._n._0 = a._A._0 = a._B._0 = a._C._0 = a._D._0 = [a._K, a._C, a._D, a._H, a._7, a._o, a._s, a._6, a._p, a._r, a._q, a._J, a._b];
    a._t = {
        _0: [a.h1, a.h2, a.h3, a.h4, a.h5, a.h6, a._G, a._k, a._l, a._I, a._w],
        _8: {
            _0: [a._A]
        }
    };
    creole._9.call(this, a, j)
};
creole._9 = function(e, b) {
    if (!arguments.length) {
        return
    }
    this._g = e;
    this._g._t = new this._E(this._g._t);
    this._h = b
};
creole._i = function(e) {
    if (!arguments.length) {
        return
    }
    for (var b in e) {
        this[b] = e[b]
    }
    if (!this._0) {
        this._0 = []
    }
};
creole._9.prototype = {
    _E: null,
    _g: null,
    _h: null,
    parse: function(e, b, d) {
        if (d) {
            for (i in this._h) {
                if (typeof d[i] == 'undefined') {
                    d[i] = this._h[i]
                }
            }
        } else {
            d = this._h
        }
        b = b.replace(/\r\n?/g, '\n');
        this._g._t._5(e, b, d);
        if (d && d.forIE) {
            e.innerHTML = e.innerHTML.replace(/\r?\n/g, '\r\n')
        }
    }
};
creole._9.prototype.constructor = creole._9;
creole._9.prototype._E = creole._i;
creole._i.prototype = {
    _F: function(e, b) {
        return e.match(this._1)
    },
    _4: function(e, b, d) {
        var f;
        if (this._3 !== null) {
            f = b[this._3]
        }
        var g;
        if (this._2) {
            g = document.createElement(this._2);
            e.appendChild(g)
        } else {
            g = e
        }
        if (f) {
            if (this._f) {
                f = f.replace(this._f, this._j)
            }
            this._5(g, f, d)
        }
        if (this._c) {
            for (var h in this._c) {
                g.setAttribute(h, this._c[h]);
                if (d && d.forIE && h == 'class') {
                    g.className = this._c[h]
                }
            }
        }
        return this
    },
    _5: function(e, b, d) {
        var f = '' + b;
        var g = [];
        if (!this._8._5) {
            this._8 = new this.constructor(this._8)
        }
        while (true) {
            var h = false;
            var j = false;
            for (var c = 0; c < this._0.length; c++) {
                if (typeof g[c] == 'undefined') {
                    if (!this._0[c]._F) {
                        this._0[c] = new this.constructor(this._0[c])
                    }
                    g[c] = this._0[c]._F(f, d)
                }
                if (g[c] && (!h || h.index > g[c].index)) {
                    h = g[c];
                    j = this._0[c];
                    if (h.index == 0) {
                        break
                    }
                }
            }
            var k = h ? h.index: f.length;
            if (k > 0) {
                this._8._5(e, f.substring(0, k), d)
            }
            if (!h) {
                break
            }
            if (!j._4) {
                j = new this.constructor(j)
            }
            j._4(e, h, d);
            var a = h.index + h[0].length;
            f = f.substring(a);
            for (var c = 0; c < this._0.length; c++) {
                if (g[c]) {
                    if (g[c].index >= a) {
                        g[c].index -= a
                    } else {
                        g[c] = void 0
                    }
                }
            }
        }
        return this
    },
    _8: {
        _5: function(e, b, d) {
            if (d && d.forIE) {
                b = b.replace(/\n/g, ' \r')
            }
            e.appendChild(document.createTextNode(b))
        }
    }
};
creole._i.prototype.constructor = creole._i;
creole.prototype = new creole._9();
creole.prototype.constructor = creole;;
/*! iScroll v5.1.1 ~ (c) 2008-2014 Matteo Spinelli ~ http://cubiq.org/license */
(function (window, document, Math) {
    var rAF = window.requestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    window.mozRequestAnimationFrame ||
    window.oRequestAnimationFrame ||
    window.msRequestAnimationFrame ||
    function (callback) {
        window.setTimeout(callback, 1000 / 60);
    };

    var utils = (function () {
        var me = {};

        var _elementStyle = document.createElement('div').style;
        var _vendor = (function () {
            var vendors = ['t', 'webkitT', 'MozT', 'msT', 'OT'],
            transform,
            i = 0,
            l = vendors.length;

            for ( ; i < l; i++ ) {
                transform = vendors[i] + 'ransform';
                if ( transform in _elementStyle )
                    return vendors[i].substr(0, vendors[i].length - 1);
            }

            return false;
        })();

        function _prefixStyle (style) {
            if ( _vendor === false )
                return false;
            if ( _vendor === '' )
                return style;
            return _vendor + style.charAt(0).toUpperCase() + style.substr(1);
        }

        me.getTime = Date.now || function getTime () {
            return new Date().getTime();
        };

        me.extend = function (target, obj) {
            for ( var i in obj ) {
                target[i] = obj[i];
            }
        };

        me.addEvent = function (el, type, fn, capture) {
            el.addEventListener(type, fn, !!capture);
        };

        me.removeEvent = function (el, type, fn, capture) {
            el.removeEventListener(type, fn, !!capture);
        };

        me.momentum = function (current, start, time, lowerMargin, wrapperSize, deceleration) {
            var distance = current - start,
            speed = Math.abs(distance) / time,
            destination,
            duration;

            deceleration = deceleration === undefined ? 0.0006 : deceleration;

            destination = current + ( speed * speed ) / ( 2 * deceleration ) * ( distance < 0 ? - 1 : 1 );
            duration = speed / deceleration;

            if ( destination < lowerMargin ) {
                destination = wrapperSize ? lowerMargin - ( wrapperSize / 2.5 * ( speed / 8 ) ) : lowerMargin;
                distance = Math.abs(destination - current);
                duration = distance / speed;
            } else if ( destination > 0 ) {
                destination = wrapperSize ? wrapperSize / 2.5 * ( speed / 8 ) : 0;
                distance = Math.abs(current) + destination;
                duration = distance / speed;
            }

            return {
                destination: Math.round(destination),
                duration: duration
            };
        };

        var _transform = _prefixStyle('transform');

        me.extend(me, {
            hasTransform: _transform !== false,
            hasPerspective: _prefixStyle('perspective') in _elementStyle,
            hasTouch: 'ontouchstart' in window,
            hasPointer: navigator.msPointerEnabled,
            hasTransition: _prefixStyle('transition') in _elementStyle
        });

        // This should find all Android browsers lower than build 535.19 (both stock browser and webview)
        me.isBadAndroid = /Android /.test(window.navigator.appVersion) && !(/Chrome\/\d/.test(window.navigator.appVersion));

        me.extend(me.style = {}, {
            transform: _transform,
            transitionTimingFunction: _prefixStyle('transitionTimingFunction'),
            transitionDuration: _prefixStyle('transitionDuration'),
            transitionDelay: _prefixStyle('transitionDelay'),
            transformOrigin: _prefixStyle('transformOrigin')
        });

        me.hasClass = function (e, c) {
            var re = new RegExp("(^|\\s)" + c + "(\\s|$)");
            return re.test(e.className);
        };

        me.addClass = function (e, c) {
            if ( me.hasClass(e, c) ) {
                return;
            }

            var newclass = e.className.split(' ');
            newclass.push(c);
            e.className = newclass.join(' ');
        };

        me.removeClass = function (e, c) {
            if ( !me.hasClass(e, c) ) {
                return;
            }

            var re = new RegExp("(^|\\s)" + c + "(\\s|$)", 'g');
            e.className = e.className.replace(re, ' ');
        };

        me.offset = function (el) {
            var left = - el.offsetLeft,
            top = - el.offsetTop;

            // jshint -W084
            while (el = el.offsetParent) {
                left -= el.offsetLeft;
                top -= el.offsetTop;
            }
            // jshint +W084

            return {
                left: left,
                top: top
            };
        };

        me.preventDefaultException = function (el, exceptions) {
            for ( var i in exceptions ) {
                if ( exceptions[i].test(el[i]) ) {
                    return true;
                }
            }

            return false;
        };

        me.extend(me.eventType = {}, {
            touchstart: 1,
            touchmove: 1,
            touchend: 1,

            mousedown: 2,
            mousemove: 2,
            mouseup: 2,

            MSPointerDown: 3,
            MSPointerMove: 3,
            MSPointerUp: 3
        });

        me.extend(me.ease = {}, {
            quadratic: {
                style: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
                fn: function (k) {
                    return k * ( 2 - k );
                }
            },
            circular: {
                style: 'cubic-bezier(0.1, 0.57, 0.1, 1)',
                // Not properly "circular" but this looks better, it should be (0.075, 0.82, 0.165, 1)
                fn: function (k) {
                    return Math.sqrt( 1 - ( --k * k ) );
                }
            },
            back: {
                style: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',
                fn: function (k) {
                    var b = 4;
                    return ( k = k - 1 ) * k * ( ( b + 1 ) * k + b ) + 1;
                }
            },
            bounce: {
                style: '',
                fn: function (k) {
                    if ( ( k /= 1 ) < ( 1 / 2.75 ) ) {
                        return 7.5625 * k * k;
                    } else if ( k < ( 2 / 2.75 ) ) {
                        return 7.5625 * ( k -= ( 1.5 / 2.75 ) ) * k + 0.75;
                    } else if ( k < ( 2.5 / 2.75 ) ) {
                        return 7.5625 * ( k -= ( 2.25 / 2.75 ) ) * k + 0.9375;
                    } else {
                        return 7.5625 * ( k -= ( 2.625 / 2.75 ) ) * k + 0.984375;
                    }
                }
            },
            elastic: {
                style: '',
                fn: function (k) {
                    var f = 0.22,
                    e = 0.4;

                    if ( k === 0 ) {
                        return 0;
                    }
                    if ( k == 1 ) {
                        return 1;
                    }

                    return ( e * Math.pow( 2, - 10 * k ) * Math.sin( ( k - f / 4 ) * ( 2 * Math.PI ) / f ) + 1 );
                }
            }
        });

        me.tap = function (e, eventName) {
            var ev = document.createEvent('Event');
            ev.initEvent(eventName, true, true);
            ev.pageX = e.pageX;
            ev.pageY = e.pageY;
            e.target.dispatchEvent(ev);
        };

        me.click = function (e) {
            var target = e.target,
            ev;

            if ( !(/(SELECT|INPUT|TEXTAREA)/i).test(target.tagName) ) {
                ev = document.createEvent('MouseEvents');
                ev.initMouseEvent('click', true, true, e.view, 1,
                target.screenX, target.screenY, target.clientX, target.clientY,
                e.ctrlKey, e.altKey, e.shiftKey, e.metaKey,
                0, null);

                ev._constructed = true;
                target.dispatchEvent(ev);
            }
        };

        return me;
    })();

    function IScroll (el, options) {
        this.wrapper = typeof el == 'string' ? document.querySelector(el) : el;
        this.scroller = this.wrapper.children[0];
        this.scrollerStyle = this.scroller.style; // cache style for better performance

        this.options = {

            // INSERT POINT: OPTIONS

            startX: 0,
            startY: 0,
            scrollY: true,
            directionLockThreshold: 5,
            momentum: true,

            bounce: true,
            bounceTime: 600,
            bounceEasing: '',

            preventDefault: true,
            preventDefaultException: {
                tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT)$/
            },

            HWCompositing: true,
            useTransition: true,
            useTransform: true
        };

        for ( var i in options ) {
            this.options[i] = options[i];
        }

        // Normalize options
        this.translateZ = this.options.HWCompositing && utils.hasPerspective ? ' translateZ(0)' : '';

        this.options.useTransition = utils.hasTransition && this.options.useTransition;
        this.options.useTransform = utils.hasTransform && this.options.useTransform;

        this.options.eventPassthrough = this.options.eventPassthrough === true ? 'vertical' : this.options.eventPassthrough;
        this.options.preventDefault = !this.options.eventPassthrough && this.options.preventDefault;

        // If you want eventPassthrough I have to lock one of the axes
        this.options.scrollY = this.options.eventPassthrough == 'vertical' ? false : this.options.scrollY;
        this.options.scrollX = this.options.eventPassthrough == 'horizontal' ? false : this.options.scrollX;

        // With eventPassthrough we also need lockDirection mechanism
        this.options.freeScroll = this.options.freeScroll && !this.options.eventPassthrough;
        this.options.directionLockThreshold = this.options.eventPassthrough ? 0 : this.options.directionLockThreshold;

        this.options.bounceEasing = typeof this.options.bounceEasing == 'string' ? utils.ease[this.options.bounceEasing] || utils.ease.circular : this.options.bounceEasing;

        this.options.resizePolling = this.options.resizePolling === undefined ? 60 : this.options.resizePolling;

        if ( this.options.tap === true ) {
            this.options.tap = 'tap';
        }

        // INSERT POINT: NORMALIZATION

        // Some defaults
        this.x = 0;
        this.y = 0;
        this.directionX = 0;
        this.directionY = 0;
        this._events = {};

        // INSERT POINT: DEFAULTS

        this._init();
        this.refresh();

        this.scrollTo(this.options.startX, this.options.startY);
        this.enable();
    }

    IScroll.prototype = {
        version: '5.1.1',

        _init: function () {
            this._initEvents();

            // INSERT POINT: _init

        },

        destroy: function () {
            this._initEvents(true);

            this._execEvent('destroy');
        },

        _transitionEnd: function (e) {
            if ( e.target != this.scroller || !this.isInTransition ) {
                return;
            }

            this._transitionTime();
            if ( !this.resetPosition(this.options.bounceTime) ) {
                this.isInTransition = false;
                this._execEvent('scrollEnd');
            }
        },

        _start: function (e) {
            // React to left mouse button only
            if ( utils.eventType[e.type] != 1 ) {
                if ( e.button !== 0 ) {
                    return;
                }
            }

            if ( !this.enabled || (this.initiated && utils.eventType[e.type] !== this.initiated) ) {
                return;
            }

            if ( this.options.preventDefault && !utils.isBadAndroid && !utils.preventDefaultException(e.target, this.options.preventDefaultException) ) {
                e.preventDefault();
            }

            var point = e.touches ? e.touches[0] : e,
            pos;

            this.initiated = utils.eventType[e.type];
            this.moved = false;
            this.distX = 0;
            this.distY = 0;
            this.directionX = 0;
            this.directionY = 0;
            this.directionLocked = 0;

            this._transitionTime();

            this.startTime = utils.getTime();

            if ( this.options.useTransition && this.isInTransition ) {
                this.isInTransition = false;
                pos = this.getComputedPosition();
                this._translate(Math.round(pos.x), Math.round(pos.y));
                this._execEvent('scrollEnd');
            } else if ( !this.options.useTransition && this.isAnimating ) {
                this.isAnimating = false;
                this._execEvent('scrollEnd');
            }

            this.startX = this.x;
            this.startY = this.y;
            this.absStartX = this.x;
            this.absStartY = this.y;
            this.pointX = point.pageX;
            this.pointY = point.pageY;

            this._execEvent('beforeScrollStart');
        },

        _move: function (e) {
            if ( !this.enabled || utils.eventType[e.type] !== this.initiated ) {
                return;
            }

            if ( this.options.preventDefault ) {
                // increases performance on Android? TODO: check!
                e.preventDefault();
            }

            var point = e.touches ? e.touches[0] : e,
            deltaX = point.pageX - this.pointX,
            deltaY = point.pageY - this.pointY,
            timestamp = utils.getTime(),
            newX, newY,
            absDistX, absDistY;

            this.pointX = point.pageX;
            this.pointY = point.pageY;

            this.distX += deltaX;
            this.distY += deltaY;
            absDistX = Math.abs(this.distX);
            absDistY = Math.abs(this.distY);

            // We need to move at least 10 pixels for the scrolling to initiate
            if ( timestamp - this.endTime > 300 && (absDistX < 10 && absDistY < 10) ) {
                return;
            }

            // If you are scrolling in one direction lock the other
            if ( !this.directionLocked && !this.options.freeScroll ) {
                if ( absDistX > absDistY + this.options.directionLockThreshold ) {
                    this.directionLocked = 'h'; // lock horizontally
                } else if ( absDistY >= absDistX + this.options.directionLockThreshold ) {
                    this.directionLocked = 'v'; // lock vertically
                } else {
                    this.directionLocked = 'n'; // no lock
                }
            }

            if ( this.directionLocked == 'h' ) {
                if ( this.options.eventPassthrough == 'vertical' ) {
                    e.preventDefault();
                } else if ( this.options.eventPassthrough == 'horizontal' ) {
                    this.initiated = false;
                    return;
                }

                deltaY = 0;
            } else if ( this.directionLocked == 'v' ) {
                if ( this.options.eventPassthrough == 'horizontal' ) {
                    e.preventDefault();
                } else if ( this.options.eventPassthrough == 'vertical' ) {
                    this.initiated = false;
                    return;
                }

                deltaX = 0;
            }

            deltaX = this.hasHorizontalScroll ? deltaX : 0;
            deltaY = this.hasVerticalScroll ? deltaY : 0;

            newX = this.x + deltaX;
            newY = this.y + deltaY;

            // Slow down if outside of the boundaries
            if ( newX > 0 || newX < this.maxScrollX ) {
                newX = this.options.bounce ? this.x + deltaX / 3 : newX > 0 ? 0 : this.maxScrollX;
            }
            if ( newY > 0 || newY < this.maxScrollY ) {
                newY = this.options.bounce ? this.y + deltaY / 3 : newY > 0 ? 0 : this.maxScrollY;
            }

            this.directionX = deltaX > 0 ? - 1 : deltaX < 0 ? 1 : 0;
            this.directionY = deltaY > 0 ? - 1 : deltaY < 0 ? 1 : 0;

            if ( !this.moved ) {
                this._execEvent('scrollStart');
            }

            this.moved = true;

            this._translate(newX, newY);

            /* REPLACE START: _move */

            if ( timestamp - this.startTime > 300 ) {
                this.startTime = timestamp;
                this.startX = this.x;
                this.startY = this.y;
            }

            /* REPLACE END: _move */

        },

        _end: function (e) {
            if ( !this.enabled || utils.eventType[e.type] !== this.initiated ) {
                return;
            }

            if ( this.options.preventDefault && !utils.preventDefaultException(e.target, this.options.preventDefaultException) ) {
                e.preventDefault();
            }

            var point = e.changedTouches ? e.changedTouches[0] : e,
            momentumX,
            momentumY,
            duration = utils.getTime() - this.startTime,
            newX = Math.round(this.x),
            newY = Math.round(this.y),
            distanceX = Math.abs(newX - this.startX),
            distanceY = Math.abs(newY - this.startY),
            time = 0,
            easing = '';

            this.isInTransition = 0;
            this.initiated = 0;
            this.endTime = utils.getTime();

            // reset if we are outside of the boundaries
            if ( this.resetPosition(this.options.bounceTime) ) {
                return;
            }

            this.scrollTo(newX, newY); // ensures that the last position is rounded

            // we scrolled less than 10 pixels
            if ( !this.moved ) {
                if ( this.options.tap ) {
                    utils.tap(e, this.options.tap);
                }

                if ( this.options.click ) {
                    utils.click(e);
                }

                this._execEvent('scrollCancel');
                return;
            }

            if ( this._events.flick && duration < 200 && distanceX < 100 && distanceY < 100 ) {
                this._execEvent('flick');
                return;
            }

            // start momentum animation if needed
            if ( this.options.momentum && duration < 300 ) {
                momentumX = this.hasHorizontalScroll ? utils.momentum(this.x, this.startX, duration, this.maxScrollX, this.options.bounce ? this.wrapperWidth : 0, this.options.deceleration) : {
                    destination: newX,
                    duration: 0
                };
                momentumY = this.hasVerticalScroll ? utils.momentum(this.y, this.startY, duration, this.maxScrollY, this.options.bounce ? this.wrapperHeight : 0, this.options.deceleration) : {
                    destination: newY,
                    duration: 0
                };
                newX = momentumX.destination;
                newY = momentumY.destination;
                time = Math.max(momentumX.duration, momentumY.duration);
                this.isInTransition = 1;
            }

            // INSERT POINT: _end

            if ( newX != this.x || newY != this.y ) {
                // change easing function when scroller goes out of the boundaries
                if ( newX > 0 || newX < this.maxScrollX || newY > 0 || newY < this.maxScrollY ) {
                    easing = utils.ease.quadratic;
                }

                this.scrollTo(newX, newY, time, easing);
                return;
            }

            this._execEvent('scrollEnd');
        },

        _resize: function () {
            var that = this;

            clearTimeout(this.resizeTimeout);

            this.resizeTimeout = setTimeout(function () {
                that.refresh();
            }, this.options.resizePolling);
        },

        resetPosition: function (time) {
            var x = this.x,
            y = this.y;

            time = time || 0;

            if ( !this.hasHorizontalScroll || this.x > 0 ) {
                x = 0;
            } else if ( this.x < this.maxScrollX ) {
                x = this.maxScrollX;
            }

            if ( !this.hasVerticalScroll || this.y > 0 ) {
                y = 0;
            } else if ( this.y < this.maxScrollY ) {
                y = this.maxScrollY;
            }

            if ( x == this.x && y == this.y ) {
                return false;
            }

            this.scrollTo(x, y, time, this.options.bounceEasing);

            return true;
        },

        disable: function () {
            this.enabled = false;
        },

        enable: function () {
            this.enabled = true;
        },

        refresh: function () {
            var rf = this.wrapper.offsetHeight; // Force reflow

            this.wrapperWidth = this.wrapper.clientWidth;
            this.wrapperHeight = this.wrapper.clientHeight;

            /* REPLACE START: refresh */

            this.scrollerWidth = this.scroller.offsetWidth;
            this.scrollerHeight = this.scroller.offsetHeight;

            this.maxScrollX = this.wrapperWidth - this.scrollerWidth;
            this.maxScrollY = this.wrapperHeight - this.scrollerHeight;

            /* REPLACE END: refresh */

            this.hasHorizontalScroll = this.options.scrollX && this.maxScrollX < 0;
            this.hasVerticalScroll = this.options.scrollY && this.maxScrollY < 0;

            if ( !this.hasHorizontalScroll ) {
                this.maxScrollX = 0;
                this.scrollerWidth = this.wrapperWidth;
            }

            if ( !this.hasVerticalScroll ) {
                this.maxScrollY = 0;
                this.scrollerHeight = this.wrapperHeight;
            }

            this.endTime = 0;
            this.directionX = 0;
            this.directionY = 0;

            this.wrapperOffset = utils.offset(this.wrapper);

            this._execEvent('refresh');

            this.resetPosition();

            // INSERT POINT: _refresh

        },

        on: function (type, fn) {
            if ( !this._events[type] ) {
                this._events[type] = [];
            }

            this._events[type].push(fn);
        },

        off: function (type, fn) {
            if ( !this._events[type] ) {
                return;
            }

            var index = this._events[type].indexOf(fn);

            if ( index > - 1 ) {
                this._events[type].splice(index, 1);
            }
        },

        _execEvent: function (type) {
            if ( !this._events[type] ) {
                return;
            }

            var i = 0,
            l = this._events[type].length;

            if ( !l ) {
                return;
            }

            for ( ; i < l; i++ ) {
                this._events[type][i].apply(this, [].slice.call(arguments, 1));
            }
        },

        scrollBy: function (x, y, time, easing) {
            x = this.x + x;
            y = this.y + y;
            time = time || 0;

            this.scrollTo(x, y, time, easing);
        },

        scrollTo: function (x, y, time, easing) {
            easing = easing || utils.ease.circular;

            this.isInTransition = this.options.useTransition && time > 0;

            if ( !time || (this.options.useTransition && easing.style) ) {
                this._transitionTimingFunction(easing.style);
                this._transitionTime(time);
                this._translate(x, y);
            } else {
                this._animate(x, y, time, easing.fn);
            }
        },

        scrollToElement: function (el, time, offsetX, offsetY, easing) {
            el = el.nodeType ? el : this.scroller.querySelector(el);

            if ( !el ) {
                return;
            }

            var pos = utils.offset(el);

            pos.left -= this.wrapperOffset.left;
            pos.top -= this.wrapperOffset.top;

            // if offsetX/Y are true we center the element to the screen
            if ( offsetX === true ) {
                offsetX = Math.round(el.offsetWidth / 2 - this.wrapper.offsetWidth / 2);
            }
            if ( offsetY === true ) {
                offsetY = Math.round(el.offsetHeight / 2 - this.wrapper.offsetHeight / 2);
            }

            pos.left -= offsetX || 0;
            pos.top -= offsetY || 0;

            pos.left = pos.left > 0 ? 0 : pos.left < this.maxScrollX ? this.maxScrollX : pos.left;
            pos.top = pos.top > 0 ? 0 : pos.top < this.maxScrollY ? this.maxScrollY : pos.top;

            time = time === undefined || time === null || time === 'auto' ? Math.max(Math.abs(this.x - pos.left), Math.abs(this.y - pos.top)) : time;

            this.scrollTo(pos.left, pos.top, time, easing);
        },

        _transitionTime: function (time) {
            time = time || 0;

            this.scrollerStyle[utils.style.transitionDuration] = time + 'ms';

            if ( !time && utils.isBadAndroid ) {
                this.scrollerStyle[utils.style.transitionDuration] = '0.001s';
            }

            // INSERT POINT: _transitionTime

        },

        _transitionTimingFunction: function (easing) {
            this.scrollerStyle[utils.style.transitionTimingFunction] = easing;

            // INSERT POINT: _transitionTimingFunction

        },

        _translate: function (x, y) {
            if ( this.options.useTransform ) {

                /* REPLACE START: _translate */

                this.scrollerStyle[utils.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.translateZ;

                /* REPLACE END: _translate */

            } else {
                x = Math.round(x);
                y = Math.round(y);
                this.scrollerStyle.left = x + 'px';
                this.scrollerStyle.top = y + 'px';
            }

            this.x = x;
            this.y = y;

            // INSERT POINT: _translate

        },

        _initEvents: function (remove) {
            var eventType = remove ? utils.removeEvent : utils.addEvent,
            target = this.options.bindToWrapper ? this.wrapper : window;

            eventType(window, 'orientationchange', this);
            eventType(window, 'resize', this);

            if ( this.options.click ) {
                eventType(this.wrapper, 'click', this, true);
            }

            if ( !this.options.disableMouse ) {
                eventType(this.wrapper, 'mousedown', this);
                eventType(target, 'mousemove', this);
                eventType(target, 'mousecancel', this);
                eventType(target, 'mouseup', this);
            }

            if ( utils.hasPointer && !this.options.disablePointer ) {
                eventType(this.wrapper, 'MSPointerDown', this);
                eventType(target, 'MSPointerMove', this);
                eventType(target, 'MSPointerCancel', this);
                eventType(target, 'MSPointerUp', this);
            }

            if ( utils.hasTouch && !this.options.disableTouch ) {
                eventType(this.wrapper, 'touchstart', this);
                eventType(target, 'touchmove', this);
                eventType(target, 'touchcancel', this);
                eventType(target, 'touchend', this);
            }

            eventType(this.scroller, 'transitionend', this);
            eventType(this.scroller, 'webkitTransitionEnd', this);
            eventType(this.scroller, 'oTransitionEnd', this);
            eventType(this.scroller, 'MSTransitionEnd', this);
        },

        getComputedPosition: function () {
            var matrix = window.getComputedStyle(this.scroller, null),
            x, y;

            if ( this.options.useTransform ) {
                matrix = matrix[utils.style.transform].split(')')[0].split(', ');
                x = + (matrix[12] || matrix[4]);
                y = + (matrix[13] || matrix[5]);
            } else {
                x = + matrix.left.replace(/[^-\d.]/g, '');
                y = + matrix.top.replace(/[^-\d.]/g, '');
            }

            return {
                x: x,
                y: y
            };
        },

        _animate: function (destX, destY, duration, easingFn) {
            var that = this,
            startX = this.x,
            startY = this.y,
            startTime = utils.getTime(),
            destTime = startTime + duration;

            function step () {
                var now = utils.getTime(),
                newX, newY,
                easing;

                if ( now >= destTime ) {
                    that.isAnimating = false;
                    that._translate(destX, destY);

                    if ( !that.resetPosition(that.options.bounceTime) ) {
                        that._execEvent('scrollEnd');
                    }

                    return;
                }

                now = ( now - startTime ) / duration;
                easing = easingFn(now);
                newX = ( destX - startX ) * easing + startX;
                newY = ( destY - startY ) * easing + startY;
                that._translate(newX, newY);

                if ( that.isAnimating ) {
                    rAF(step);
                }
            }

            this.isAnimating = true;
            step();
        },
        handleEvent: function (e) {
            switch ( e.type ) {
            case 'touchstart':
            case 'MSPointerDown':
            case 'mousedown':
                this._start(e);
                break;
            case 'touchmove':
            case 'MSPointerMove':
            case 'mousemove':
                this._move(e);
                break;
            case 'touchend':
            case 'MSPointerUp':
            case 'mouseup':
            case 'touchcancel':
            case 'MSPointerCancel':
            case 'mousecancel':
                this._end(e);
                break;
            case 'orientationchange':
            case 'resize':
                this._resize();
                break;
            case 'transitionend':
            case 'webkitTransitionEnd':
            case 'oTransitionEnd':
            case 'MSTransitionEnd':
                this._transitionEnd(e);
                break;
            case 'wheel':
            case 'DOMMouseScroll':
            case 'mousewheel':
                this._wheel(e);
                break;
            case 'keydown':
                this._key(e);
                break;
            case 'click':
                if ( !e._constructed ) {
                    e.preventDefault();
                    e.stopPropagation();
                }
                break;
            }
        }
    };
    IScroll.utils = utils;

    if ( typeof module != 'undefined' && module.exports ) {
        module.exports = IScroll;
    } else {
        window.IScroll = IScroll;
    }

})(window, document, Math);;

//fix modal force focus
$.fn.modal.Constructor.prototype.enforceFocus = function () {
    var that = this;
    $(document).on('focusin.modal', function (e) {
        if ($(e.target).hasClass('select2-input')) {
            return true;
        }

        if (that.$element[0] !== e.target && !that.$element.has(e.target).length) {
            that.$element.focus();
        }
    });
};;
(function() {

    angular.module('JoclyPlazzaApp', [])
    .provider('jpzAppConfig', [function() {
        this.$get = function() {};
        this.getRoutes = function() {
            var routes = [
            ['/about', {
                templateUrl : '/jocly/plazza/partial-main/about',
                controller: 'jpzMainAboutCtrl',
            }
            ],
            ];
            routes.push(['/apps', {
                templateUrl : '/jocly/plazza/partial-main/apps',
                controller: 'jpzAppsCtrl',
            }
            ]);
            if (JoclyPlazza.features.tournaments) {
                routes.push(['/tournaments', {
                    templateUrl : '/jocly/plazza/partial/tournaments',
                    controller : 'jpzTournamentsCtrl',
                }
                ]);
                routes.push(['/closed-tournaments', {
                    templateUrl : '/jocly/plazza/partial/closed-tournaments',
                    controller : 'jpzClosedTournamentsCtrl',
                }
                ]);
                routes.push(['/create-tournament-intro', {
                    templateUrl : '/jocly/plazza/partial/create-tournament-intro',
                    controller : 'jpzCreateTournamentIntroCtrl',
                }
                ]);
                routes.push(['/create-tournament-form', {
                    templateUrl : '/jocly/plazza/partial/tournament-form',
                    controller : 'jpzCreateTournamentCtrl',
                }
                ]);
            }
            return routes;
        };
        this.defaultRoute = function(a, b, locationSearch) {
            if (/^\/index\.html$/.test(b))
                return '/games';
            else
                return '/not-found';
        };
    }
    ])
    .run([
    function() {
        console.log("App main");
    }
    ]);

})();;

(function() {

    'use strict';

    angular.module('JoclyPlazza', ['ngRoute', 'ngAnimate', 'ngSanitize', 'ngTouch', 'ngCookies', 'ui.select2',
    'com.jocly.jfx', 'JoclyPlazzaApp']).config(
    ['$routeProvider', '$locationProvider', '$compileProvider', 'jpzAppConfigProvider', function($routeProvider, $locationProvider, $compileProvider, jpzAppConfig) {
        $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|data):/);
        $routeProvider.when('/not-implemented', {
            templateUrl : '/jocly/plazza/partial/not-implemented',
        }).when('/not-found', {
            templateUrl : '/jocly/plazza/partial/not-found',
        }).when('/loading', {
            templateUrl : '/jocly/plazza/partial/loading',
        }).when('/loading-page', {
            templateUrl : '/jocly/plazza/partial/loading-page',
        }).when('/error', {
            templateUrl : '/jocly/plazza/partial/error',
        }).when('/demo/:gameName', {
            templateUrl : '/jocly/plazza/partial/loading',
            controller : 'jpzPlayletDemoCtrl',
        }).when('/games', {
            templateUrl : '/jocly/plazza/partial/games',
            controller: 'pziteGamesCtrl',
        }).when('/game/:gameName', {
            templateUrl : '/jocly/plazza/partial/game',
            controller : 'pziteGameCtrl',
        }).when('/play/:gameName', {
            templateUrl : '/jocly/plazza/partial/loading-page',
            controller : 'jpzPlayletPlayCtrl',
        }).when('/best-players/:gameName', {
            templateUrl : '/jocly/plazza/partial/best-players',
            controller: 'pziteBestPlayersCtrl',
        }).when('/pref-page', {
            templateUrl : '/jocly/plazza/partial/pref-page',
            controller: 'jpzPrefPageCtrl',
        }).when('/played', {
            templateUrl : '/jocly/plazza/partial/played',
            controller: 'pzitePlayedGamesCtrl',
        }).when('/played/:gameName', {
            templateUrl : '/jocly/plazza/partial/played',
            controller: 'pzitePlayedGamesCtrl',
        }).when('/live/:gameId', {
            templateUrl : '/jocly/plazza/partial/loading',
            controller : 'pziteLiveCtrl',
        }).when('/my-tables', {
            templateUrl : '/jocly/plazza/partial/tables',
            controller : 'pziteSelfTablesCtrl',
        }).when('/open-tables', {
            templateUrl : '/jocly/plazza/partial/tables',
            controller : 'pziteOpenTablesCtrl',
        }).when('/running', {
            templateUrl : '/jocly/plazza/partial/tables',
            controller : 'pziteRunningTablesCtrl',
        }).when('/users', {
            templateUrl : '/jocly/plazza/partial/users',
            controller : 'jpzUsersCtrl',
        }).when('/news', {
            templateUrl : '/jocly/plazza/partial/news',
            controller: 'pziteNewsCtrl',
        }).when('/game-dev/:gameName', {
            templateUrl : '/jocly/plazza/partial/playlet',
            controller : 'jpzGameDevCtrl',
        }).when('/playlet/:playletId', {
            templateUrl : '/jocly/plazza/partial/playlet',
            controller : 'jpzPlayletCtrl',
        }).when('/', {
            redirectTo : '/about',
        }).when('/view/:gameId', {
            templateUrl : '/jocly/plazza/partial/loading',
            controller : 'pziteLiveCtrl',
        }).when('/game-details/:gameName', {
            templateUrl : '/jocly/plazza/partial/game-details-page',
            controller : 'jpzGameDetailsCtrl',
        }).when('/user-info/:userId', {
            templateUrl : '/jocly/plazza/partial/user-info-page',
            controller : 'jpzUserInfoPageCtrl',
        }).when('/invitation/:tableId', {
            templateUrl : '/jocly/plazza/partial/invitation-page',
            controller : 'jpzInvitationCtrl',
        }).when('/debug', {
            templateUrl : '/jocly/plazza/partial/debug-page',
            controller : 'pziteDebugCtrl',
        }).when('/unsupported/:gameName/:param1/:param2', {
            templateUrl : '/jocly/plazza/partial/unsupported-page',
            controller : 'pziteUnsupportedCtrl',
        }).when('/unsupported/:gameName/:param1', {
            templateUrl : '/jocly/plazza/partial/unsupported-page',
            controller : 'pziteUnsupportedCtrl',
        }).when('/unsupported/:gameName', {
            templateUrl : '/jocly/plazza/partial/unsupported-page',
            controller : 'pziteUnsupportedCtrl',
        });

        jpzAppConfig.getRoutes().forEach(function(routeDescr) {
            $routeProvider.when.apply($routeProvider, routeDescr);
        });

        if (JoclyPlazza.config.routes)
            for (var path in JoclyPlazza.config.routes)
                $routeProvider.when(path, JoclyPlazza.config.routes[path]);

        $routeProvider.otherwise({
            redirectTo : function(a, b, locationSearch) {
                return jpzAppConfig.defaultRoute(a, b, locationSearch);
            }
        });

        $locationProvider.html5Mode(false);
    }
    ]).run(
    [ 'jfxLayout',
    'JoclyPlazza.net', 'JoclyPlazza.games',
    'JoclyPlazza.user', 'JoclyPlazza.playlet',
    'JoclyPlazza.layout', 'JoclyPlazza.pref',
    'JoclyPlazza.translate', 'JoclyPlazza.webrtc',
    //'JoclyPlazza.analytics',
    function( jfxLayout, jpzNet, jpzGames, jpzUser, jpzPlaylet, jpzLayout, jpzPref, jpzTranslate, jpzWebRTC /*,jpzAnalytics*/
    ) {
        console.log("jQuery", jQuery.fn.jquery);
        console.log("AngularJS", angular.version.full);
        console.log("UserAgent", navigator.userAgent);
    }
    ]);

    angular.module('JoclyPlazza').controller('jpzApp',
    [ '$scope', '$rootScope', '$location', '$routeParams', '$window', '$timeout', '$cookies',
    'jfxLayout',
    'JoclyPlazza.net', 'JoclyPlazza.util',
    'JoclyPlazza.translate', 'JoclyPlazza.layout', 'JoclyPlazza.ads', 'JoclyPlazza.user',
    function($scope, $rootScope, $location, $routeParams, $window, $timeout, $cookies, jfxLayout, jpzNet, jpzUtil, jpzTranslate, jpzLayout, jpzAds, jpzUser) {

        /* parse initial URL parameters manually as $location.search() is not reliable */
        var m = /.*?\?(.*?)(?:#|$)/.exec($location.absUrl())
        if (m) {
            var params = m[1].split("&");
            angular.forEach(params, function(value) {
                m = /^(.*?)=(.*)$/.exec(value);
                if (m)
                    JoclyPlazza.config.request[m[1]] = decodeURIComponent(m[2]);
            });
        }

        $rootScope.selectPlayer = function(uid) {
            jpzUser.openUserInfoDialog(uid);
        }

        $scope.appSelected = {
            game : null,
        };

        $rootScope.features = JoclyPlazza.features;

        $rootScope.soloGame = JoclyPlazza.config.games.length == 1;

        $rootScope.predefModelViews = {};
        $rootScope.predefResources = {};

        $rootScope.notifications = [];

        $rootScope.globalChat = {
            messages: [],
            send: function(text) {
                console.log("send", text);
                if ($rootScope.eventsChannel)
                    $rootScope.eventsChannel.send({
                        type: "event",
                        event: "jchat",
                        text: text,
                    });
            },
        }

        $rootScope.activity = {
            index: 1,
            messages: [],
            add: function(message) {
                $rootScope.activity.messages.push($.extend({}, message, {
                    index: $rootScope.activity.index++,
                    date: Date.now(),
                }));
                if (message.show)
                    jpzLayout.showMessage(message);
                while ($rootScope.activity.messages.length > $rootScope.pref.user.maxActivityMessages)
                    $rootScope.activity.messages.shift();
                if (!$rootScope.$$phase)
                    $rootScope.$apply('activity.messages');
            },
        }

        $rootScope.isMobile = /android|iphone|ipad|ipod|mobile/i.test(navigator.userAgent);

        $rootScope.mainLayoutClasses = function() {
            var bb = $rootScope.pref.device.bigButtons;
            return {
                "jpz-big-buttons": bb == 'yes' || (bb == 'auto' && $rootScope.isMobile),
            }
        }

        /*
        				$scope.$watch('network.connected',function(connected) {
        					if(connected) {
        						$.ajax({
        							url: $rootScope.network.connData.baseURL+"hub/chat/"+$rootScope.network.serverId,
        							success: function(data) {
        								if(data.status) {
        									$rootScope.globalChat.messages.splice(0,$rootScope.globalChat.messages.length);
        									data.result.messages.sort(function(m1,m2) {
        										return m1.created-m2.created;
        									});
        									while(data.result.messages.length>$scope.pref.user.maxChatMessages)
        										data.result.messages.shift();
        									for(var i=0;i<data.result.messages.length;i++) {
        										var message=data.result.messages[i];
        										message.identity=data.result.users[message.from];
        										$rootScope.globalChat.messages.push(message);
        									}
        								}
        							}
        						})
        					}
        				});
        				*/

        $rootScope.pzLink = function(path) {
            return JoclyPlazza.config.baseURL + JoclyPlazza.config.pzPath + "/" + path;
        }

        $rootScope.go = function(path, replace) {
            $location.path(path);
            if (replace)
                $location.replace();
            if (!$rootScope.$$phase)
                $rootScope.$apply();
            return $location;
        }

        $rootScope.goTurnbased = function(gameId) {
            var existing = null;
            for (var id in $scope.playlets) {
                var playlet = $scope.playlets[id];
                if (playlet.mode == "turnbased" && playlet.options.gameId == gameId) {
                    existing = playlet;
                    break;
                }
            }
            if (existing)
                $scope.go("/playlet/" + existing.id);
            else
                $scope.go("/turnbased/" + gameId);
        }

        $rootScope.back = function(steps) {
            if (steps)
                $window.history.go( - steps);
            else
                $window.history.back();
        }

        jpzTranslate.addTranslation(JoclyPlazza.translations);

        $rootScope.t = function() {
            return jpzTranslate.translate.apply(null, arguments);
        }

        $rootScope.config = JoclyPlazza.config;

        $rootScope.log = function() {
            console.log.apply(console, arguments);
        }

        $rootScope.clearBodyClass = function() {
            $("body").removeClass("jpz-about-bg");
        }

        $rootScope.can3D = function() {
            if (!$rootScope.config.supports3D)
                return false;
            if ($rootScope.pref.device.allow3d == 'no')
                return false;
            if ($rootScope.pref.device.allow3d == 'yes')
                return true;
            //$rootScope.pref.device.allow3d=='auto'
            if (navigator.userAgent.match(/android|iphone|ipad|ipod/i))
                return false;
            if (navigator.userAgent.match(/MSIE [0-9]{1,}[\.0-9]{0,}/))
                return false;
            if (navigator.userAgent.match(/mobi/i))
                return false;
            if (navigator.appName == 'Netscape')
                if (navigator.userAgent.match(/Trident\/.*rv:[0-9]{1,}[\.0-9]{0,}/)) // IE11
                return false;
            return true;
        }

        $rootScope.serverTimeDiff = 0;

        $rootScope.lockScreenAvail = false;

        $scope.cancelLive = function(table) {
            console.log("Cancel", table);
            var channel = $scope.connection.channels[table.cancelId];
            if (channel)
                channel.disconnect();
        }

        $scope.cancelTurnbased = function(table) {
            console.log("cancel turnbased", table);
            $.ajax({
                url: $scope.network.connData.baseURL + "hub/turnbased/delete/" + table.gid,
                success: function(data) {
                    if (!data.status)
                        jpzLayout.alert({
                            title: $scope.t('error'),
                            text: data.error,
                        });
                },
                error: function() {
                    jpzLayout.alert({
                        title: $scope.t('error'),
                        text: $scope.t('network-error'),
                    });
                },
            });
        }

        $rootScope.showGameEnd = function(message, result, reason, gameId, callbacks, scope) {
            var attrs = {
                "jpz-game-end-dialog": true,
                "jpz-game-id": gameId,
                "jpz-result": result,
                "jpz-message": message,
            }
            if (reason)
                attrs["jpz-reason"] = reason;
            jpzLayout.openDialog($scope, "/jocly/plazza/partial/game-end", {
                classes: ['jpz-game-end'],
                attrs: attrs,
                callbacks: callbacks || null,
                scope: scope || $scope,
                onClose: function() {
                    jpzAds.show("gameEnd");
                }
            });
        }

        $rootScope.canVibrate = function() {
            return false;
        }

        $rootScope.openExternalLink = function(url) {
            if (JoclyPlazza.pzite && JoclyPlazza.pzite.cordova)
                $window.open(url, '_system');
            else
                $window.open(url, '_blank');
        }

        $scope.showRules = function(gameName) {
            jpzLayout.openDialog($scope, "/jocly/plazza/partial/rules", {
                classes: ['jpz-rules'],
                attrs: {
                    "jpz-rules-dialog": true,
                    "jpz-game-name": gameName,
                },
            });
        }

        $scope.getModel = function(gameName, callback) {
            $scope.getModelView(gameName, function(modelView) {
                callback(modelView.model);
            });
        }

        $scope.getModelView = function(gameName, callback) {
            var modelViewURL = $scope.config.baseURL + 'jocly/plazza/' + gameName + '/model-view.js';
            (function(r) {
                //console.log("getModelView: calling "+modelViewURL);
                r.require([modelViewURL], function(data) {
                    //console.log("getModelView: called");
                    callback(data);
                });
            })(require_jocly);
        }

        $scope.getModelLocale = function(model, which) {
            if (model[which]) {
                if (angular.isObject(model[which])) {
                    var locale = "en";
                    var m = /^(.*?)\-/.exec(JoclyPlazza.config.language);
                    if (m)
                        locale = m[1];
                    if (model[which][JoclyPlazza.config.language])
                        return model.fullPath + "/" + model[which][JoclyPlazza.config.language];
                    else
                        return model.fullPath + "/" + model[which]['en'];
                }
                return model.fullPath + "/" + model[which];
            }
            return null;
        }

        $scope.scrollViewChildTo = function(targetSel) {
            var view = $("#view");
            if (view.length && view.children().length) {
                var target = $(targetSel);
                if (target.length) {
                    view.children().first().stop().animate({
                        scrollTop: target.offset().top - view.offset().top,
                    }, 400);
                }
            }
        }

        $scope.swipeHandlers = [];
        $scope.pushSwipeHandler = function(callback) {
            $scope.swipeHandlers.push(callback);
        }
        $scope.popSwipeHandler = function() {
            $scope.swipeHandlers.pop();
        }
        $scope.swipe = function(direction) {
            if ($scope.features['swipe'] && $scope.swipeHandlers.length > 0)
                $scope.swipeHandlers[$scope.swipeHandlers.length - 1](direction);
        }

        $scope.canFullscreen = function() {
            return jpzUtil.canFullscreen();
        }

        $scope.isFullscreen = function() {
            return jpzUtil.isFullscreen();
        }

        $scope.toggleFullscreen = function() {
            if ($scope.isFullscreen())
                jpzUtil.cancelFullscreen();
            else
                jpzUtil.fullscreen();
        }

        if (!$rootScope.sendEmbed)
            $rootScope.sendEmbed = function(message) {}

        $scope.notifyDisplay = function(aGame) {}

        $scope.attachResources = function(aGame) {
            var gameNames = aGame.mViewOptions.model;
            if (typeof gameNames == "string")
                gameNames = [gameNames];
            var predefResources = {};
            gameNames.forEach(function(gameName) {
                $.extend(true, predefResources, $scope.predefResources[gameName]);
            });
            aGame.resources = predefResources;
            /*
            					var gameName=aGame.mViewOptions.model;
            					var predefResources=$scope.predefResources[gameName];
            					if(predefResources) {
            						aGame.resources=predefResources;
            					} else
            						aGame.resources={};
            					*/
        }

        /*
        				function TimingToText(timing) {
        					var duration,label;
        					if(timing.duration>=172800 && timing.duration%86400==0)
        						duration= jpzTranslate.translate("timing-days",{"@days":timing.duration/86400});
        					else if(timing.duration>=7200 && timing.duration%3600==0)
        						duration= jpzTranslate.translate("timing-hours",{"@hours":timing.duration/3600});
        					else if(timing.duration>=120 && timing.duration%60==0)
        						duration=jpzTranslate.translate("timing-minutes",{"@minutes":timing.duration/60});
        					else
        						duration=jpzTranslate.translate("timing-seconds",{"@seconds":timing.duration});
        					if(timing.type=="permove")
        						label=jpzTranslate.translate("timing-permove",{"@duration":duration});
        					else if(timing.type=="perplayer")
        						label=jpzTranslate.translate("timing-perplayer",{"@duration":duration});
        					else
        						label=jpzTranslate.translate("timing-perxxx",{"@duration":duration});
        					if(timing.durationextra && timing.durationextra>0)
        						label=jpzTranslate.translate("timing-additional",{"@main":label,"@add":timing.durationextra});
        					return label;
        				}
        				*/

        /*
        				function TimingToText(timing) {
        					var duration,label;
        					var short=timing.short;
        					if(short===undefined)
        						if(timing.duration<7200 && timing.additional)
        							short=true;
        						else
        							short=false;
        					if(timing.duration>=172800 && timing.duration%86400==0)
        						duration= jpzTranslate.translate(short?"timing-d":"timing-days",{"@days":timing.duration/86400});
        					else if(timing.duration>=7200 && timing.duration%3600==0)
        						duration= jpzTranslate.translate(short?"timing-h":"timing-hours",{"@hours":timing.duration/3600});
        					else if(timing.duration>=120 && timing.duration%60==0)
        						duration=jpzTranslate.translate(short?"timing-m":"timing-minutes",{"@minutes":timing.duration/60});
        					else
        						duration=jpzTranslate.translate(short?"timing-s":"timing-seconds",{"@seconds":timing.duration});
        					if(!timing.type)
        						timing.type=duration>=7200?"permove":"perplayer";
        					if(timing.type=="permove")
        						label=jpzTranslate.translate("timing-permove",{"@duration":duration});
        					else if(timing.type=="perplayer")
        						label=jpzTranslate.translate("timing-perplayer",{"@duration":duration});
        					if(timing.additional)
        						label=jpzTranslate.translate("timing-additional",{"@main":label,"@add":timing.additional});
        					return label;
        				}
        				*/

        function TimingDecode(timing) {
            var m = /^(\d+)(s|m|h|d)?(pm)?(?:\+(\d+)(s|m|h|d))?$/.exec(timing);
            if (!m)
                return null;
            var permove = false;
            function Duration(value, unit) {
                var dur = parseInt(value);
                if (unit == 'm')
                    dur*=60;
                else if (unit == 'h')
                    dur*=3600;
                else if (unit == 'd')
                    dur*=86400;
                return dur;
            }
            var duration = Duration(m[1], m[2]), extra = 0;
            if (m[3])
                permove = true;
            else if (m[4])
                extra = Duration(m[4], m[5]);
            return {
                duration: duration,
                extra: extra,
                permove: permove,
            }
        }

        function TimingValue(value, short) {
            var duration;
            if (value >= 172800 && value%86400 == 0)
                duration = jpzTranslate.translate(short ? "timing-d-nospace" : "timing-days", {
                    "@days": value / 86400
                });
            else if (value >= 7200 && value%3600 == 0)
                duration = jpzTranslate.translate(short ? "timing-h" : "timing-hours", {
                    "@hours": value / 3600
                });
            else if (value >= 120 && value%60 == 0)
                duration = jpzTranslate.translate(short ? "timing-m" : "timing-minutes", {
                    "@minutes": value / 60
                });
            else
                duration = jpzTranslate.translate(short ? "timing-s" : "timing-seconds", {
                    "@seconds": value
                });
            return duration;
        }

        function TimingToText(timing, short) {
            var tData = TimingDecode(timing);
            if (!tData)
                return "???";
            var str = TimingValue(tData.duration, short);
            if (tData.permove)
                str = jpzTranslate.translate(short ? "timing-pm" : "timing-permove", {
                    "@duration": str
                });
            else if (tData.extra) {
                str = jpzTranslate.translate(short ? "timing-pp" : "timing-perplayer", {
                    "@duration": str
                });
                var extra = TimingValue(tData.extra, short);
                str = jpzTranslate.translate(short ? "timing-xtra" : "timing-extra", {
                    "@main": str,
                    "@add": extra
                });
            } else
                str = jpzTranslate.translate(short ? "timing-pp" : "timing-perplayer", {
                    "@duration": str
                });
            return str;
        }

        $rootScope.timingDecode = TimingDecode;
        $rootScope.timingToText = TimingToText;

        /*
        				$rootScope.timingFromMode = function(mode) {
        					var m=/^([0-9]+)(d?)(?:\|([0-9]+))?$/.exec(mode);
        					if(!m) {
        						console.warn("Bad timing mode:",mode);
        						return {
        							duration: 0,
        							type: "permove",
        							additional: 0,
        						}
        					}
        					return {
        						duration: m
        					}
        				}
        				*/

        function DurationToText(duration, unit) {
            var text;
            switch (unit) {
            case 'seconds':
                text = duration <= 1 ? $rootScope.t('duration-second', {
                    '@d': duration
                }) : $rootScope.t('duration-seconds', {
                    '@d': duration
                });
                break;
            case 'minute':
                text = duration <= 1 ? $rootScope.t('duration-minute', {
                    '@d': duration
                }) : $rootScope.t('duration-minutes', {
                    '@d': duration
                });
                break;
            case 'hour':
                text = duration <= 1 ? $rootScope.t('duration-hour', {
                    '@d': duration
                }) : $rootScope.t('duration-hours', {
                    '@d': duration
                });
                break;
            case 'day':
                text = duration <= 1 ? $rootScope.t('duration-day', {
                    '@d': duration
                }) : $rootScope.t('duration-days', {
                    '@d': duration
                });
                break;
            default:
                text = "";
                if (duration < 120) {
                    text = $rootScope.t('timing-seconds', {
                        '@seconds': duration
                    });
                } else {
                    if (duration >= 86400) {
                        var days = Math.floor(duration / 86400);
                        if (days < 2)
                            text += $rootScope.t('timing-day', {
                                '@days': days
                            }) + ' ';
                        else
                            text += $rootScope.t('timing-days', {
                                '@days': days
                            }) + ' ';
                        duration%=86400;
                    }
                    if (duration >= 3600) {
                        text += Math.floor(duration / 3600) + ':';
                        duration%=3600;
                    }
                    var minutes = Math.floor(duration / 60);
                    if (minutes < 10)
                        text += "0";
                    text += minutes + ":";
                    var seconds = duration%60;
                    if (seconds < 10)
                        text += "0";
                    text += seconds;
                }
            }
            return text;
        }

        $rootScope.durationToText = DurationToText;

        $rootScope.tableJoined = function(message) {
            if (message.bySelf)
                $scope.go("/live/" + message.table.id);
            else {
                jpzLayout.openDialog($scope, "/jocly/plazza/partial/table-joined", {
                    autoClose: 5000,
                    message: message,
                    game: $scope.gamesMap[message.table.game],
                    openTable: function() {
                        $scope.go("/live/" + message.table.id);
                    }
                });
            }
        }

        $scope.$watch("pools.timings", function(timings) {
            $scope.timingsList = [];
            for (var i in timings) {
                var timing = timings[i];
                timing.title = TimingToText(timing);
                $scope.timingsList.push({
                    name: timing.name,
                    title: timing.title,
                });
            }
        });

        $rootScope.updateAppTitle = function(scope) {
            if (scope && typeof scope.getTitle == "function")
                $rootScope.appTitle = scope.getTitle();
            else
                $rootScope.appTitle = $scope.t('jocly');
            $("head title").text($scope.t('page-title', {
                '@title': $rootScope.appTitle
            }));
        }

        $rootScope.updatePageId = function(scope) {
            if (scope && typeof scope.getPageId == "function")
                $rootScope.pageId = scope.getPageId();
            else
                $rootScope.pageId = '';
        }

        $rootScope.breakingNews = null;
        $rootScope.breakingNewsTimer = null;
        $rootScope.addBreakingNews = function(news) {
            $rootScope.breakingNews = news;
            if ($rootScope.breakingNewsTimer)
                $timeout.cancel($rootScope.breakingNewsTimer);
            $rootScope.breakingNewsTimer = $timeout(function() {
                $rootScope.breakingNews = null;
                $rootScope.breakingNewsTimer = null;
            }, 3000);
            console.info("Breaking news: " + news);
            if (!$rootScope.$$phase)
                $rootScope.$apply();
        }

        var appliedCount = 0;
        $scope.scopeAppliedCount = function() {
            console.log("rootScope applied", appliedCount++);
            return "";
        }

        $rootScope.countryName = function(countryCode) {
            if ($rootScope.features['countryNames'])
                return JoclyPlazza.countryNames[countryCode] || JoclyPlazza.countryNames['XX'];
            else
                return '';
        }


        var allCountries = [];
        for (var code in JoclyPlazza.countryNames) {
            allCountries.push({
                code: code,
                name: JoclyPlazza.countryNames[code],
            });
        }
        $scope.allCountries = function() {
            return allCountries;
        }


        $rootScope.recInvitsCount = 0;
        $rootScope.$watchCollection('pools["invitations"]', function(invitations) {
            if ($rootScope.user.logged) {
                $rootScope.recInvitsCount = 0;
                for (var id in invitations) {
                    var invit = invitations[id];
                    if (invit.uid2 == $rootScope.user.userId)
                        $rootScope.recInvitsCount++;
                }
            } else
                $rootScope.recInvitsCount = 0;
        });

        var scopeAppliesSec = 0;
        var scopeAppliesCount = 0;
        $rootScope.$watch(function(scope) {
            if ($rootScope.pref.device.showScopeApplies) {
                var sec = Math.floor(Date.now() / 1000);
                if (sec != scopeAppliesSec) {
                    console.log("scope applies", scopeAppliesCount);
                    scopeAppliesCount = 0;
                    scopeAppliesSec = sec;
                } else
                    scopeAppliesCount++;
            }
            return false;
        }, function() {});

        $rootScope.$watch("pref.device.show3DStats", function(show) {
            JoclyPlazza.config.show3DStats = show;
        });

        $rootScope.$watch("config.language", function(newLang, oldLang) {
            function Redirect() {
                if (/cookie/.test($rootScope.features.langSwitcher))
                    $cookies.lang = newLang;
                if (/param/.test($rootScope.features.langSwitcher)) {
                    var params = {};
                    window.location.search.split(/\?|&/).forEach(function(p) {
                        var m = /^(.+?)=(.*)/.exec(p);
                        if (m)
                            params[m[1]] = m[2];
                    });
                    params.lang = newLang;
                    var paramStrs = [];
                    for (var p in params)
                        paramStrs.push(encodeURIComponent(p) + "=" + encodeURIComponent(params[p]));
                    window.location.search = paramStrs.join("&");
                }
                var m = /path_([a-zA-Z0-9\-\.]*__[a-zA-Z0-9\-\.]*)/.exec($rootScope.features.langSwitcher);
                if (m) {
                    var pathFile = m[1].replace("__", newLang);
                    m = /^(.*?)([^\/]*)$/.exec(window.location.pathname);
                    if (m) {
                        var pathname = null;
                        pathname = m[1] + pathFile;
                        if (pathname)
                            window.location = window.location.protocol + "//" + window.location.host + pathname +
                            window.location.search + window.location.hash;
                    }
                }
                if (window.localStorage)
                    window.localStorage.setItem("JoclyPlazza.lang", newLang);
            }
            if (newLang != oldLang) {
                if ($rootScope.user.logged)
                    $.ajax({
                        url: JoclyPlazza.config.cmsURL + "jocly/plazza/set-language?lang=" + newLang,
                        dataType: $rootScope.features.jsonp ? 'jsonp': 'json',
                        crossDomain: true,
                        complete: function() {
                            Redirect();
                        }
                    });
                else
                    Redirect();
            }
        });


        function TrackView(scope) {
            if (scope && $scope.ga && typeof scope.getPageId == "function")
                $scope.ga.track('view', scope.getPageId());
        }

        $scope.$on("$viewContentLoaded", function(event) {
            var scope = event.targetScope || null;
            $scope.updateAppTitle(scope);
            $scope.updatePageId(scope);
            TrackView(scope);
        });
        TrackView($scope);

        $window.onbeforeunload = function(event) {
            var liveGamesCount = 0;
            for (var id in $scope.playlets) {
                if ($rootScope.playlets[id].mode == "live")
                    liveGamesCount++;
            }
            if (liveGamesCount == 0)
                return undefined;
            var message;
            if (liveGamesCount == 1)
                message = $scope.t("leave-live-game");
            else
                message = $scope.t("leave-live-games", {
                    '@count': liveGamesCount
                });
            event = event || $window.event;
            if (event) {
                event.returnValue = message;
            }
            return message;
        }

        JoclyPlazza.getLogger = function(logName, pref) {
            function Logger(logName, pref) {
                this.logName = logName;
                this.pref = pref
            }
            Logger.prototype = {
                log: function() {
                    if ($rootScope.pref.device[this.pref])
                        console.log.apply(console, Array.prototype.concat.apply(["[" + this.logName + "]"], arguments));
                },
                warn: function() {
                    if ($rootScope.pref.device[this.pref])
                        console.warn.apply(console, Array.prototype.concat.apply(["[" + this.logName + "]"], arguments));
                },
                error: function() {
                    if ($rootScope.pref.device[this.pref])
                        console.error.apply(console, Array.prototype.concat.apply(["[" + this.logName + "]"], arguments));
                },
            }
            return new Logger(logName, pref);
        }

        if ($scope.features['apps']) {
            if (JoclyPlazza.apps) {
                var game2Apps = [];
                for (var id in JoclyPlazza.apps) {
                    var app = JoclyPlazza.apps[id];
                    var nbGames = 0;
                    app.thumbnail = JoclyPlazza.config.baseURL + JoclyPlazza.config.pzPath + "/images/apps/" + app.name + "-app.png";
                    ["iOS", "android", "firefox"].forEach(function(platform) {
                        if (app[platform] === undefined) {} else {
                            var a = app[platform];
                            if (a.games !== undefined) {
                                var games = a.games.split(",");
                                if (games.length > nbGames) {
                                    nbGames = games.length;
                                }
                                games.forEach(function(gameName) {
                                    if (game2Apps[gameName] === undefined) {
                                        game2Apps[gameName] = [];
                                    }
                                    var n = game2Apps[gameName].length;
                                    game2Apps[gameName][n] = {
                                        app: app,
                                        platform: platform
                                    };
                                });
                            }
                        }
                    });
                    app.nbMaxGames = nbGames;
                }
                JoclyPlazza.game2Apps = game2Apps;

                $rootScope.apps = JoclyPlazza.apps;
                $rootScope.game2Apps = JoclyPlazza.game2Apps;
                $rootScope.facebook = {
                    url: "https://apps.facebook.com/joclyfb/",
                    thumbnail: JoclyPlazza.config.baseURL + JoclyPlazza.config.pzPath + "/images/apps/facebook-app.png"
                };
                $rootScope.addon = {
                    url: "https://addons.mozilla.org/firefox/addon/jocly/",
                    thumbnail: JoclyPlazza.config.baseURL + JoclyPlazza.config.pzPath + "/images/apps/firefox-addon.png"
                };
                $rootScope.wiki = {
                    url: "http://wiki.jocly.com/index.php/JQuery_plugin",
                    thumbnail: JoclyPlazza.config.baseURL + JoclyPlazza.config.pzPath + "/images/apps/embed-wiki.png"
                };

                $rootScope.openMarketPlace = function(platform, appname) {
                    for (var id in JoclyPlazza.apps) {
                        var app = JoclyPlazza.apps[id];
                        if (app.name == appname) {
                            $scope.openExternalLink(app[platform]['app-page']);
                        }
                    }
                }
            } else {
                console.log("ERROR: apps missing...");
            }
        }

        // allow init for a scope that would be declared about the current jpzApp
        if (typeof $scope.initApp == "function")
            $scope.initApp();

    }
    ]);

})();;

(function() {

    angular.module('JoclyPlazza').controller('jpzMainAboutCtrl',
    [ '$scope', '$window', 'JoclyPlazza.layout',
    function($scope, $window, jpzLayout) {

        $scope.toolbarTitle = $scope.t('about-title');

        $scope.help = function(incFile) {
            jpzLayout.openDialog($scope, incFile);
        }

        $scope.openItemPage = function(url) {
            if ($scope.ga)
                $scope.ga.track('about-item', url);
            if (url.indexOf('http') == 0)
                $scope.openExternalLink(url);
            else if (url.indexOf('/jocly/plazza/partial-help') >= 0)
                $scope.help(url);
            else
                $scope.go(url);
        }

        $scope.getTitle = function() {
            return $scope.t('about-title');
        }

        $scope.getPageId = function() {
            return 'jocly-about';
        }

        $scope.myAboutItems = JoclyPlazza.aboutItems;

        $scope.nbGames = JoclyPlazza.config.games.length;
    }
    ]);

    angular.module('JoclyPlazza').directive('jpzSmartHeader', [ '$rootScope', '$interval', '$timeout',
    function factory($rootScope, $interval, $timeout) {
        return {
            scope: true,
            replace: true,
            templateUrl : '/jocly/plazza/partial-main/smartheader',
            link: function(scope, element, attrs) {
                var jqElement = $(element[0]);

                jqElement.css("background", "#000");


                var mySlides = ["#slide1", "#slide2", "#slide3", "#slide4", "#slide5"];
                var curSlide = 1;

                function oneStepBeyond() {
                    jqElement.find(mySlides[curSlide])[0].checked = true;
                    curSlide = (curSlide + 1)%mySlides.length;
                }

                var timer = null;
                scope.$on('$destroy', function() {
                    stopSlider();
                });

                function stopSlider() {
                    $interval.cancel(timer);
                }
                function startSlider() {
                    if (timer == null) {
                        timer = $interval(function() {
                            oneStepBeyond();
                        }, 4000);
                    }
                }
                startSlider();


                var jqInput = jqElement.find("input").click(stopSlider);
            }
        }
    }
    ]);

    angular.module('JoclyPlazza').directive('jpzSomeGameThumb', [ '$rootScope',
    function factory($rootScope) {
        return {
            scope: true,
            replace: true,
            templateUrl : '/jocly/plazza/partial-main/smartthumb',
            link: function(scope, element, attrs) {
                scope.icon = attrs.jpzSomeGameThumbImg;
                scope.url = attrs.jpzSomeGameThumbUrl;
                scope.label = attrs.jpzSomeGameThumbLabel;
            }

        }
    }
    ]);

    angular.module('JoclyPlazza').controller('jpzAppsCtrl',
    [ '$scope', '$window', 'JoclyPlazza.layout',
    function($scope, $window, jpzLayout) {

        $scope.appsTab = "mobile"; // mobile/facebook/tools
        $scope.setTitle = function() {
            switch ($scope.appsTab) {
            default:
                break;
            case 'mobile':
                $scope.toolbarTitle = $scope.t('apps-title-mobile');
                break;
            case 'tools':
                $scope.toolbarTitle = $scope.t('apps-title-tools');
                break;
            case 'facebook':
                $scope.toolbarTitle = $scope.t('apps-title-facebook');
                break;
            }
        }
        $scope.setTab = function(tab) {
            $scope.appsTab = tab;
        }
        $scope.$watch('appsTab', function(newValue, oldValue) {
            $scope.setTitle();
        });

        $scope.getTitle = function() {
            return $scope.t('apps-title-mobile');
        }
        $scope.getPageId = function() {
            return 'jocly-apps';
        }


    }
    ]);

})();;
(function($) {

    'use strict';

    angular.module('JoclyPlazza').service('JoclyPlazza.layout',
    [ '$rootScope', '$document', '$compile', '$timeout',
    function($rootScope, $document, $compile, $timeout) {

        this.openDialog = function(scope, path, options) {
            if (options === undefined)
                options = {};
            var body = angular.element($document[0].body);
            var classes = ['modal', 'fade', 'warning'];
            if (options.classes)
                classes = classes.concat(options.classes);
            var template = "<div jpz-dialog='" + path + "' class='" + classes.join(' ') + "' tabindex='-1' role='dialog' aria-hidden='true'";
            if (options.attrs)
                for (var attr in options.attrs)
                    template += ' ' + attr + '="' + options.attrs[attr] + '"';
            template += "></div>";
            var dialogScope = scope.$new(false);
            dialogScope.options = options;
            var dialog = $compile(template)(dialogScope);
            body.append(dialog);
            if (options.autoClose) {
                $timeout(function() {
                    $(dialog[0]).modal("hide");
                }, options.autoClose);
            }
        }
        $rootScope.openDialog = this.openDialog;

        this.showMessage = function(options) {
            options = $.extend(true, {
                text: "",
                launch: 0,
                stay: 2000,
                fade: 0,
                type: "warning",
                position: "bottom",
                click: null,
                category: "normal",
            }, options);
            var body = angular.element($document[0].body);
            var template = "<div class='jpz-message jpz-message-" + options.position + "'><div class='alert alert-" + options.type + "'>";
            template += '<button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>';
            template += "<div";
            if (options.click)
                template += " ng-click='" + options.click + "'";
            template += ">";
            template += options.text;
            template += "</div></div></div>";
            var element = $compile(template)($rootScope);
            var jqElement = $(element[0]);


            var posClass = "jpz-message-visible-" + options.position;
            body.append(element);


            $timeout(function() {
                jqElement.addClass(posClass);
                $timeout(function() {
                    jqElement.removeClass(posClass);
                    $timeout(function() {
                        jqElement.remove();
                    }, 500); // must be >= than CSS transition delay
                }, options.stay);
            }, 0);
        }
        $rootScope.showMessage = this.showMessage;

        this.alert = function(options) {
            this.openDialog($rootScope, "/jocly/plazza/partial/alert", {
                attrs: {
                    "jpz-alert": encodeURIComponent(JSON.stringify({
                        title: options.title,
                        text: options.text,
                    })),
                },
            });
        }
        $rootScope.alert = this.alert;

        this.confirm = function(options) {
            this.openDialog($rootScope, "/jocly/plazza/partial/confirm", options);
        }
        $rootScope.confirm = this.confirm;

        function GetTransitionEndEvent() {
            var document = $document[0];
            var transitions = {
                'transition': 'transitionend',
                'WebkitTransition': 'webkitTransitionEnd',
                'MozTransition': 'transitionend',
                'OTransition': 'otransitionend'
            };
            var b = document.body || document.documentElement;
            var transitionEndEvent = null;
            for (var t in transitions)
                if (b.style[t] !== undefined) {
                    transitionEndEvent = transitions[t];
                    break;
                }
            return transitionEndEvent;
        }
        this.onTransitionEnd = function(element, callback) {
            var transitionEndEvent = GetTransitionEndEvent();
            if (transitionEndEvent)
                element.bind(transitionEndEvent, callback);
            else
                console.warn("onTransitionEnd: transitions not supported");
        }

        this.offTransitionEnd = function(element, callback) {
            var transitionEndEvent = GetTransitionEndEvent();
            if (transitionEndEvent)
                element.unbind(transitionEndEvent, callback);
        }

        var popoverCounter = 0;
        $rootScope.openPopoverZIndex = function() {
            return 1000 + popoverCounter++;
        }
        $rootScope.closePopover = function() {
            popoverCounter--;
        }


    }
    ]);

    angular.module('JoclyPlazza').directive('jpzMainLayout',
    [ 'JoclyPlazza.ads',
    function factory(jpzAds) {
        return {
            replace: true,
            templateUrl : '/jocly/plazza/partial/main-layout',
            link: function(scope, element, attrs) {
                jpzAds.show("appStart");
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('jpzGameEndDialog',
    [ '$rootScope',
    function factory($rootScope) {
        return {
            scope: true,
            link: function(scope, element, attrs) {
                if (attrs.jpzGameId) {
                    scope.gid = attrs.jpzGameId;
                }
                if (attrs.jpzMessage) {
                    scope.msg = attrs.jpzMessage;
                    scope.reason = null;
                    if (attrs.jpzReason)
                        scope.reason = attrs.jpzReason;
                }
                if (attrs.jpzResult) {
                    scope.result = attrs.jpzResult;
                    switch (scope.result) {
                    default:
                        break;
                    case 'win':
                        break;
                    case 'lose':
                        break;
                    case 'draw':
                        break;
                    }
                }
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('jpzRulesDialog',
    [ '$rootScope',
    function factory($rootScope) {
        return {
            scope: true,
            link: function(scope, element, attrs) {
                function ShowRules(model) {
                    scope.model = model;
                    var path = {
                        rules: scope.getModelLocale(model, 'rules'),
                        description: scope.getModelLocale(model, 'description'),
                        credits: scope.getModelLocale(model, 'credits'),
                    };
                    scope.path = path;
                    scope.section = "?";
                    if (path.rules)
                        scope.section = 'rules';
                    else if (path.description)
                        scope.section = 'description';
                    else if (path.credits)
                        scope.section = 'credits';
                }
                if (attrs.jpzGameName) {
                    scope.getModel(attrs.jpzGameName, function(model) {
                        scope.model = model;
                        ShowRules(model);
                        $rootScope.$apply();
                    });
                } else {
                    scope.model = scope.playlet.model;
                    ShowRules(scope.playlet.model);
                }
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('jpzRulesSection',
    [ '$locale',
    function factory($locale) {
        return {
            link: function(scope, element, attrs) {
                $(element[0]).find("*").each(function() {
                    for (var i = 0, attrs0 = this.attributes, l = attrs0.length; i < l; i++) {
                        var attr = attrs0.item(i);
                        var value0 = attr.nodeValue;
                        var name = attr.nodeName;
                        var value = value0.replace(/\{GAME\}/g, attrs.jpzRulesSection);
                        if (value != value0)
                            $(this).attr(name, value);
                    }
                    var text0 = $(this).text();
                    var text = text0.replace(/\{GAME\}/g, attrs.jpzRulesSection);
                    if (text != text0)
                        $(this).text(text);
                });
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('jpzDialog',
    [ '$rootScope',
    function factory($rootScope) {
        return {
            scope: true,
            template: "<div class='modal-dialog' jpz-scrollable><ul ng-include='dialogPath'></ul></div>",
            link: function(scope, element, attrs) {
                scope.dialogPath = attrs.jpzDialog;
                scope.closeDialog = function() {
                    $(element[0]).modal('hide');
                }
                $(element[0]).on('hidden.bs.modal', function() {
                    $(element[0]).remove();
                    if (scope.options && scope.options.onClose)
                        scope.options.onClose();
                }).modal('show');
                if (!$rootScope.$$phase)
                    $rootScope.$apply();
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('jpzAlert',
    [
    function factory() {
        return {
            scope: true,
            link: function(scope, element, attrs) {
                var options = scope.$eval(decodeURIComponent(attrs.jpzAlert));
                scope.alertTitle = options.title;
                scope.alertText = options.text;
                if (!scope.$$phase)
                    scope.$digest();
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('jpzYoutubePlayer',
    [
    function factory() {
        return {
            scope: true,
            replace: true,
            template : '<iframe width="{{width}}" height="{{height}}" frameborder="0" allowfullscreen ng-show="url"></iframe>',
            link: function(scope, element, attrs) {
                var jqElement = $(element[0]);
                var defDescr = {
                    width: 560,
                    height: 315,
                    url: null,
                }
                scope.$watch(attrs.jpzYoutubePlayer, function(descr) {
                    if (descr) {
                        descr = angular.extend({}, defDescr, descr);
                        scope.width = descr.width;
                        scope.height = descr.height;
                        scope.url = "https://www.youtube.com/embed/" + descr.id;
                        if (jqElement.attr("src") != scope.url)
                            jqElement.attr("src", scope.url);
                        //console.log("src",jqElement.attr("src"));
                    } else {
                        scope.url = null;
                        jqElement.removeAttr("src");
                    }
                }, true);
            },
        };
    }
    ]);



    angular.module('JoclyPlazza').directive('jpzRelGame',
    [
    function factory() {
        return {
            replace: true,
            scope: true,
            template : '<div><div class="jpz-li-cell"><img class="jpz-li-img" ng-src="{{thumbNail}}"/></div>\
            <div class="jpz-li-cell">\
            <div class="jpz-li-1ico-title">{{title}}</div>\
            <div class="jpz-li-1ico-subtitle">{{summary}}</div>\
            </div>\
            </div>',
            link: function(scope,
            element,
            attrs) {
                scope.gname = attrs.jpzRelGame;
                scope.thumbNail = scope.gamesMap[scope.gname].thumbnail;
                scope.title = scope.gamesMap[scope.gname].title;
                scope.summary = scope.gamesMap[scope.gname].summary;
            }
        };
    }
    ]);



    angular.module('JoclyPlazza').directive('jpzGameSelector',
    [ '$rootScope', '$timeout',
    function factory($rootScope, $timeout) {
        return {
            scope: true,
            replace: true,
            require: '?ngModel',
            templateUrl : '/jocly/plazza/partial/game-selector',
            link: function(scope, element, attrs, ngModel) {
                scope.selected = null;
                if (!ngModel)
                    return;
                scope.showSummary = attrs.jpzGameSelectorHideSummary == null;
                ngModel.$render = function() {
                    scope.selected = ngModel.$viewValue ? ngModel.$viewValue.name : null;
                };
                scope.$watch("selected", function(game) {
                    ngModel.$setViewValue($rootScope.gamesMap[scope.selected]);
                });
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('jpzDatePicker',
    [
    function factory() {
        return {
            scope: true,
            replace: true,
            require: '?ngModel',
            template: '<div><input type="text" data-date-format="yyyy-mm-dd" class="datepicker form-control"/></div>',
            link: function(scope, element, attrs, ngModel) {
                if (!ngModel)
                    return;
                var jqElement = $(element[0]).children().first();
                jqElement.datepicker({
                    orientation: attrs.jpzDatePickerOrient || "top right",
                    format: "yyyy-mm-dd"
                }).on('change', function() {
                    jqElement.datepicker('hide');
                    ngModel.$setViewValue(ParseDate(jqElement.val()));
                    if (!scope.$$phase)
                        scope.$apply();
                });
                scope.$on('$destroy', function() {
                    jqElement.off('change');
                });
                if (attrs.ngDisabled)
                    scope.$watch(attrs.ngDisabled, function() {
                        if (scope.$eval(attrs.ngDisabled))
                            jqElement.attr("disabled", "disabled");
                        else
                            jqElement.removeAttr("disabled");
                        });

                ngModel.$render = function() {
                    if (ngModel.$viewValue === undefined)
                        ngModel.$viewValue = 0;
                    jqElement.datepicker('update', new Date(ngModel.$viewValue * 1000));
                };
                function FormatDate(date) {
                    var d = new Date(date);
                    return d.getFullYear() + "-" + (d.getMonth() + 1) + "-" + d.getDate();
                }
                function ParseDate(str) {
                    var m = /^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})$/.exec(str);
                    if (m) {
                        var date = new Date();
                        date.setFullYear(parseInt(m[1]));
                        date.setMonth(parseInt(m[2]) - 1);
                        date.setDate(parseInt(m[3]));
                        date.setHours(0);
                        date.setMinutes(0);
                        date.setSeconds(0);
                        date.setMilliseconds(0);
                        return Math.floor(date.getTime() / 1000);
                    }
                    return null;
                }
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('jpzActivity',
    [ '$rootScope', '$timeout', 'JoclyPlazza.layout',
    function factory($rootScope, $timeout, jpzLayout) {
        return {
            scope: true,
            templateUrl : '/jocly/plazza/partial/activity',
            link: function(scope, element, attrs) {
                var jqElement = $(element[0]);
                var jqPanel = jqElement.find(".jpz-activity-panel");
                element.addClass("jpz-activity");

                scope.scrollBottom = function() {
                    jqPanel.stop().animate({
                        scrollTop: jqPanel[0].scrollHeight,
                    }, 400);
                }

                scope.clicked = function(message) {
                    if (message.click)
                        $rootScope.$eval(message.click);
                }

                scope.$watch('activity.index', function() {
                    $timeout(function() {
                        scope.scrollBottom();
                    }, 100);
                }, true);
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('jpzAboutItem',
    [
    function factory() {
        return {
            scope: true,
            replace: true,
            templateUrl : '/jocly/plazza/partial-main/about-item',
            link: function(scope, element, attrs) {
                scope.pageUrl = attrs.jpzAboutItemPageUrl;
                scope.icon = attrs.jpzAboutItemIcon;
                scope.title = attrs.jpzAboutItemTitle;
                scope.subtitle = attrs.jpzAboutItemSubtitle;
                scope.helpUrl = attrs.jpzAboutItemHelpUrl;
                scope.openAboutLink = function(link) {
                    scope.openItemPage(link);
                }
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('jpzVideo',
    [
    function factory() {
        return {
            replace: true,
            template: '<video class="jpz-video" autoplay="autoplay"/>',
            link: function(scope, element, attrs) {
                var jqElement = $(element[0]);
                element.attr("joclyhub-video", attrs.jpzVideo);
                function HandleWebRTCMessage(event, data) {
                    try {
                        if (attrs.jpzVideo != data.side)
                            return;
                        if (data.webrtcType == "mediaOn") {
                            JoclyPlazza.webrtc.attachMediaStream(element[0], data.stream);
                            element.addClass("jpz-video-active");
                            if (data.local)
                                element.addClass("jpz-video-local");
                            else
                                element.removeClass("jpz-video-local");
                        } else if (data.webrtcType == "mediaOff") {
                            JoclyPlazza.webrtc.detachMediaStream(element[0]);
                            element.removeClass("jpz-video-active")
                        }
                    } catch (e) {
                        console.error("jpzVideo webrtc error", e);
                    }
                }
                $(document).bind("joclyhub.webrtc", HandleWebRTCMessage);
                scope.$on('$destroy', function() {
                    $(document).unbind("joclyhub.webrtc", HandleWebRTCMessage);
                });
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('jpzVideos',
    [
    function factory() {
        return {
            scope: true,
            template: '<div class="jpz-videos" ng-click="cycleVideoFormat()"><div class="jpz-video-a" jpz-video="1"></div><div class="jpz-video-b" jpz-video="-1"></div></div>',
            link: function(scope, element, attrs) {
                var jqElement = $(element[0]);
                var videoFormats = ["horizontal", "inside", "vertical"];
                var videoFormatIndex = videoFormats.length - 1;
                scope.cycleVideoFormat = function() {
                    videoFormatIndex = (videoFormatIndex + 1)%videoFormats.length;
                    jqElement.removeClass("jpz-video-horizontal jpz-video-inside jpz-video-vertical");
                    jqElement.addClass("jpz-video-" + videoFormats[videoFormatIndex]);
                }
                scope.cycleVideoFormat();
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('jpzScrollable',
    [ '$rootScope', '$interval', '$timeout',
    function factory($rootScope, $interval, $timeout) {
        return {
            link: function(scope, element, attrs) {
                var match = navigator.userAgent.match(/Android\s([0-9]*)/);
                $rootScope.useIScroll = false;
                if (match && parseInt(match[1]) <= 2) {
                    $rootScope.useIScroll = true;
                    $timeout(function() {
                        var iscroll = new IScroll(element[0], {
                            mouseWheel: true,
                            scrollbars: true,
                            click: true,
                        });
                        var timer = $interval(function() {
                            iscroll.refresh();
                        }, 250);
                        scope.$on('$destroy', function() {
                            $interval.cancel(timer);
                            iscroll.destroy();
                        });
                        element.css({
                            "max-height": "100%",
                        });
                    }, 0);
                } else
                    element.addClass("jpz-scrollable");
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('jpzImageFileInput',
    [ '$timeout',
    function factory($timeout) {
        return {
            template: '<form><input type="file" accept="image/*" capture="camera" name="picture"/></form>',
            link: function(scope, element, attrs) {
                if (!scope.features.pictureUpload) {
                    element.hide();
                    return;
                }
                var formElem = element.find("form");
                var inputElem = element.find("input");

                $timeout(function() {

                    inputElem.fileinput({
                        showCaption: false,
                        showRemove: false,
                        showPreview: !navigator.userAgent.match(/Android/),
                        previewFileType: 'image',
                        browseLabel: attrs.jpzImageFileInput,
                        browseClass: "btn btn-default",
                        uploadLabel: scope.t('if-upload-label'),
                        uploadClass: 'btn btn-danger',
                        allowedFileTypes: ['image+'],
                        fileTypeSettings: {
                            "image+": function(vType, vName) {
                                if (navigator.userAgent.match(/Android/))
                                    return true; // cannot filter images on android
                                return (typeof vType !== "undefined") ? vType.match('image.*') : vName.match(/\.(gif|png|jpe?g)$/i);
                            }
                        },
                    });
                    $(".kv-fileinput-upload").hide();

                    function FileClear() {
                        $(".kv-fileinput-upload").hide();
                    }
                    inputElem.bind('fileclear', FileClear);
                    function FileLoaded() {
                        $(".kv-fileinput-upload").show();
                    }
                    inputElem.bind('fileloaded', FileLoaded);
                    function Submit(event) {
                        event.preventDefault();
                        scope.$emit('picture-post', {
                            formData: new FormData(formElem[0]),
                        });
                        inputElem.fileinput('reset');
                        $(".kv-fileinput-upload").hide();
                    }
                    formElem.bind('submit', Submit);
                    scope.$on("$destroy", function() {
                        inputElem.unbind('fileclear', FileClear);
                        inputElem.unbind('fileloaded', FileLoaded);
                        formElem.unbind('submit', Submit);
                    });
                });
            }
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('jpzEnterKey',
    [
    function factory() {
        return {
            link: function(scope, element, attrs) {
                function HandleKeyDown(event) {
                    if (event.keyCode == 13) {
                        event.preventDefault();
                        if (attrs.jpzEnterKey)
                            scope.$eval(attrs.jpzEnterKey);
                    }
                }
                element.bind('keydown', HandleKeyDown);
                scope.$on("$destroy", function() {
                    element.unbind('keydown', HandleKeyDown);
                });
            }
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('jpzCountryFlag',
    [ '$timeout',
    function factory($timeout) {
        return {
            template: "<div/>",
            replace: true,
            require: '?ngModel',
            link: function(scope, element, attrs, ngModel) {

                $timeout(function() {
                    if (!scope.features.countryFlags) {
                        element.hide();
                        return;
                    }
                    function SetCode(code) {
                        (element.attr("class") || "").split(" ").forEach(function(clazz) {
                            if (/^cflag/.test(clazz))
                                element.removeClass(clazz);
                        });
                        element.addClass("cflag cflag-" + code);
                        if (scope.features['countryNames'])
                            element.attr("title", scope.countryName(code));
                    }

                    if (ngModel) {
                        element.hide();
                        ngModel.$render = function() {
                            element.css("display", "inline-block");
                            SetCode(ngModel.$viewValue);
                        }
                        var initial = scope.$eval(attrs.ngModel);
                        if (initial) {
                            element.css("display", "inline-block");
                            SetCode(initial);
                        }
                    }
                    if (attrs.jpzCountryFlag)
                        SetCode(attrs.jpzCountryFlag);
                });
            }
        };
    }
    ]);

})(jQuery);;

(function() {

    'use strict';

    angular.module('JoclyPlazza').filter('toArray', function() {
        return function(obj) {
            if (!(obj instanceof Object))
                return obj;
            var arr = [];
            for (var key in obj)
                arr.push(Object.defineProperty(obj[key], '$key', {
                    __proto__: null,
                    value: key
                }));
            return arr;
        }
    });

    angular.module('JoclyPlazza').filter('supportedGames',
    [ '$rootScope', function($rootScope) {
        return function(obj, field) {

            if (obj === undefined)
                return undefined;
            var arr = [];

            obj.forEach(function(game) {
                if (game[field] in $rootScope.gamesMap)
                    arr.push(game);
            })
            return arr;
        }
    }
    ]);

    angular.module('JoclyPlazza').service('JoclyPlazza.net',
    [ '$rootScope', '$timeout', function($rootScope, $timeout) {
        var self = this;
        var cmsIdentity = null;

        $rootScope.gameSetId = "97d170e1550eee4afc0af065b78cda302a97674c"; // sha1 of "[]"

        function CanWebRTC() {
            if (navigator.mozGetUserMedia) {
                var m = /Firefox\/([0-9]+(\.[0-9]+)?)/.exec(navigator.userAgent);
                if (m) {
                    var version = parseInt(m[1]);
                    if (!isNaN(version) && version >= 22)
                        return true;
                }
            } else if (navigator.webkitGetUserMedia) {
                var m = /Chrom(?:[^\/]*)\/([0-9]+)\.([0-9]+)\.([0-9]+)/
                .exec(navigator.userAgent);
                if (m) {
                    var v1 = parseInt(m[1]);
                    var v2 = parseInt(m[2]);
                    var v3 = parseInt(m[3]);
                    if (!isNaN(v1) && !isNaN(v2) && !isNaN(v3) && v1 >= 25
                    && (v2 > 0 || v3 >= 1364))
                        return true;
                }
            }
            return false;
        }

        function Channel(connection, clientId, options) {
            this.connected = false;
            this.connection = connection;
            this.clientId = clientId;
            this.serverId = null;
            this.options = $.extend({
                onConnect: function() {},
                onDisconnect: function() {},
                onReceive: function() {},
            }, options);
            var initEvent = $.extend({
                clientType: options.clientType,
            }, options.initData);
            initEvent.identity = options.identity;
            initEvent.clientId = this.clientId;
            //console.warn(">>>","joclyinit",initEvent);
            connection.socket.send(JSON.stringify({
                e: "joclyinit",
                d: initEvent
            })); // might error: socket not yet open (or already closed ?)
        }

        Channel.prototype = {
            send: function(message) {
                message.serverId = this.serverId;
                this.connection.send("joclymsg", message);
            },
            disconnect: function() {
                this.connection.send("joclyclose", {
                    serverId: this.serverId,
                });
                this.onDisconnect();
            },
            onConnect: function() {
                var $this = this;
                if (this.connection.channelsByType[this.options.clientType])
                    this.connection.channelsByType[this.options.clientType]++;
                else
                    this.connection.channelsByType[this.options.clientType] = 1;
                if (!$rootScope.$$phase)
                    $rootScope.$apply(function(scope) {
                        $this.connection.channels[$this.clientId].connected = true;
                    });
                else
                    $this.connection.channels[$this.clientId].connected = true;
                this.options.onConnect.call(this);
            },
            onDisconnect: function() {
                var $this = this;
                if (this.connection.channelsByType[this.options.clientType])
                    this.connection.channelsByType[this.options.clientType]--;
                if (!$rootScope.$$phase)
                    $rootScope.$apply(function(scope) {
                        $this.connection.channels[$this.clientId].connected = false;
                    });
                else if ($this.connection.channels[$this.clientId])
                    $this.connection.channels[$this.clientId].connected = false;
                this.options.onDisconnect.call(this);
            },
        }

        function Connection() {
            this.channels = {}
            this.channelsByType = {}
            this.socket = null;
        }

        Connection.prototype = {

            createChannel: function(options) {
                var clientId = JocUtil.md5("" + Math.random() + new Date().getTime());
                var channel = new Channel(this, clientId, options);
                this.channels[clientId] = channel;
                return channel;
            },

            open: function(connData, options) {
                var $this = this;
                options = $.extend({
                    onReceive: function() {},
                    onConnect: function() {},
                    onDisconnect: function() {},
                    clientType: "event",
                }, options);

                var url = (connData.https == '1' ? 'https' : 'http') + "://" + connData.host + ":" + connData.port + "/sockjs.js";
                $.ajax({
                    url: url,
                    dataType: "script",
                    cache: true,
                    timeout: 5000,
                    success: function() {
                        var socket = new SockJS((connData.https == '1' ? 'https' : 'http') + "://" + connData.host + ":" + connData.port + "/sockjs");
                        $this.socket = socket;

                        var connectDone = false;

                        socket.onopen = function() {
                            if (connectDone)
                                return;
                            connectDone = true;
                            $this.channels = {};
                            options.onConnect.call($this);
                        }

                        socket.onmessage = function(message) {
                            var m = JSON.parse(message.data);
                            switch (m.e) {
                            case 'joclyup':
                                OnJoclyup(m.d);
                                break;
                            case 'joclydown':
                                OnJoclydown(m.d);
                                break;
                            case 'joclymsg':
                                OnJoclymsg(m.d);
                                break;
                            }
                        }

                        function ReceiveMessage(messageType, message, callback) {
                            //console.warn("<<<",messageType,message);
                            if (message.clientId && $this.channels[message.clientId]) {
                                if (message.serverTime !== undefined) {
                                    $rootScope.serverTimeDiff = message.serverTime - Date.now();
                                    delete message.serverTime;
                                }
                                var channel = $this.channels[message.clientId];
                                callback(channel);
                                options.onReceive.call($this, messageType, message);
                            }
                        }

                        function OnJoclyup(message) {
                            ReceiveMessage("joclyup", message, function(channel) {
                                if (message.gameSetId)
                                    $rootScope.gameSetId = message.gameSetId;
                                channel.serverId = message.serverId;
                                channel.onConnect();
                            });
                        }

                        function OnJoclydown(message) {
                            ReceiveMessage("joclydown", message, function(channel) {
                                channel.onDisconnect();
                                delete $this.channels[message.clientId];
                            });
                        }

                        function OnJoclymsg(message) {
                            ReceiveMessage("joclymsg", message, function(channel) {
                                if (message.poolOp) {
                                    var poolName = message.pool;
                                    if ($rootScope.pools[poolName] === undefined)
                                        $rootScope.pools[poolName] = {}
                                    if ($rootScope.poolSizes[poolName] === undefined)
                                        $rootScope.poolSizes[poolName] = 0;
                                    var keyField = message.poolKey || "id";
                                    switch (message.poolOp) {
                                    case "state":
                                        SetPoolState(poolName, message.poolItems, keyField);
                                        break;
                                    case "add":
                                        var poolItems = message.poolItems || [];
                                        if (message.poolItem)
                                            poolItems.push(message.poolItem);
                                        var removedKeys = [];
                                        var added = {};
                                        for (var i = 0; i < poolItems.length; i++) {
                                            var item = poolItems[i];
                                            var key = item[keyField];
                                            if ($rootScope.pools[poolName][key])
                                                removedKeys.push(key);
                                            else
                                                $rootScope.poolSizes[poolName]++;
                                            added[key] = item;
                                            $rootScope.pools[poolName][key] = item;
                                        }
                                        break;
                                    case "remove":
                                        var poolItemKeys = message.poolItemKeys || [];
                                        if (message.poolItemKey)
                                            poolItemKeys.push(message.poolItemKey);
                                        var removedKeys = [];
                                        for (var i = 0; i < poolItemKeys.length; i++) {
                                            var key = poolItemKeys[i];
                                            if ($rootScope.pools[poolName][key]) {
                                                removedKeys.push(key);
                                                delete $rootScope.pools[poolName][key];
                                                $rootScope.poolSizes[poolName]--;
                                            }
                                        }
                                        break;
                                    case "update":
                                        var item = $rootScope.pools[poolName][message.poolItem[keyField]];
                                        if (item !== undefined)
                                            $.extend(item, message.poolItem);
                                    }
                                    if (!$rootScope.$$phase)
                                        $rootScope.$apply('pools["' + poolName + '"]');
                                }
                                channel.options.onReceive.call($this, message);
                            });
                        }

                        socket.onclose = function() {
                            if (!connectDone)
                                return;
                            connectDone = false;
                            for (var i in $this.channels) {
                                var channel = $this.channels[i];
                                channel.onDisconnect();
                                delete $this.channels[i];
                            }
                            this.socket = null;
                            self.clearPools();
                            options.onDisconnect.call(this);
                            //JoclyHub.events.startConnection();
                        }
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        //console.warn("couldn't get socketio");
                        options.onDisconnect.call(this);
                    },
                });
            },

            close: function() {
                if (this.socket)
                    this.socket.close();
                this.socket = null;
            },

            send: function(message, data) {
                if (!this.socket)
                    console.warn("message sending cancelled as socket is not up");
                else
                    try {
                        //console.warn(">>>",message,data);
                        this.socket.send(JSON.stringify({
                            e: message,
                            d: data
                        }));
                } catch (e) {
                    console.warn("engine.io sending error:", e)
                }
            },
        }

        function InitiateConnection() {
            if (eventsConnConnecting) {
                console.warn("Already connecting");
                return;
            }
            eventsConnConnecting = true;
            ClearConnectionTimer();
            var now = new Date().getTime() / 1000;
            if (eventsConnData == null || now > eventsConnDataAge + 60 * 100) {
                var url = JoclyPlazza.config.liveURL + "?ts=" + new Date().getTime();
                var canWebRTC = CanWebRTC();
                url += "&canwebrtc=" + canWebRTC;
                if (JoclyPlazza.config.preferredServer)
                    url += "&pref=" + JoclyPlazza.config.preferredServer;
                //console.log("get live url",url)
                //console.log("calling",url,"jsonp",JoclyPlazza.features.jsonp);
                $.ajax({
                    url: url,
                    dataType: JoclyPlazza.features.jsonp ? 'jsonp': 'json',
                    crossDomain: true,
                    headers: {
                        "Accept-Encoding" : "gzip"
                    },
                    cache: false,
                    success: function(data) {
                        //console.error("calling",url,"success",data);
                        function UpdateConnData(scope) {
                            scope.network.serverId = eventsConnData.pubid;
                            for (var f in scope.network.connData)
                                if (scope.network.connData.hasOwnProperty(f))
                                    if (!(f in eventsConnData))
                                        delete scope.network.connData[f];
                            $.extend(true, scope.network.connData, eventsConnData);
                        }
                        if (data.status) {
                            cmsIdentity = data.result.identity;
                            //self.updateUser(data.result.identity);
                            eventsConnData = data.result;
                            JoclyPlazza.config.preferredServer = eventsConnData.pubid;
                            localStorage.setItem('JoclyPlazza.preferredServer', JoclyPlazza.config.preferredServer);
                            if ($rootScope.$$phase)
                                UpdateConnData($rootScope);
                            else
                                $rootScope.$apply(UpdateConnData);
                            eventsConnDataAge = new Date().getTime() / 1000;
                            LaunchConnection();
                        } else {
                            console.warn("cannot get live server", data.error);
                            eventsConnConnecting = false;
                            ScheduleConnection();
                        }
                    },
                    error: function() {
                        //console.error("calling "+url+" generates error "+JSON.stringify(arguments));
                        eventsConnConnecting = false;
                        ScheduleConnection();
                    },
                    complete: function() {
                        //console.log("called",url);
                    },
                });
            } else {
                LaunchConnection();
            }
        }
        function ScheduleConnection() {
            ClearConnectionTimer();
            if (autoReconnect)
                eventsConnTimer = setTimeout(InitiateConnection, 5000);
        }
        function ClearConnectionTimer() {
            if (eventsConnTimer) {
                clearTimeout(eventsConnTimer);
                eventsConnTimer = null;
            }
        }
        function LaunchConnection() {
            eventsConn.open(eventsConnData, {
                onConnect: function() {
                    eventsConn.createChannel({
                        clientType: "identity",
                        initData: {
                            games: $rootScope.gamesList.join(","),
                        },
                        identity: cmsIdentity,
                        onConnect: function() {
                            if ($rootScope.$$phase)
                                UpdateNetwork($rootScope);
                            else
                                $rootScope.$apply(UpdateNetwork);

                            eventsConnData = null; // do not reuse this key

                            eventsChannel = eventsConn.createChannel({
                                clientType: "event",
                                initData: {
                                    realTimeUsers: JoclyPlazza.features.realTimeUsers,
                                },
                                onReceive: function(message) {
                                    delete message.clientId;
                                    delete message.serverId;
                                    console.log("received live message", message);
                                    if (message.uc !== undefined)
                                        $rootScope.usersCount = message.uc;
                                    if (message.event == "jchat") {
                                        console.log("jchat message", message);
                                        $rootScope.globalChat.messages.push(message);
                                        while ($rootScope.globalChat.messages.length > $rootScope.pref.user.maxChatMessages)
                                            $rootScope.globalChat.messages.shift();
                                        $rootScope.$apply('globalChat');
                                        if ($rootScope.features.popupChatMessages && !$rootScope.pref.user.globalChatVisible)
                                            $rootScope.showMessage({
                                                text: $rootScope.t('global-chat-message', {
                                                    '@user': message.identity.name,
                                                    '@text': message.text
                                                }),
                                                click: "pref.user.globalChatVisible=true",
                                            });
                                    } else if (message.event == "notification-status") {
                                        var exists = false;
                                        $rootScope.notifications.forEach(function(notif) {
                                            if (notif.endpoint == message.endpoint) {
                                                notif.active = message.active;
                                                notif.device = message.device;
                                                notif.platform = message.platform;
                                                exists = true;
                                            }
                                        });
                                        if (!exists)
                                            $rootScope.notifications.push({
                                                endpoint: message.endpoint,
                                                protocol: message.protocol,
                                                active: message.active,
                                                device: message.device,
                                                platform: message.platform,
                                            });
                                        if (!$rootScope.$$phase)
                                            $rootScope.$apply('notifications');
                                    } else {
                                        $rootScope.playletAPI.handleEventMessage(message);
                                        if (message.pool == "invitations" && message.poolOp == "add" && message.poolItem.uid2 == $rootScope.user.userId
                                        && $rootScope.gamesMap[message.poolItem.game.name])
                                            $rootScope.activity.add({
                                                text: $rootScope.t('act-invited', {
                                                    '@user': message.poolItem.user1.name,
                                                    '@game': $rootScope.gamesMap[message.poolItem.game.name].title
                                                }),
                                                click: 'go("/invitations")',
                                                show: true,
                                                type: 'danger',
                                            });
                                    }
                                    if (!$rootScope.$$phase)
                                        $rootScope.$apply();
                                },
                                onConnect: function() {
                                    var $this = this;
                                    function EventsConnected(scope) {
                                        scope.eventsChannel = $this;
                                        scope.network.eventsConnected = true;
                                    }
                                    if ($rootScope.$$phase)
                                        EventsConnected($rootScope);
                                    else
                                        $rootScope.$apply(EventsConnected);
                                },
                                onDisconnect: function() {
                                    var $this = this;
                                    function ProceedDisconnect(scope) {
                                        scope.eventsChannel = null;
                                        scope.network.eventsConnected = false;
                                    }
                                    if (!$rootScope.$$phase)
                                        $rootScope.$apply(ProceedDisconnect);
                                    else
                                        ProceedDisconnect($rootScope);
                                },
                            });
                            eventsConn.createChannel({
                                clientType: "peering-obs",
                                onReceive: function(message) {
                                    console.log("received peeringobs message", message);
                                    if (message.event == "delete-jchat") {
                                        var cids = message.cid.split(':');
                                        var cidsMap = {};
                                        for (var i = 0; i < cids.length; i++)
                                            cidsMap[cids[i]] = true;
                                        var kept = [];
                                        for (var i = 0; i < $rootScope.globalChat.messages.length; i++) {
                                            if (!($rootScope.globalChat.messages[i].cid in cidsMap))
                                                kept.push($rootScope.globalChat.messages[i])
                                            }
                                        $rootScope.globalChat.messages.splice(0, $rootScope.globalChat.messages.length);
                                        for (var i = 0; i < kept.length; i++)
                                            $rootScope.globalChat.messages.push(kept[i]);
                                        $rootScope.$apply('globalChat');
                                    } else if (message.event == "alert") {
                                        $rootScope.alert({
                                            title: $rootScope.t(message.title, message.titleArgs || {}),
                                            text: $rootScope.t(message.text, message.textArgs || {}),
                                        });
                                    } else if (message.event == "notification") {
                                        if (message.hasGame === undefined || $rootScope.gamesMap[message.hasGame]) {
                                            var textArgs = {}, msgTextArgs = message.textArgs || {};
                                            for (var key in msgTextArgs) {
                                                var arg = msgTextArgs[key];
                                                var m = /^GAMETITLE\((.*)\)$/.exec(arg);
                                                if (m)
                                                    textArgs[key] = $rootScope.gamesMap[m[1]].title;
                                                else
                                                    textArgs[key] = arg;
                                            }
                                            $rootScope.activity.add({
                                                text: $rootScope.t(message.text, textArgs),
                                                show: true,
                                            });
                                        }
                                    } else if (message.event == "table-joined") {
                                        $rootScope.tableJoined(message);
                                    } else if (message.event == "turn") {
                                        if ($rootScope.pools['runningGames']) {
                                            var entry = $rootScope.pools['runningGames'][message.gameId];
                                            if (entry) {
                                                if ($rootScope.myGamesSelfTurn !== undefined) {
                                                    console.info("update turn",
                                                    entry.playerA && entry.playerA.uid == $rootScope.user.userId && entry.who == 1,
                                                    entry.playerB && entry.playerB.uid == $rootScope.user.userId && entry.who==-1,
                                                    entry.playerA && entry.playerA.uid == $rootScope.user.userId && message.who == 1,
                                                    entry.playerB && entry.playerB.uid == $rootScope.user.userId && message.who==-1,
                                                    $rootScope.user.userId, entry, message, $rootScope.pools['runningGames']
                                                    )
                                                    if ((entry.playerA && entry.playerA.uid == $rootScope.user.userId && entry.who == 1) ||
                                                    (entry.playerB && entry.playerB.uid == $rootScope.user.userId && entry.who==-1))
                                                        $rootScope.myGamesSelfTurn--;
                                                    if ((entry.playerA && entry.playerA.uid == $rootScope.user.userId && message.who == 1) ||
                                                    (entry.playerB && entry.playerB.uid == $rootScope.user.userId && message.who==-1))
                                                        $rootScope.myGamesSelfTurn++;
                                                }
                                                entry.who = message.who;
                                                entry.expiry = message.expiry;
                                                entry.remaining = message.remaining;
                                                if (!$rootScope.$$phase)
                                                    $rootScope.$apply();
                                            }
                                        }
                                    } else if (message.event == "dispatch") {
                                        $rootScope.$broadcast(message.eventType, message);
                                    } else {
                                        if (message.pool == "runningGames" && message.poolOp == "add" && message.poolItem.playerA.uid != $rootScope.user.userId
                                        && message.poolItem.playerB.uid != $rootScope.user.userId && $rootScope.gamesMap[message.poolItem.game])
                                            $rootScope.activity.add({
                                                text: $rootScope.t('act-live-playing', {
                                                    '@user1': message.poolItem.playerA.name,
                                                    '@user2': message.poolItem.playerB.name,
                                                    '@game': $rootScope.gamesMap[message.poolItem.game].title
                                                }),
                                                click: 'go("/live/' + message.poolItem.id + '")',
                                                show: true,
                                            });
                                        /*
                                        											if(message.pool=="playingTurnBased" && message.poolOp=="add" && message.poolItem.playerA.uid!=$rootScope.user.userId
                                        													&& message.poolItem.playerB.uid!=$rootScope.user.userId && $rootScope.gamesMap[message.poolItem.game.name])
                                        												$rootScope.activity.add({
                                        													text: $rootScope.t('act-turnbased-playing',{'@user1':message.poolItem.playerA.name,
                                        														'@user2':message.poolItem.playerB.name,
                                        														'@game':$rootScope.gamesMap[message.poolItem.game].title}),
                                        													click: 'go("/running")',
                                        													show: true,
                                        												});
                                        											*/
                                        if (message.pool == "peersWaiting" && message.poolOp == "add" && message.poolItem.creator.uid != $rootScope.user.userId
                                        && $rootScope.gamesMap[message.poolItem.game])
                                            $rootScope.activity.add({
                                                text: $rootScope.t('act-new-live', {
                                                    '@user': message.poolItem.creator.name,
                                                    '@game': $rootScope.gamesMap[message.poolItem.game].title
                                                }),
                                                click: 'go("/open-tables")',
                                                show: true,
                                            });
                                        if (message.pool == "invitations" && message.poolOp == "add" && message.poolItem.creator.uid != $rootScope.user.userId
                                        && $rootScope.gamesMap[message.poolItem.game]) {
                                            $rootScope.activity.add({
                                                text: $rootScope.t('act-new-invit', {
                                                    '@user': message.poolItem.creator.name,
                                                    '@game': $rootScope.gamesMap[message.poolItem.game].title
                                                }),
                                                click: 'go("/invitation/xxx")',
                                                show: true,
                                            });

                                        }
                                        /*
                                        											if(message.pool=="waitingTurnBased" && message.poolOp=="add" && message.poolItem.creatorData.uid!=$rootScope.user.userId
                                        													&& $rootScope.gamesMap[message.poolItem.game])
                                        												$rootScope.activity.add({
                                        													text: $rootScope.t('act-new-turnbased',{'@user':message.poolItem.creatorData.name,
                                        														'@game':$rootScope.gamesMap[message.poolItem.game].title}),
                                        													click: 'go("/open-tables")',
                                        													show: true,
                                        												});
                                        											*/
                                    }
                                },
                                onConnect: function() {
                                    var $this = this;
                                    function PeeringObsConnected(scope) {
                                        scope.network.peeringObsConnected = true;
                                        scope.peeringObsChannel = $this;
                                    }
                                    if ($rootScope.$$phase)
                                        PeeringObsConnected($rootScope);
                                    else
                                        $rootScope.$apply(PeeringObsConnected);

                                },
                                onDisconnect: function() {
                                    if (!$rootScope.$$phase)
                                        $rootScope.$apply(function(scope) {
                                            scope.network.peeringObsConnected = false;
                                            scope.peeringObsChannel = null;
                                        });
                                    else {
                                        $rootScope.network.peeringObsConnected = false;
                                        scope.peeringObsChannel = null;
                                    }
                                },
                            });
                        },
                    });
                    function UpdateNetwork(scope) {
                        self.updateUser(cmsIdentity);
                        scope.network.connected = true;
                        scope.network.liveBaseURL = (eventsConnData.https == '1' ? 'https' : 'http') +
                        "://" + eventsConnData.host + ":" + eventsConnData.port;
                    }
                    /*
                    						if($rootScope.$$phase)
                    							UpdateNetwork($rootScope);
                    						else
                    							$rootScope.$apply(UpdateNetwork);
                    						*/
                },
                onReceive: function() {},
                onDisconnect: function() {
                    eventsConnConnecting = false;
                    if (!$rootScope.$$phase)
                        $rootScope.$apply(function(scope) {
                            scope.network.connected = false;
                            scope.network.liveURL = null;
                        });
                    else {
                        $rootScope.network.connected = false;
                        $rootScope.network.liveBaseURL = null;
                    }
                    ScheduleConnection();
                },
            });
        }

        function SetPoolState(poolName, poolItems, keyField) {
            if (arguments.length < 3)
                keyField = "id";
            var poolState = poolItems || [];
            function UpdatePoolState(scope) {
                scope.poolSizes[poolName] = 0;
                if ($.isArray(poolState)) {
                    scope.pools[poolName] = {};
                    var pool = scope.pools[poolName];
                    for (var i = 0; i < poolState.length; i++) {
                        var item = poolState[i];
                        if (scope.pools[poolName][item[keyField]] === undefined)
                            scope.poolSizes[poolName]++;
                        scope.pools[poolName][item[keyField]] = item;
                    }
                } else {
                    for (var i in poolState)
                        scope.poolSizes[poolName]++;
                    scope.pools[poolName] = poolState;
                }
            }
            if ($rootScope.$$phase)
                UpdatePoolState($rootScope);
            else
                $rootScope.$apply(UpdatePoolState);
        }

        var network = {
            connected: false,
            eventsConnected: false,
            peeringObsConnected: false,
            serverId: null,
            connData: {},
        };
        $rootScope.network = network;

        try {
            JoclyPlazza.config.preferredServer = localStorage.getItem('JoclyPlazza.preferredServer');
        } catch (e) {
            JoclyPlazza.config.preferredServer = null;
        }

        var eventsConn = new Connection();
        $rootScope.connection = eventsConn;

        $rootScope.pools = {
            peersWaiting: {},
            runningGames: {},
        };
        $rootScope.poolSizes = {};

        $rootScope.user = {
            id: null,
        }

        $rootScope.canWebRTC = CanWebRTC;

        var eventsConnTimer = null;
        var eventsConnData = null;
        var eventsConnDataAge = 0;
        var eventsConnConnecting = false;
        var eventsChannel = null;
        var autoReconnect = true;

        self.createChannel = function(options) {
            return eventsConn.createChannel(options);
        };

        self.updateUser = function(identity) {
            $.extend(true, $rootScope.user, identity);
        };

        self.clearUser = function(identity) {
            for (var f in $rootScope.user)
                if ($rootScope.user.hasOwnProperty(f))
                    if (f == 'userId')
                        $rootScope.user.userId = null;
                    else
                        delete $rootScope.user[f];
        };

        self.clearPools = function() {
            if ($rootScope.pools) {
                for (var pool in $rootScope.pools) {
                    var poolObj = $rootScope.pools[pool];
                    for (var id in poolObj)
                        delete poolObj[id];
                }
            }
        }

        self.isLogged = function() {
            return !!$rootScope.user.logged;
        }
        $rootScope.userIsLogged = self.isLogged;

        self.setPoolState = SetPoolState;

        if (JoclyPlazza.features.connect)
            InitiateConnection();

        self.restartConnection = function() {
            eventsConn.close();
            InitiateConnection();
        }

        // TODO dev
        var stopConnectionTimeout = 5000;
        var stopConnectionTimer = null;

        self.startConnection = function() {
            //console.log("jpzNet.startConnection()");
            if (stopConnectionTimer) {
                $timeout.cancel(stopConnectionTimer);
                stopConnectionTimer = null;
            }
            autoReconnect = true;
            if (!$rootScope.network.connected)
                InitiateConnection();
        }
        self.stopConnection = function() {
            //console.log("jpzNet.stopConnection()");
            autoReconnect = false;
            if (!stopConnectionTimer)
                stopConnectionTimer = $timeout(function() {
                    console.log("jpzNet.stopConnection(): stop");
                    eventsConn.close();
                }, stopConnectionTimeout);
        }
        self.restartConnection = function() {
            eventsConn.close();
            self.startConnection();
        }

    }
    ]);

})();;

var Model, View, GameBase, BoardBase, MoveBase;

(function () {

    'use strict';

    angular.module('JoclyPlazza').service(
    'JoclyPlazza.games',
    [
    '$rootScope', 'JoclyPlazza.util', 'JoclyPlazza.net',
    function($rootScope, jpzUtil, jpzNet) {
        var self = this;

        self.getGame = function(gameName) {
            return self.games[gameName];
        }

        self.preloadGame = function() {
            Model = {
                Game: {
                    g: {}
                },
                Move: {},
                Board: {},
            };
            View = {
                Game: {},
                Board: {},
            };
        }
        self.postloadGame = function() {
            GameBase = function(aOptions) {
                this.Init(aOptions);
            }
            GameBase.prototype = new JocGame();
            BoardBase = function(aGame) {
                this.InitBoard(aGame);
            }
            BoardBase.prototype = new JocBoard();
            MoveBase = function(args) {
                this.Init(args);
            }
            MoveBase.prototype = new JocMove();
            GameBase.prototype.mBoardClass = BoardBase;
            GameBase.prototype.mMoveClass = MoveBase;
            for (var k in Model.Game) {
                GameBase.prototype[k] = Model.Game[k];
            }
            for (var k in Model.Move) {
                MoveBase.prototype[k] = Model.Move[k];
            }
            for (var k in Model.Board) {
                BoardBase.prototype[k] = Model.Board[k];
            }
            for (var k in View.Game) {
                GameBase.prototype[k] = View.Game[k];
            }
            for (var k in View.Board) {
                BoardBase.prototype[k] = View.Board[k];
            }
        }

        self.runLive = function(options) {
            var peerChannel = jpzNet.createChannel({
                clientType: "peering",
                onConnect: function() {},
                onDisconnect: function() {},
                onReceive: function(message) {
                    if (message.type == "event") {
                        switch (message.event) {
                        case "E_PEERING_READY":
                            console.log("Peering ready", message);
                            peerChannel.send({
                                type: "event",
                                event: "E_REQUEST_PEER",
                                game: options.gameName,
                                timing: options.timing,
                                jocle: "",
                                cancelId: message.clientId,
                                version: 'v2',
                                oid: options.oid,
                            });
                            break;
                        case "E_PEER_FOUND":
                            console.log("Peering found");
                            $rootScope.playletAPI.createAndGoPlaylet({
                                mode: 'live',
                                gameId: message.gameId,
                                gameName: message.game,
                                delay: 100,
                            });
                            break;
                        case "E_NO_PEER":
                            $rootScope.alert({
                                title: $rootScope.t('error'),
                                text: $rootScope.t('live-offer-not-avail'),
                            });
                            break;
                        }
                    }
                },
            });
            return peerChannel;
        }

        self.runLiveTB = function(options) {
            console.log("runLiveTB");
            $rootScope.playletAPI.createAndGoPlaylet({
                mode: 'livetb',
                gameId: options.gameId,
                gameName: options.gameName,
                delay: 100,
            });
        }

        self.runLiveObs = function(options) {
            console.log("runLiveObs");
            $rootScope.playletAPI.createAndGoPlaylet({
                mode: 'liveobs',
                gameId: options.gameId,
                gameName: options.gameName,
                delay: 100,
            });
        }

        self.runTurnbased = function(options) {
            console.log("runTurnbased", options);
            $rootScope.playletAPI.createAndGoPlaylet({
                mode: 'turnbased',
                gameId: options.gameId,
                gameName: options.gameName,
                delay: 100,
            });
        }

        $rootScope.games = JoclyPlazza.config.games;
        $rootScope.gamesMap = {};
        $rootScope.gamesList = [];
        for (var i = 0; i < $rootScope.games.length; i++) {
            var game = $rootScope.games[i];
            $rootScope.gamesMap[game.name] = game;
            $rootScope.gamesList.push(game.name);
        }
        $rootScope.gameGroups = JoclyPlazza.config.gameGroups;
        $rootScope.features = {
            gameSearching: false,
            searchText: "",
        }

        $rootScope.myGames = {}
        $rootScope.myGamesSize = 0;

        $rootScope.myGamesSelfTurn = {};

        $rootScope.myGamesSelfTurnCount = 0;

        function UpdateMyGames(games, type) {

            for (var id in $rootScope.myGames)
                delete $rootScope.myGames[id];
            $rootScope.myGamesSize = 0;
            $rootScope.myGamesSelfTurn = 0;

            if ($rootScope.user.logged) {

                ['runningGames', 'peersWaiting', 'invitations'].forEach(function(poolName) {
                    var pool = $rootScope.pools[poolName];
                    if (!pool)
                        return;
                    for (var id in pool) {
                        var item = pool[id];

                        if (poolName == 'runningGames') {
                            if ((item.playerA && item.playerA.uid == $rootScope.user.uid) ||
                            (item.playerB && item.playerB.uid == $rootScope.user.uid)) {
                                $rootScope.myGames[id] = item;
                                $rootScope.myGamesSize++;
                                if ((item.playerA && item.playerA.uid == $rootScope.user.uid && item.who == 1) ||
                                (item.playerB && item.playerB.uid == $rootScope.user.uid && item.who==-1))
                                    $rootScope.myGamesSelfTurn++;
                            }
                        }
                        if (poolName == 'peersWaiting') {
                            if (item.creator.uid == $rootScope.user.userId) {
                                $rootScope.myGames[id] = item;
                                $rootScope.myGamesSize++;
                            }
                        }
                        if (poolName == 'invitations') {
                            $rootScope.myGames[id] = item;
                            $rootScope.myGamesSize++;
                            if (item.recipient && item.recipient.uid == $rootScope.user.uid)
                                $rootScope.myGamesSelfTurn++;
                            else if ($rootScope.user.providers &&
                            item.recipientData &&
                            $rootScope.user.providers[item.recipientData.service] == item.recipientData.id)
                                $rootScope.myGamesSelfTurn++;
                        }
                    }
                });

            }

        }

        $rootScope.$watchCollection('pools["runningGames"]', function(games) {
            UpdateMyGames(games, 'playing');
        });

        $rootScope.$watchCollection('pools["peersWaiting"]', function(games) {
            UpdateMyGames(games, 'open');
        });

        $rootScope.$watchCollection('pools["invitations"]', function(games) {
            UpdateMyGames(games, 'invitations');
        });

        $rootScope.allMyGames = function() {
            return angular.extend({}, $rootScope.myGames.live, $rootScope.myGames.turnbased, $rootScope.myGames.openTurnbased, $rootScope.myGames.openLive);
        }

        $rootScope.allMyGamesSize = function() {
            return $rootScope.myGamesSize;
        }

        if (JoclyPlazza.features.favIconHighlight) {
            var fiElm = $("link[rel='shortcut icon']");
            if (fiElm.length > 0) {
                var favIconBaseHref = fiElm.attr("href");
                $rootScope.$watch('myGamesSelfTurn', function(count) {
                    if (count > 0)
                        fiElm.attr("href", JoclyPlazza.features.favIconHighlight);
                    else
                        fiElm.attr("href", favIconBaseHref);
                });
            }
        }

    }
    ]);


    angular.module('JoclyPlazza').controller('jpzGameDetailsCtrl',
    [ '$scope', '$routeParams', 'JoclyPlazza.layout',
    function($scope, $routeParams, jpzLayout) {

        if (!($routeParams.gameName in $scope.gamesMap)) {
            $scope.go("/unsupported/" + $routeParams.gameName + "/game-details/" + $routeParams.gameName);
            return;
        }

        $scope.gameName = $routeParams.gameName;

        $scope.game = $scope.gamesMap[$scope.gameName];

        if ($scope.features["apps"]) {
            if ($scope.game2Apps[$scope.gameName]) {
                var apps = $scope.game2Apps[$scope.gameName];
                var gameApps = [];
                for (var i in apps) {
                    var app = apps[i].app;
                    if (gameApps.indexOf(app) < 0) {
                        gameApps.push(app);
                    }
                    console.log(app.name);
                }
                $scope.gameApps = gameApps;
            }
        }

        $scope.details = {};
        $scope.videoWidth = 430;
        $scope.videoHeight = 242;

        $scope.archived = {};

        $scope.hasMorePlayers = false;
        $scope.hasMoreGames = false;

        $scope.nbItemsToBeLoaded = 0;

        $scope.openVideoModal = function(vidId) {
            jpzLayout.openDialog($scope, "/jocly/plazza/partial/youtubevideo", {
                ytId: vidId,
                game: $scope.game,
            });
        }

        $scope.getTitle = function() {
            return $scope.t('game-details', {
                '@game': $scope.gamesMap[$scope.gameName].title
            });
        }
        $scope.getPageId = function() {
            return 'jocly-details';
        }

        $scope.floor = function(value) {
            return Math.floor(value);
        }

        function DecLoader() {
            $scope.nbItemsToBeLoaded--;
        }

        $scope.$watch('network.connected', function(newValue, oldValue) {
            if (newValue) {
                // details data

                $scope.nbItemsToBeLoaded++;
                $.ajax({
                    url: $scope.network.connData.baseURL + "plazza/get-extra-details",
                    data: {
                        game: $scope.gameName
                    },
                    success: function(data) {
                        if (data.status) {
                            for (var i = 0; i < data.result.length; i++) {
                                var detail = data.result[i];
                                switch (detail.type) {
                                default:
                                    $scope.details[detail.type] = detail.data;
                                    break;
                                case "forum":
                                    $scope.details[detail.type] = "htt" + "p://www.jocly.com/forum/" + detail.data;
                                    break;
                                case "videos":
                                    var videos = $scope.details[detail.type] = detail.data.split(";");
                                    break;
                                case "games":
                                    var rg = detail.data.split(";");
                                    for (var g = 0; g < rg.length; g++) {
                                        var gn = rg[g];
                                        if ($scope.gamesMap[gn]) {
                                            if ($scope.details[detail.type] === undefined)
                                                $scope.details[detail.type] = [];
                                            $scope.details[detail.type].push(gn);
                                        }
                                    }
                                    break;
                                }
                            }
                            $scope.$digest();
                        }
                    },
                    error: function() {
                        $scope.details = null;
                        $scope.$digest();
                    },
                    complete: DecLoader,
                });

                // last played games
                $scope.nbItemsToBeLoaded++;
                $.ajax({
                    url: $scope.network.liveBaseURL + "/played-games",
                    data: {
                        games: $scope.gameName,
                        limit: 5
                    },
                    dataType: 'jsonp',
                    crossDomain: true,
                    success: function(data) {
                        console.log("played-games", data);
                        if (data.status) {
                            $scope.archived = data.result.games;
                            $scope.hasMoreGames = data.result.hasMore;
                            if (!$scope.$$phase)
                                $scope.$digest();
                        }
                    },

                    error: function() {
                        if (!$scope.$$phase)
                            $scope.$digest();
                    },
                    complete: DecLoader,
                });

                // best players
                $scope.nbItemsToBeLoaded++;
                $.ajax({
                    url: $scope.network.liveBaseURL + "/elo",
                    data: {
                        game: $scope.gameName,
                        limit: 5,
                    },
                    dataType: 'jsonp',
                    crossDomain: true,
                    success: function(data) {
                        $scope.elosState = "loaded";
                        if (data.status) {
                            $scope.elos = data.result.elos;
                            $scope.hasMorePlayers = data.result.hasMore;
                            if (!$scope.$$phase)
                                $scope.$digest();
                        }
                    },
                    error: function() {
                        $scope.elosState = "loaded";
                        if (!$scope.$$phase)
                            $scope.$digest();
                    },
                    complete: DecLoader,
                });

            }
        });

        $scope.nbItemsToBeLoaded++;
        $scope.getModel($scope.gameName, function(model) {
            $scope.$apply(function(scope) {
                scope.details.credits = scope.getModelLocale(model, 'credits');
                scope.details.description = scope.getModelLocale(model, 'description');
                scope.fullPath = model.fullPath;
                DecLoader();
            });
        });

        $scope.$watch('user.logged', function(logged) {
            if (logged) {
                $scope.nbItemsToBeLoaded++;
                $.ajax({
                    url: $scope.network.liveBaseURL + "/elo",
                    data: {
                        game: $scope.gameName,
                        uid: $scope.user.userId
                    },
                    dataType: 'jsonp',
                    crossDomain: true,
                    success: function(data) {
                        console.log("Got ELO", data);
                        if (data.status) {
                            if (data.result.elos.length > 0)
                                $scope.userELO = data.result.elos[0].elo;
                        }
                        $scope.$digest();
                    },
                    error: function() {
                        $scope.$digest();
                    },
                    complete: DecLoader,
                });
            }
        });
    }

    ]);

    angular.module('JoclyPlazza').controller('jpzInvitationCtrl',
    [ '$scope', '$window', '$routeParams',
    function($scope, $window, $routeParams) {

        var id = $routeParams.tableId;

        console.info("jpzInvitationCtrl", id, JoclyPlazza);

        $scope.status = "loading";

        $scope.$watch("network.connected", function(connected) {
            if (connected) {
                $scope.status == "loading";
                $.ajax({
                    url: $scope.network.liveBaseURL + "/table",
                    data: {
                        id: id,
                    },
                    dataType: 'jsonp',
                    crossDomain: true,
                    success: function(data) {
                        console.log("table", data);
                        if (data.status) {
                            var table = data.result.table;
                            $scope.table = table;
                            switch (table.status) {
                            case 'invitation':
                                $scope.status = "ready";
                                break;
                            case 'invitation-declined':
                                $scope.status = "declined";
                                break;
                            case 'invitation-expired':
                                $scope.status = "expired";
                                break;
                            case 'playing':
                            case 'played':
                                $scope.status = "accepted";
                                break;
                            }
                        } else {
                            $scope.status = "failed";
                            $scope.failedReason = data.error;
                        }
                    },
                    error: function() {
                        $scope.status = "failed";
                        $scope.failedReason = $scope.t("network-error");
                    },
                    complete: function() {
                        if (!$scope.$$phase)
                            $scope.$digest();
                    }
                });
            }
        });

        $scope.toFullJocly = function() {
            $window.open(JoclyPlazza.config.baseURL + "jocly/plazza/index.html#/invitation/" + id, "_system");
        }

        $scope.goToTable = function() {
            $scope.go("/live/" + id);
        }

        $scope.decline = function() {
            $scope.peeringObsChannel.send({
                type: "event",
                event: "answer-invitation",
                tableId: id,
                accept: false,
            });
            $scope.go('/games');
        }

        var unwatchLogin = null;

        $scope.accept = function() {
            function Accept() {
                $scope.peeringObsChannel.send({
                    type: "event",
                    event: "answer-invitation",
                    tableId: id,
                    accept: true,
                });
                $scope.go('/live/' + id);
            }
            function TryAccept() {
                if ($scope.peeringObsChannel) {
                    var unwatch = $scope.$watch("peeringObsChannel", function(channel) {
                        if (channel) {
                            unwatch();
                            Accept();
                        }
                    });
                } else
                    Accept();
            }
            if (!$scope.user.logged) {
                if (!unwatchLogin)
                    unwatchLogin = $scope.$watch("user.logged", function(logged) {
                        if (logged) {
                            unwatchLogin();
                            TryAccept();
                        }
                    });
                $scope.userAuth.startLogin();
            } else
                TryAccept();
        }
    }
    ]);

})();;
(function() {

    'use strict';

    angular.module('JoclyPlazza').service(
    'JoclyPlazza.user',
    ['$rootScope', '$timeout', 'JoclyPlazza.net', 'JoclyPlazza.layout',
    function($rootScope, $timeout, jpzNet, jpzLayout) {
        var self = this;

        self.openUserInfoDialog = function(uid, game) {
            jpzLayout.openDialog($rootScope, '/jocly/plazza/partial/user-info-dialog', {
                uid: uid,
                game: game || null,
            });
        }

        function AuthProvider() {
            this.providerName = "none";
            this.providerTitle = "None";
            this.hasInitiator = true;
            this.hasCredentials = false;
        }
        AuthProvider.prototype = {
            setInitiateAuthCallback: function(callback) {
                this.initiateAuthCallback = callback;
            },
            initiateAuth: function() {},
            requestToken: function() {
                authChannel.send({
                    type: "event",
                    event: "gettoken",
                    provider: this.providerName,
                });
            },
            gotRequestToken: function(message) {
                var $this = this;
                var startAuthCallback = function() {
                    var authWindow = window.open($this.getDialogUrl(message),
                    "jpz_auth_" + $this.providerName + "_login",
                    "width=320,height=480");
                    function CheckAuthWindowClosed() {
                        if (authWindow.closed) {
                            clearInterval(authWindowPollTimer);
                        }
                    }
                    var authWindowPollTimer = setInterval(CheckAuthWindowClosed, 100);
                }
                if (initiatingAuth == this.providerName)
                    this.initiateAuthCallback(null, startAuthCallback);
            },
            getProviderTitle: function() {
                return this.providerTitle;
            },
            logout: function() {
                console.warn("Generic auth provider called");
            },
            useAutoLogin: function() {
                return false;
            },
        }
        function TwitterProvider() {
            this.providerName = "twitter";
            this.providerTitle = "Twitter";
        }
        TwitterProvider.prototype = new AuthProvider();
        TwitterProvider.prototype.initiateAuth = function() {
            this.requestToken();
        }
        TwitterProvider.prototype.getDialogUrl = function(message) {
            return "https://api.twitter.com/oauth/authenticate?oauth_token=" + encodeURIComponent(message.oauthToken);
        }
        function FacebookProvider() {
            this.providerName = "facebook";
            this.providerTitle = "Facebook";
        }
        FacebookProvider.prototype = new AuthProvider();
        FacebookProvider.prototype.initiateAuth = function() {
            this.requestToken();
        }
        FacebookProvider.prototype.getDialogUrl = function(message) {
            return "https://www.facebook.com/dialog/oauth?display=touch&client_id=" + encodeURIComponent(message.appId) +
            "&redirect_uri=" + encodeURIComponent(message.callbackUrl);
        }
        function PersonaProvider() {
            console.info("PersonaProvider");
            this.providerName = "persona";
            this.providerTitle = "Persona";
            this.loading = false;
            this.watching = false;
        }
        PersonaProvider.prototype = new AuthProvider();
        PersonaProvider.prototype.initiateAuth = function(auto) {
            if (auto === undefined)
                auto = false;
            var $this = this;
            function InitiateAuth() {
                console.info("InitiateAuth");
                var startAuthCallback = function() {
                    console.info("startAuthCallback");
                    if (!$this.watching) {
                        $this.watching = true;
                        console.info("watch");
                        navigator.id.watch({
                            onlogin: function(assertion) {
                                console.info("audience", /(^https?:\/\/[^\/]+)/.exec(window.location.href)[1]);
                                authChannel.send({
                                    type: "event",
                                    event: "persona-assertion",
                                    assertion: assertion,
                                    audience: /(^https?:\/\/[^\/]+)/.exec(window.location.href)[1],
                                });
                            },
                            onlogout: function() {
                                console.log("Persona onlogout");
                            },
                            onready: function() {
                                console.log("Persona ready")
                            },
                            loggedInUser: $rootScope.user.email ? $rootScope.user.email: null,
                        });
                    }
                    if (!auto)
                        navigator.id.request();
                }
                if (auto)
                    startAuthCallback();
                else
                if (initiatingAuth == $this.providerName)
                    $this.initiateAuthCallback(null, startAuthCallback);
            }
            if (navigator.id === undefined && !this.loading) {
                this.loading = true;
                $("<script/>").attr("src", "https://login.persona.org/include.js").appendTo("head");
                var loadPersonaTimer = setInterval(function() {
                    if (navigator.id) {
                        clearInterval(loadPersonaTimer);
                        InitiateAuth();
                    }
                }, 100);
            } else
                setTimeout(InitiateAuth, 0);
        }
        PersonaProvider.prototype.logout = function() {
            navigator.id.logout();
        }
        PersonaProvider.prototype.useAutoLogin = function() {
            return true;
        }

        function JoclyProvider() {
            console.info("JoclyProvider");
            this.providerName = "jocly";
            this.providerTitle = "Jocly";
            this.hasInitiator = false;
            this.hasCredentials = true;
        }
        JoclyProvider.prototype = new AuthProvider();
        JoclyProvider.prototype.initiateAuth = function(auto) {
            $('.modal').modal('hide');
            jpzLayout.openDialog($rootScope, '/jocly/plazza/partial/credentials-dialog', {});

        }
        JoclyProvider.prototype.logout = function() {
            console.info("JoclyProvider.logout()");
        }
        JoclyProvider.prototype.useAutoLogin = function() {
            return true;
        }

        var providers = {
            'twitter': new TwitterProvider(),
            'facebook': new FacebookProvider(),
            'persona': new PersonaProvider(),
            'jocly': new JoclyProvider(),
        }

        function GetProviderTitle(provider) {
            return providers[provider].getProviderTitle();
        }

        function CMSValidateAccount(message) {
            //console.info("CMSValidateAccount",message);
            var previousUser = angular.extend({}, $rootScope.user);
            function CallServer(userName) {
                var data = {
                    json: JSON.stringify(message),
                }
                if (userName)
                    data.requestedName = userName;
                $.ajax({
                    url: $rootScope.network.connData.loginURL,
                    data: data,
                    dataType: $rootScope.features.jsonp ? 'jsonp': 'json',
                    crossDomain: true,
                    headers: {
                        "Accept-Encoding" : "gzip"
                    },
                    cache: false,
                    success: function(data) {
                        if (data.status) {
                            if (data.result.existing) {
                                ResetAuth();
                                //console.error("data.result",JSON.stringify(data.result,null,4));
                                //console.error("Equals ?",angular.equals($rootScope.user,previousUser),$rootScope.user.name,
                                //		JSON.stringify(data.result,null,4));
                                /*
                                										console.error("Equals ?",angular.equals(data.result.userData,previousUser),
                                												JSON.stringify(previousUser,null,4),
                                												JSON.stringify(data.result,null,4));
                                										*/
                                if (data.result.userData.uid != previousUser.uid)
                                    jpzNet.restartConnection();
                                SaveAuthSuccess($rootScope.user);
                            } else {
                                $(".jpz-auth-wait-login").hide();
                                var scope = angular.element(".jpz-auth-name").isolateScope();
                                if (scope)
                                    scope.show(data.result.suggestedName ? data.result.suggestedName : '', CallServer);
                            }
                        } else {
                            ResetAuth();
                            $rootScope.alert({
                                title: $rootScope.t('error'),
                                text: data.error,
                            });
                        }
                    },
                    error: function(data) {
                        console.error("Error", data);
                    },
                });
            }
            CallServer(null);
        }

        function ReceiveFromLiveServer(message) {
            switch (message.event) {
            case "gettoken_response":
                providers[message.provider].gotRequestToken(message);
                break;
            case "authenticated":
                delete message.serverId;
                delete message.clientId;
                CMSValidateAccount(message);
            }
        }

        function ResetAuth() {
            $(".jpz-auth-login-btn").show();
            $(".jpz-auth-initiator").hide();
            $(".jpz-auth-wait-login").hide();
            $(".jpz-auth-name").hide();
            $(".jpz-auth-credentials").hide();
            $(".jpz-auth-providers").modal("hide");
        }

        function CancelAuth() {
            $(".jpz-auth-initiator").hide();
            $(".jpz-auth-login-btn").show();
        }

        function InitiateAuth(provider) {
            $(".jpz-auth-login-btn").hide();
            if (providers[provider].hasInitiator) {
                $(".jpz-auth-initiator").show().find(".jpz-auth-provider").text(GetProviderTitle(provider));
                $(".jpz-auth-initiator .jpz-auth-icon").addClass("jpz-auth-icon-" + provider);
            }
            if (providers[provider].hasCredentials) {
                $(".jpz-auth-credentials").show();
            }
            $(".jpz-auth-initiator-proceed").hide();
            $(".jpz-auth-wait-login").hide();
            initiatingAuth = provider;
            var providerObject = providers[provider];
            providerObject.setInitiateAuthCallback(function(error, startAuthCallback) {
                if (!error) {
                    $(".jpz-auth-initiator-proceed").show().unbind("click").bind("click", function() {
                        $(".jpz-auth-initiator").hide();
                        $(".jpz-auth-wait-login").show().find(".jpz-auth-provider").text(GetProviderTitle(provider));
                        startAuthCallback();
                    });
                } else {
                    console.error("Error initiating auth", error);
                    CancelAuth();
                }
            });
            providerObject.initiateAuth();
        }

        function InitiateAuthAuto(provider) {
            if (!providers[provider].useAutoLogin())
                return;
            initiatingAuth = provider;
            var providerObject = providers[provider];
            providerObject.setInitiateAuthCallback(function(error, startAuthCallback) {
                if (!error) {
                    startAuthCallback();
                } else {
                    CancelAuth();
                }
            });
            providerObject.initiateAuth(true);
        }

        function Logout(callback) {
            if (callback === undefined)
                callback = function() {};
            ResetAuth();
            jpzNet.clearUser();
            jpzNet.clearPools();
            $.ajax({
                url: $rootScope.network.connData.logoutURL,
                data: {},
                dataType: $rootScope.features.jsonp ? 'jsonp': 'json',
                crossDomain: true,
                headers: {
                    "Accept-Encoding" : "gzip"
                },
                cache: false,
                success: function(data) {
                    if (data.status) {
                        callback(null);
                        jpzNet.restartConnection();
                    } else
                        callback(data.error);
                },
            });
            if (initiatingAuth)
                providers[initiatingAuth].logout();
            ClearAuthSuccess();
        }

        function SaveAuthSuccess(data) {
            if (window.localStorage)
                window.localStorage.setItem("JoclyPlazza.lastLogin", JSON.stringify({
                    provider: initiatingAuth,
                    data: data,
                }));
        }

        function ClearAuthSuccess(data) {
            if (window.localStorage)
                window.localStorage.removeItem("JoclyPlazza.lastLogin");
        }


        var initiatingAuth = null;
        var authChannel = null;
        var authInProgress = false;
        var authChannelInProgress = false;

        $rootScope.userAuth = {
            connected: false,
            providerNames: ['jocly', 'persona', 'twitter', 'facebook'],
            providerTitles: {
                'jocly': 'Jocly',
                'persona': 'Persona',
                'twitter': 'Twitter',
                'facebook': 'Facebook',
            },
            startLogin: function() {
                authInProgress = true;
                jpzLayout.openDialog($rootScope, '/jocly/plazza/partial/login-providers', {
                    classes: ['jpz-auth-providers'],
                });
            },
            initiateAuth: function(provider) {
                InitiateAuth(provider);
            },
            logout: Logout,
            closeAuth: ResetAuth,
            closeUserPopover: function() {
                $(".jpz-user-popover").hide(400);
            },
            profile: function() {
                $rootScope.go('/profile');
            },
            getProvider: function(provider) {
                return providers[provider];
            },
            joleLogin: function(userTag) {
                if (authChannel) {
                    authChannel.send({
                        type: "event",
                        event: "jole-login",
                        userTag: userTag,
                    });
                } else
                    console.error("Requested jole login but authChannel not up");
            },
        }

        $rootScope.$watch('network.eventsConnected', function(connected) {
            if (connected) {
                if (authChannel != null || authChannelInProgress)
                    return;
                authChannelInProgress = true;
                authChannel = jpzNet.createChannel({
                    clientType: "auth",
                    onReceive: function(message) {
                        ReceiveFromLiveServer(message);
                    },
                    onConnect: function() {
                        if ($rootScope.$$phase)
                            $rootScope.userAuth.connected = true;
                        else
                            $rootScope.$apply(function(scope) {
                                scope.userAuth.connected = true;
                            });
                        authChannelInProgress = false;
                        if (!jpzNet.isLogged() && window.localStorage) {
                            try {
                                var lastLogin = window.localStorage.getItem("JoclyPlazza.lastLogin");
                                if (lastLogin) {
                                    lastLogin = JSON.parse(lastLogin);
                                    if (lastLogin.provider)
                                        InitiateAuthAuto(lastLogin.provider);
                                }
                            } catch (e) {}
                        }
                    },
                    onDisconnect: function() {
                        if (!$rootScope.$$phase)
                            $rootScope.$apply(function(scope) {
                                scope.userAuth.connected = false;
                            });
                        else
                            $rootScope.userAuth.connected = false;
                        authChannel = null;
                        authChannelInProgress = false;
                    },
                });
            } else {
                jpzNet.clearUser();
            }
        });

        $rootScope.$watch('user.logged', function(logged, oldLogged) {
            /*
            					if(logged)
            						$rootScope.activity.add({
            							text: $rootScope.t('act-logged-as',{'@user':$rootScope.user.name}),
            						});
            					else
            					*/
            if (oldLogged) {
                /*
                						$rootScope.activity.add({
                							text: $rootScope.t('act-unlogged'),
                						});
                						*/
                $rootScope.notifications.splice(0, $rootScope.notifications.length);
            }
        });

        this.CMSValidateAccount = CMSValidateAccount;

    }
    ]);


    angular.module('JoclyPlazza').directive('jpzUserButton', [ '$rootScope', 'jngUnit',
    function factory($rootScope, jngUnit) {
        return {
            scope: true,
            templateUrl : '/jocly/plazza/partial/user-button',
            link: function(scope, element, attrs) {
                var button = angular.element(element.children()[0]);
                button.addClass("jpz-button");
                element.addClass("jpz-button-cont");
                element.addClass("jpz-user-button");
                $rootScope.$watch('user', function(user) {
                    var url = '';
                    if (user.userId && user.type != 'jocly-guest' && user.picture)
                        url = "url(" + user.picture + ")";
                    button.css("background-image", url);
                }, true);
                scope.toggleUserPopover = function() {
                    var tooltip = $(element).find(".jpz-user-popover");
                    var pos = $(element).offset();
                    var prevState = tooltip.is(":visible");
                    tooltip.css({
                        top: jngUnit && jngUnit.unit ? jngUnit.unit.pixels: 10,
                        right: jngUnit && jngUnit.unit ? Math.min(10, pos.left - 180): 10,
                        width: "200px",
                    }).toggle(400);
                    if (!prevState)
                        tooltip.css("z-index", scope.openPopoverZIndex());
                    else
                        scope.closePopover();
                };
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('jpzLoginProvidersPanel', [function factory() {
        return {
            replace: true,
            templateUrl : '/jocly/plazza/partial/login-providers-panel',
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('jpzLoginErrorPanel', [function factory() {
        return {
            replace: true,
            templateUrl : '/jocly/plazza/partial/login-error-panel',
        };
    }
    ]);

    angular.module('JoclyPlazza').controller('jpzUserCtrl', [ '$scope', function($scope) {

}
    ]);

    angular.module('JoclyPlazza').directive('jpzAuthName', [ '$rootScope', '$timeout', '$sanitize',
    function factory($rootScope, $timeout, $sanitize) {
        return {
            scope: {},
            replace: true,
            templateUrl : '/jocly/plazza/partial/auth-name',
            link: function(scope, element, attrs) {
                var jqElement = $(element[0]);
                var jqInput = jqElement.find("input");
                var createCallback;
                function CheckName() {
                    $.ajax({
                        url: $rootScope.network.connData.checkNameURL,
                        data: {
                            json: JSON.stringify({
                                name: jqInput.val()
                            })
                        },
                        method: "POST",
                        success: function(data) {
                            if (data.status) {
                                jqElement.removeClass("error");
                                jqElement.find(".help-block").empty();
                                scope.actionDisabled = false;
                            } else {
                                jqElement.addClass("error");
                                jqElement.find(".help-block").html($sanitize(data.error));
                                scope.actionDisabled = true;
                            }
                            scope.$digest();
                        },
                        error: function(data) {
                            console.error("Error", data);
                        },
                    });
                }
                scope.show = function(name, callback) {
                    createCallback = callback;
                    scope.actionDisabled = true;
                    scope.$digest();
                    $timeout(function() {
                        jqInput.focus().val(name);
                        CheckName();
                    }, 200);
                    jqElement.show();
                };
                scope.submit = function() {
                    if (createCallback)
                        createCallback(jqInput.val());
                };
                jqInput.bind("keyup", function(event) {
                    var timeout = null;
                    if (event.keyCode == 13)
                        scope.submit();
                    else {
                        if (timeout != null)
                            $timeout.cancel(timeout);
                        timeout = $timeout(function() {
                            timeout = null;
                            CheckName();
                        }, 250);
                    }
                });
                scope.$on("$destroy", function() {
                    jqInput.unbind("keyup");
                });
            },
        };
    }
    ]);


    angular.module('JoclyPlazza').controller('jpzUsersCtrl',
    [ '$scope', 'JoclyPlazza.user',
    function($scope, jpzUser) {

        $scope.toolbarTitle = $scope.t('connected-users');

        $scope.users = {};
        $scope.userCount = 0;
        $scope.guestCount = 0;

        $scope.getTitle = function() {
            return $scope.t('connected-users');
        }
        $scope.getPageId = function() {
            return 'connected-users';
        }

        $scope.loadUsers = function() {
            var url = $scope.network.liveBaseURL + "/users";
            $.ajax({
                url: url,
                dataType: $scope.features.jsonp ? 'jsonp': 'json',
                crossDomain: true,
                headers: {
                    "Accept-Encoding" : "gzip"
                },
                cache: false,
                data: {},
                success: function(data) {
                    if (data.status) {
                        for (var id in $scope.users)
                            delete $scope.users[id];
                        for (var id in data.result.users)
                            $scope.users[id] = data.result.users[id];
                        $scope.userCount = data.result.userCount;
                        $scope.guestCount = data.result.guestCount;
                    }
                },
                error: function() {
                    console.info("Failed getting users", arguments);
                },
                complete: function() {
                    if (!$scope.$$phase)
                        $scope.$apply();
                },
            });
        }

        $scope.$watch("network.connected", function(connected) {
            if (connected)
                $scope.loadUsers();
        });

        $scope.openUserDialog = function(uid) {
            jpzUser.openUserInfoDialog(uid);
        }

    }
    ]);

    angular.module('JoclyPlazza').controller('jpzLoginCtrl', [ '$scope', function($scope) {

        console.info("jpzLoginCtrl");

    }
    ]);

    angular.module('JoclyPlazza').controller('jpzCredentialsCtrl',
    [ '$scope', '$timeout', '$interval', 'JoclyPlazza.user',
    function($scope, $timeout, $interval, jpzUser) {

        $scope.mode = "login";

        $scope.values = {
            login: '',
            password: '',
        }

        $scope.errorMessage = null;

        $scope.$watch('values', function() {
            $scope.errorMessage = null;
        }, true);

        $scope.$watch('mode', function(mode) {
            $scope.errorMessage = null;
            var modeField = {
                login: 'login',
                signup: 'name',
                validate: 'captcha',
                reset: 'resetlogin',
            }
            [mode];
            if (modeField)
                $timeout(function() {
                    $("input[name=" + modeField + "]").focus();
                }, 0);
        });

        var autoFillCheckLoop = 0;

        var autoFillCheckTimer = $interval(function() {
            $scope.values.login = $(".jpz-auth-credentials input[name=login]").val();
            $scope.values.password = $(".jpz-auth-credentials input[name=password]").val();
            if (autoFillCheckLoop++>50)
                $interval.cancel(autoFillCheckTimer);
        }, 100);

        $scope.login = function() {
            $.ajax({
                url: JoclyPlazza.config.cmsURL + "jocly/plazza/check-credentials",
                dataType: $scope.features.jsonp ? 'jsonp': 'json',
                crossDomain: true,
                headers: {
                    "Accept-Encoding" : "gzip"
                },
                cache: false,
                data: {
                    login: $scope.values.login,
                    password: $scope.values.password
                },
                success: function(data) {
                    if (data.status) {
                        $scope.errorMessage = null;
                        jpzUser.CMSValidateAccount({
                            signedData: data.result,
                        });
                        $scope.closeDialog();
                    } else
                        $scope.errorMessage = data.error;
                    if (!$scope.$$phase)
                        $scope.$apply();
                },
                error: function() {
                    console.error("set check credentials error", arguments);
                },
            });
        }

        $scope.signup = function() {
            $.ajax({
                url: JoclyPlazza.config.cmsURL + "jocly/plazza/signup-credentials",
                dataType: $scope.features.jsonp ? 'jsonp': 'json',
                crossDomain: true,
                headers: {
                    "Accept-Encoding" : "gzip"
                },
                cache: false,
                data: {
                    name: $scope.values.name,
                    password: $scope.values.npassword,
                    email: $scope.values.email,
                },
                success: function(data) {
                    console.info("signup", data);
                    $scope.errorMessage = null;
                    if (data.status) {
                        if (data.result.authData) {
                            jpzUser.CMSValidateAccount({
                                signedData: data.result.authData,
                            });
                            $scope.closeDialog();
                        } else if (data.result.captcha) {
                            $scope.captcha = data.result.captcha;
                            $scope.uid = data.result.uid;
                            $scope.mode = 'validate';
                        }
                    } else
                        $scope.errorMessage = data.error;
                    if (!$scope.$$phase)
                        $scope.$apply();
                },
                error: function() {
                    console.error("signup credentials error", arguments);
                },
            });
        }

        $scope.validate = function() {
            $.ajax({
                url: JoclyPlazza.config.cmsURL + "jocly/plazza/validate-credentials",
                dataType: $scope.features.jsonp ? 'jsonp': 'json',
                crossDomain: true,
                headers: {
                    "Accept-Encoding" : "gzip"
                },
                cache: false,
                data: {
                    captcha: $scope.values.captcha,
                    uid: $scope.uid,
                },
                success: function(data) {
                    $scope.errorMessage = null;
                    if (data.status) {
                        if (data.result.authData) {
                            jpzUser.CMSValidateAccount({
                                signedData: data.result.authData,
                            });
                            $scope.closeDialog();
                        } else {
                            $scope.values.captcha = '';
                            $scope.errorMessage = data.result.error;
                        }
                    } else {
                        $scope.closeDialog();
                        $scope.alert({
                            title: $scope.t('error'),
                            text: data.error,
                        });
                    }
                    if (!$scope.$$phase)
                        $scope.$apply();
                },
                error: function() {
                    console.error("signup credentials error", arguments);
                },
            });
        }

        $scope.reset = function() {
            console.info("reset");
            $.ajax({
                url: JoclyPlazza.config.cmsURL + "jocly/plazza/reset-credentials",
                dataType: $scope.features.jsonp ? 'jsonp': 'json',
                crossDomain: true,
                headers: {
                    "Accept-Encoding" : "gzip"
                },
                cache: false,
                data: {
                    login: $scope.values.resetlogin,
                },
                success: function(data) {
                    console.info("reset", data);
                    $scope.closeDialog();
                    if (data.status) {
                        $scope.alert({
                            title: $scope.t('password-reset'),
                            text: data.result.message,
                        });
                    } else {
                        $scope.alert({
                            title: $scope.t('error'),
                            text: data.error,
                        });
                    }
                    if (!$scope.$$phase)
                        $scope.$apply();
                },
                error: function() {
                    console.error("signup credentials error", arguments);
                },
            });
        }

    }

    ]);

    angular.module('JoclyPlazza').directive('jpzUserInfo',
    [ '$rootScope', 'JoclyPlazza.layout',
    function factory($rootScope, jpzLayout) {
        return {
            scope: true,
            replace: true,
            templateUrl : '/jocly/plazza/partial/user-info',
            link: function(scope, element, attrs) {
                element.addClass("jpz-user-info");
                scope.userInfoData = scope.$eval(attrs.jpzUserInfo);
                console.info("scope.userInfoData", scope.userInfoData);
                //scope.user=null;
                scope.elos = [];
                var games = [];
                scope.games.forEach(function(game) {
                    games.push(game.name);
                });
                scope.$watch("network.connected", function(connected) {
                    if (connected) {
                        $.ajax({
                            //url: JoclyPlazza.config.cmsURL+"jocly/plazza/user/"+attrs.jpzUserInfo,
                            url: scope.network.liveBaseURL + "/user-info",
                            dataType: scope.features.jsonp ? 'jsonp': 'json',
                            crossDomain: true,
                            headers: {
                                "Accept-Encoding" : "gzip"
                            },
                            cache: false,
                            data: {
                                uid: scope.userInfoData.uid,
                                gameset: scope.gameSetId,
                            },
                            success: function(data) {
                                console.info("UserInfo", data);
                                if (data.status) {
                                    scope.selectedUser = data.result.user;
                                    scope.userInfoData.user = scope.selectedUser;
                                    scope.elos = data.result.elos;
                                } else {
                                    scope.selectedUser = null;
                                    scope.userInfoData.user = null;
                                }
                                if (!scope.$$phase)
                                    scope.$apply();
                            },
                            error: function() {
                                console.error("user info error", arguments);
                            },
                        });
                    }
                });
                var loginHandlerSet = false;
                scope.invite = function() {
                    console.info("Invite", scope.userInfoData, $rootScope.user.logged);
                    /*
                    	      			if(!$rootScope.user.logged) {
                    	      				scope.alert({
                    	      					title: scope.t('error'),
                    	      					text: scope.t('must-log-to-invite'),
                    	      				});
                    	      				return false;
                    	      			}
                    	      			*/
                    if (!scope.network.connected) {
                        scope.alert({
                            title: $scope.t('error'),
                            text: $scope.t('live-server-not-connected'),
                        });
                        return;
                    }
                    if (!$rootScope.user.logged) {
                        if (!loginHandlerSet) {
                            loginHandlerSet = true;
                            scope.$watch("user.logged", function(logged) {
                                if (logged)
                                    scope.invite();
                            });
                        }
                        scope.userAuth.startLogin();
                        return;
                    }
                    scope.pref.user.invitTableTiming = scope.pref.user.invitTableTiming || '3dpm';
                    scope.pref.user.invitTableStart = scope.pref.user.invitTableStart || 'random';
                    jpzLayout.openDialog(scope, "/jocly/plazza/partial/invite", {
                        inviteData: scope.userInfoData,
                        invite: function(game) {
                            if (scope.selectedUser.uid == $rootScope.user.uid)
                                scope.alert({
                                    title: scope.t('error'),
                                    text: scope.t('pz.cannot-self-invite'),
                                });
                            else
                                scope.peeringObsChannel.send({
                                    type: "event",
                                    event: "create-invitation",
                                    game: scope.userInfoData.game,
                                    user: scope.selectedUser.uid,
                                    timing: scope.pref.user.invitTableTiming,
                                    start: scope.pref.user.invitTableStart,
                                });
                        },
                    });
                    return true;
                }

            },
        };
    }
    ]);

    angular.module('JoclyPlazza').controller('jpzUserInfoPageCtrl',
    [ '$scope', '$routeParams',
    function($scope, $routeParams) {

        $scope.userInfoData = {
            uid: $routeParams.userId,
            game: null,
        }

    }
    ]);

    angular.module('JoclyPlazza').directive('jpzUserSelector',
    [ '$rootScope', '$timeout',
    function factory($rootScope, $timeout) {
        return {
            scope: true,
            template: "<input type='text' class='input-xlarge form-control jpz-selector'/>",
            require: '?ngModel',
            link: function(scope, element, attrs, ngModel) {
                element.addClass("jpz-user-selector");
                var inputElem = element.find("input");
                inputElem.attr("placeholder", attrs.jpzUserSelector);
                var lastValChecked = null;
                var callTimeout = null;
                var validEmail = false;
                var validUser = false;
                var querying = false;
                var values = {};
                ngModel.$render = function() {
                    console.info("$render", ngModel.$viewValue);
                    if (ngModel.$viewValue)
                        values = ngModel.$viewValue;
                }
                function MakeCall() {
                    callTimeout = null;
                    console.info("MakeCall", lastValChecked);
                    if (lastValChecked.length == 0)
                        return;
                    querying = true;
                    $.ajax({
                        url: scope.network.liveBaseURL + "/check-user",
                        dataType: scope.features.jsonp ? 'jsonp': 'json',
                        crossDomain: true,
                        headers: {
                            "Accept-Encoding" : "gzip"
                        },
                        cache: false,
                        timeout: 5000,
                        data: {
                            identifier: lastValChecked,
                        },
                        success: function(data) {
                            console.info("Got check user", data);
                            if (data.status) {
                                if (data.result.identifier == lastValChecked) {
                                    values.user = data.result.user;
                                    console.info("setviewvalue", values);
                                    ngModel.$setViewValue(values);
                                    validUser = true;
                                }
                            }
                        },
                        error: function() {
                            console.info("Failed checking user", arguments);
                        },
                        complete: function() {
                            querying = false;
                            if (!scope.$$phase)
                                scope.$apply();
                        },
                    });
                }
                function CheckUser() {
                    var val = /^\s*(.*?)\s*$/.exec(inputElem.val())[1];
                    if (val != lastValChecked) {
                        values.user = null;
                        ngModel.$setViewValue(values);
                        validUser = false;
                        lastValChecked = val;
                        if (callTimeout)
                            $timeout.cancel(callTimeout);
                        validEmail = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(val);
                        if (validEmail)
                            values.email = val;
                        else
                            values.email = null;
                        ngModel.$setViewValue(values);
                        callTimeout = $timeout(MakeCall, 500);
                    }
                }
                scope.inputClasses = function() {
                    var classes = [];
                    //console.info("inputClass",validEmail,querying,!!callTimeout);
                    if (!validEmail && !querying && !callTimeout && !validUser)
                        classes.push("has-error");
                    if (!validEmail && callTimeout)
                        classes.push("has-delay");
                    if (querying)
                        classes.push("has-query");
                    //console.info("classes",classes);
                    return classes.join(" ");
                }
                function DeferredCheckUser() {
                    $timeout(CheckUser);
                }
                inputElem.bind("keypress change focus blur", DeferredCheckUser);
                scope.$on("$destroy", function() {
                    inputElem.unbind("keypress change focus blur", DeferredCheckUser);
                });
            }
        }
    }
    ]);

})();;

(function() {

    'use strict';

    angular.module('JoclyPlazza').service('JoclyPlazza.playlet',
    [ '$rootScope', '$timeout', 'JoclyPlazza.games', 'JoclyPlazza.util', 'JoclyPlazza.net',
    'JoclyPlazza.layout', 'JoclyPlazza.webrtc',
    function($rootScope, $timeout, jpzGames, jpzUtil, jpzNet, jpzLayout, jpzWebRTC) {
        var self = this;
        var playletId = 0;

        var PSMs = {};

        function Playlet() {}

        Playlet.prototype = {
            init: function(gameName, mode, options) {
                if (mode === undefined)
                    mode = "hvsc";
                if (options === undefined)
                    options = {};
                this.id=++playletId;
                this.gameName = gameName;
                this.mode = mode;
                this.options = options;
                this.history = [];
                this.historyIndex =- 1;
                this.navPlaying = false;
                this.webrtc = false;
                this.startingPlayer = 1;
                this.endOfGameCallbacks = {};
                this.endOfGameScope = null;
                if ($rootScope.ga)
                    $rootScope.ga.track('play', gameName);
            },
            initFromGame: function() {
                this.levels = [];
                this.players = {
                    '1': {
                        type: 'self',
                        progress: 0,
                        state: "normal",
                    },
                    '-1': {
                        type: 'self',
                        progress: 0,
                        state: "normal",
                    }
                };
                this.features = $.extend({
                    hasToolbar: true,
                    toolbarMode: 'players',
                    useOptions: true,
                    canOptions: true,
                    useRules: true,
                    canRules: true,
                    useControls: true,
                    canControls: true,
                    hasControls: $rootScope.pref.device.playletControls,
                    useHistory: true,
                    canHistory: true,
                    hasHistory: $rootScope.pref.device.playletHistory,
                    useNavigation: true,
                    canNavigation: true,
                    hasNavigation: false,
                    useBack: false,
                    canBack: false,
                    useRestart: false,
                    canRestart: false,
                    useSwitchPlayers: false,
                    canSwitchPlayers: false,
                    useSwitchView: this.view.switchable,
                    canSwitchView: this.view.switchable,
                    useLoadGame: true,
                    canLoadGame: true,
                    useSaveGame: true,
                    canSaveGame: true,
                    useCloseGame: true,
                    canCloseGame: true,
                    useChat: false,
                    canChat: false,
                    hasChat: false,
                    useSetLevels: false,
                    useWebRTCLocal: false,
                    notifyEnd: true,
                    hasToolbarClose: true,
                    hasEnterMessage: true,
                    hasEndSound: true,
                    useTimer: true,
                    hasHistoryButton: true,
                    hasMinGameMenu: false,
                }, this.requestedFeatures);
                if (JoclyPlazza.features.history !== undefined)
                    this.features.hasHistory=!!JoclyPlazza.features.history;
                if (JoclyPlazza.features.controls !== undefined)
                    this.features.hasControls=!!JoclyPlazza.features.controls;
                if (JoclyPlazza.features.hasEnterMessage !== undefined)
                    this.features.hasEnterMessage=!!JoclyPlazza.features.hasEnterMessage;

                this.features.nav = $.extend({
                    useNavButtons: true,
                    canNavButtons: true,
                    useExit: true,
                    canExit: true,
                    usePlayFrom: true,
                    canPlayFrom: true,
                    navBarStyle: {},
                    hasCenteredButtons: false,
                }, this.features.nav);

                this.viewOptions = {
                    notation: false,
                    moves: true,
                    autocomplete: false,
                    sounds: true,
                    skin: null,
                };
                var skins = [];
                var skinsMap = {}
                if (this.view.skins) {
                    var brand = $rootScope.config.request.brand;
                    for (var i = 0; i < this.view.skins.length; i++) {
                        var skin = this.view.skins[i];
                        if (($rootScope.can3D() || !skin["3d"]) &&
                        (!skin["brand"] || (!brand && skin["brand"] == "none") || brand == skin["brand"])
                        ) {
                            skins.push(skin)
                            skinsMap[skin.name] = skin;
                        }
                    }
                    this.view.skins = skins;
                }

                if (!this.view.skins || this.view.skins.length == 0)
                    this.viewOptions.skin = null;
                else
                    this.viewOptions.skin = skins[0].name;
                $.extend(this.viewOptions, this.view.defaultOptions || {});
                var localConfig = jpzUtil.localLoad("joclyhub$" + this.gameName + "$vo$" + this.mode, {});
                $.extend(this.viewOptions, localConfig);
                if ($rootScope.config.request.skin)
                    this.viewOptions.skin = $rootScope.config.request.skin;
                if (this.viewOptions.skin && !skinsMap[this.viewOptions.skin])
                    this.viewOptions.skin = skins[0].name;
            },
            requestClose: function(callback) {
                callback();
            },
            loadCSS: function() {
                if (typeof this.view.css == "string")
                    this.view.css = [this.view.css];
                for (var i = 0; i < this.view.css.length; i++)
                    $("head").append('<link jpz-playlet-tmp rel="stylesheet" type="text/css" href="' + this.view.fullPath + '/' + this.view.css[i] + '" />');
            },
            unloadCSS: function() {
                $("head link[jpz-playlet-tmp]").remove();
            },
            enter: function(widget) {
                $("body").addClass("jpz-playlet-view");
                this.loadCSS();
                if (this.features.hasEnterMessage)
                    $rootScope.showMessage({
                        text: this.getDescription(),
                        type: 'success',
                        position: 'top',
                    });
            },
            leave: function() {
                this.destroyView();
                this.unloadCSS();
                $("body").removeClass("jpz-playlet-view");
                if (JoclyPlazza.features.closePlayletOnLeave)
                    this.close();
            },
            sendEventPSM: function(event, data) {
                var psm = PSMs[this.id];
                if (psm) {
                    psm.smQueueEvent(event, data);
                } else {
                    console.warn("sendEventPSM(", event, ",", data, "): no PSM for", this.id)
                }
            },
            pause: function(event, data) {
                var psm = PSMs[this.id];
                if (psm)
                    psm.smPause();
            },
            resume: function(event, data) {
                var psm = PSMs[this.id];
                if (psm)
                    psm.smPlay();
            },
            destroyView: function() {
                this.sendEventPSM("E_RESIZE", {
                    deleteWidget: true,
                    width: 0,
                    height: 0,
                });
                if (this.pauseOnHidden())
                    this.pause();
            },
            initView: function(boardElement) {
                var boardWidth = boardElement.width();
                var boardHeight = boardElement.height();
                //console.log("initView board size",boardWidth,"x",boardHeight,Date.now())
                if (boardWidth > 0 && boardHeight > 0) {
                    this.sendEventPSM("E_RESIZE", {
                        widget: boardElement,
                        width: boardWidth,
                        height: boardHeight,
                    });
                    this.resume();
                }
            },
            useScope: function(scope) {
                var $this = this;
                var psm = PSMs[this.id];
                if (!psm) {
                    PSMs[this.id] = new JoclyPSM({
                        playlet: this,
                        scope: scope,
                        model: this.model,
                        view: this.view,
                        config: $rootScope.config,
                        baseGameClass: this.baseGameClass,
                        camAnim: this.startsWithCamAnim(),
                    });
                    scope.$watch("user.logged", function() {
                        $this.userChanged($rootScope.user);
                    });
                }
            },
            userChanged: function(user) {},
            isGameEnd: function() {
                var psm = PSMs[this.id];
                if (psm && psm.mGame && psm.mGame.mBoard && psm.mGame.mBoard.mFinished)
                    return true;
                return false;
            },
            start: function(callback) {
                var $this = this;
                function HandleModelView(data) {
                    var scripts = [];
                    var scriptLoading = false;
                    function ScriptLoaded() {
                        if (scripts.length > 0) {
                            var js = scripts.shift();
                            if (js.joclyInlineJs) {
                                document.getElementsByTagName('head')[0].appendChild(js.joclyInlineJs);
                                ScriptLoaded();
                            } else
                                document.getElementsByTagName('head')[0].appendChild(js);
                        } else
                            scriptLoading = false;
                    }
                    function LoadScript(script, tmp) {
                        //console.info("Load script",script);
                        var js = document.createElement("scr" + "ipt");
                        js.type = "text/javascript";
                        if (tmp)
                            js.setAttribute("jpz-playlet-tmp", "");
                        if (typeof script == "string") {
                            js.src = script;
                            js.onreadystatechange = js.onload = function(event) {
                                ScriptLoaded(js);
                            }
                            if (scriptLoading == false) {
                                scriptLoading = true;
                                document.getElementsByTagName('head')[0].appendChild(js);
                            } else
                                scripts.push(js);
                        } else if (typeof script == "object") {
                            js.appendChild(document.createTextNode(script.body));
                            scripts.push({
                                joclyInlineJs: js
                            });
                        }
                    }
                    function PreloadDone() {
                        if (--preloadCount == 0) {
                            for (var i = 0; i < files.length; i++)
                                LoadScript(files[i], true);
                        }
                    }
                    if (data.status) {
                        $this.model = $.extend(true, {}, data.model);
                        $this.view = $.extend(true, {}, data.view);
                        var jPath = $rootScope.config.baseURL + $rootScope.config.joclyPath;
                        var pzPath = $rootScope.config.baseURL + $rootScope.config.pzPath;
                        var files = [];
                        if (data.view.xdView) {
                            if ($rootScope.can3D() && typeof THREE == "undefined")
                                if ($rootScope.config.request.expand3d == 1) {
                                    LoadScript(jPath + "/xd-view/three.js", false);
                                    LoadScript(jPath + "/xd-view/SubdivisionModifier.js", false);
                                    //LoadScript(jPath+"/xd-view/tween.min.js",false); // loading tween.min.js does not define TWEEN ???!!!
                                    LoadScript(jPath + "/xd-view/tween.js", false);
                                    LoadScript(jPath + "/xd-view/tween.fix.js", false);
                                    //LoadScript(jPath+"/xd-view/JoclyTrackballControls.js",false);
                                    LoadScript(jPath + "/xd-view/JoclyOrbitControls.js", false);
                                    LoadScript(jPath + "/xd-view/threex.domevent.js", false);
                                    LoadScript(jPath + "/xd-view/threex.domevent.object3d.js", false);
                                    LoadScript(jPath + "/xd-view/helvetiker_regular.typeface.js", false);
                                } else
                                    LoadScript(jPath + "/xd-view/3d.min.js", false);
                            files.push(jPath + '/xd-view.js');
                        }
                        jpzGames.preloadGame();
                        if (typeof data.model.js == "string")
                            data.model.js = [data.model.js];
                        var customRes = $rootScope.predefResources[$this.gameName] || {};
                        for (var i = 0; i < data.model.js.length; i++) {
                            var model = data.model.js[i];
                            if (customRes[model])
                                files.push(customRes[model]);
                            else
                                files.push(data.model.fullPath + "/" + model);
                        }
                        if (typeof data.view.js == "string")
                            data.view.js = [data.view.js];
                        for (var i = 0; i < data.view.js.length; i++) {
                            var view = data.view.js[i];
                            if (customRes[view])
                                files.push(customRes[view]);
                            else
                                files.push(data.view.fullPath + "/" + view);
                        }

                        $(document).bind("alive.joclypz", function() {
                            $(document).unbind("alive.joclypz");
                            jpzGames.postloadGame();
                            $this.baseGameClass = GameBase;
                            $this.initFromGame();
                            $this.makeLevels();
                            $this.preStart();
                            $.extend(true, $this.features, $this.requestedFeatures);
                            callback();
                            $("head script[jpz-playlet-tmp]").remove();
                        })

                        files.push(pzPath + '/joclypz.alive.js');

                        // preload hosted scripts that will be inserted as inline
                        var preloadCount = 1;
                        for (var i = 0; i < files.length; i++) {
                            (function(index, file) {
                                if (typeof file == "function") {
                                    preloadCount++;
                                    file(function(body) {
                                        files[index] = {
                                            body: body,
                                        }
                                        PreloadDone();
                                    })
                                }
                            })(i, files[i]);
                        }
                        PreloadDone();
                    }
                }
                function RequireConfig() {
                    (function(r) {
                        r.requirejs.config({
                            baseUrl: '/jocly/plazza/' + $this.gameName,
                            waitSeconds: 20,
                        });
                    })(require_jocly);
                }

                var predef = $rootScope.predefModelViews[$this.gameName];
                if (predef) {
                    if (predef.defining)
                        predef.callbacks.push(HandleModelView);
                    else
                        HandleModelView(predef);
                } else {
                    var modelViewURL = $rootScope.config.baseURL + 'jocly/plazza/' + $this.gameName + '/model-view.js';
                    (function(r) {
                        r.requirejs.onError = function(err) {
                            console.error("requirejs error", err);
                            throw err;
                        }
                    })(require_jocly);

                    (function(r) {
                        //console.log("playlet calling getModelView "+modelViewURL);
                        r.requirejs([modelViewURL], HandleModelView);
                        /*
                        								r.requirejs([modelViewURL],function() {
                        									console.log("playlet called getModelView "+modelViewURL);
                        									HandleModelView.apply(this,arguments);
                        								});
                        								*/
                    })(require_jocly);
                }
            },
            preStart: function() {},
            restartGame: function() {
                this.sendEventPSM("E_RESTART", {});
            },
            backGame: function() {
                this.sendEventPSM("E_BACK", {});
            },
            switchPlayers: function() {
                this.sendEventPSM("E_SWITCH_PLAYERS", {});
            },
            switchView: function() {
                this.sendEventPSM("E_SWITCH_VIEW", {});
            },
            doClose: function(callback) {
                if (!$rootScope.playlets[this.id]) // prevent double-close
                return;
                this.sendEventPSM("E_CLOSE", {});
                delete $rootScope.playlets[this.id];
                delete PSMs[this.id];
                $rootScope.playletList.count--;
                this.onClose();
                if (callback)
                    callback();
                else {
                    /*
                    							if($rootScope.playletList.next)
                    								$rootScope.go('/playlet/'+$rootScope.playletList.next);
                    							else if($rootScope.playletList.previous)
                    								$rootScope.go('/playlet/'+$rootScope.playletList.previous);
                    							else
                    								$rootScope.go('/playlets');
                    							*/
                }
            },
            close: function(callback) {
                var $this = this;
                this.requestClose(function() {
                    $this.doClose(callback);
                });
            },
            notifyViewOptions: function() {
                this.sendEventPSM("E_VIEW_OPTS_CHANGED", {});
            },
            getGameHistory: function() {
                var psm = PSMs[this.id];
                if (!psm)
                    return null;
                var game = psm.mGame;
                if (!game)
                    return null;
                var board = game.mBoard;
                if (!board)
                    return null;
                var playedMoves = game.mFullPlayedMoves;
                if (!playedMoves)
                    return null;
                var pjnMoves = [];
                playedMoves.forEach(function(move) {
                    pjnMoves.push(move.ToString());
                });
                var now = new Date();
                var gameHistory = {
                    game: this.gameName,
                    mode: this.mode,
                    date: now.getTime(),
                    dateStr: now.toUTCString(),
                    length: playedMoves.length,
                    //moves: JSON.parse(JSON.stringify(playedMoves)),
                    moves: playedMoves,
                    pjnMoves: pjnMoves,
                    finished: board.mFinished,
                    winner: board.mWinner,
                    players: this.players,
                }
                return gameHistory;
            },
            shareGame: function(callback) {
                var gameHistory = this.getGameHistory();
                if (!gameHistory) {
                    callback("Cannot get game history");
                    return;
                }
                //console.log("shareGame",gameHistory);
                if ($rootScope.network.connected) {
                    $.ajax({
                        url: $rootScope.network.liveBaseURL + "/save-game",
                        data: {
                            gameHistory: JSON.stringify(gameHistory),
                        },
                        dataType: 'jsonp',
                        crossDomain: true,
                        success: function(data) {
                            console.log("save-game", data);
                            if (data.status) {
                                callback(null, {
                                    id: data.result.id,
                                    link: JoclyPlazza.config.cmsURL + "jocly/plazza/index.html#/live/" + data.result.id,
                                });
                            } else
                                callback(data.error);
                        },
                        error: function() {
                            callback("network or system error");
                        },
                        complete: function() {
                            if (!$rootScope.$$phase)
                                $rootScope.$apply();
                        },
                    });
                } else
                    callback("not connected");
            },
            shareGameLink: function() {
                jpzLayout.openDialog($rootScope, "/jocly/plazza/partial/show-share", {
                    link: JoclyPlazza.config.cmsURL + "jocly/plazza/index.html#/live/" + this.options.gameId,
                });
            },
            saveGame: function() {
                var psm = PSMs[this.id];
                if (psm && psm.mGame) {
                    var moves = [];
                    for (var i = 0; i < psm.mGame.mPlayedMoves.length; i++)
                        moves.push(psm.mGame.mPlayedMoves[i].Strip());
                    var data = {
                        playedMoves: moves,
                        game: this.gameName,
                    }
                    var now = new Date();
                    data['date'] = "" + now.getFullYear() + "-" + (now.getMonth() + 1) + "-" + now.getDate() + "-" + now.getHours() + "_" + now.getMinutes() + "_" + now.getSeconds();
                    if ($rootScope.network.connected) {
                        $(".jocly-temp").remove();
                        var form = document.createElement("form");
                        form.setAttribute("class", "jocly-temp");
                        form.setAttribute("style", "display: none;");
                        form.setAttribute("method", "post");
                        form.setAttribute("action", JoclyPlazza.config.cmsURL + "jocly/save-game");
                        var hiddenField = document.createElement("input");
                        hiddenField.setAttribute("type", "hidden");
                        hiddenField.setAttribute("name", "data");
                        hiddenField.setAttribute("value", JSON.stringify(data));
                        form.appendChild(hiddenField);
                        document.body.appendChild(form);
                        form.submit();
                    } else {
                        // note filename does not work for data URI
                        var fileName = data.game + "-" + data.date + ".joc";
                        var uriContent = "data:application/x-joc;filename=" + fileName + "," + encodeURIComponent(JSON.stringify(data));
                        window.open(uriContent, fileName);
                    }
                }
            },
            loadGame: function() {
                var psm = PSMs[this.id];
                if (psm && psm.mGame) {
                    var $this = this;
                    var input = $("<input/>").attr("type", "file").appendTo($("body").bind("change", function(event) {
                        input.remove();
                        var file = event.target.files[0];
                        var reader = new FileReader();
                        reader.onload = function(e) {
                            var gameData = null;
                            try {
                                gameData = JSON.parse(e.target.result);
                                if (typeof gameData.playedMoves == "undefined")
                                    gameData = null;
                            } catch (e) {}
                            if (!gameData)
                                $rootScope.alert({
                                    title: "file-error",
                                    text: "invalid-game-file"
                                });
                            else
                                psm.smQueueEvent("E_LOAD_GAME", gameData);
                        }
                        reader.readAsText(file);
                    }));
                    input.trigger("click");
                }
            },
            resizeTimer: null,
            scheduleResize: function(element) {
                var $this = this;
                function InitView() {
                    $this.resizeTimer = null;
                    $this.initView($(element[0]));
                }
                if (this.resizeTimer != null) {
                    $timeout.cancel(this.resizeTimer);
                }
                this.resizeTimer = $timeout(InitView, 100);
            },
            navPlayFromThere: function() {
                var psm = PSMs[this.id];
                if (psm && psm.mGame) {
                    $rootScope.playletAPI.createAndGoPlaylet({
                        gameName: this.gameName,
                        mode: "hvsc",
                        moves: psm.mGame.mPlayedMoves.slice(0, this.historyIndex + 1),
                        delay: 100,
                    });
                }
            },
            makeLevels: function() {
                this.levels = [{
                    label: $rootScope.t("random"),
                    maxDepth: - 1,
                }
                ];
                if (this.model.levels)
                    this.levels = this.levels.concat(this.model.levels);
                else
                    for (var i = 0; i <= (this.view.maxLevel || 9); i++)
                        this.levels.push({
                            label: $rootScope.t("level", {
                                '@level': i + 1
                            }),
                            potential: 100000,
                            maxDepth: i,
                            isDefault: (i === this.view.currentLevel),
                        })
                var defaultLevel = 1;
                for (var i = 0; i < this.levels.length; i++) {
                    this.levels[i].index = i;
                    if (this.levels[i].isDefault)
                        defaultLevel = i;
                }
                defaultLevel = jpzUtil.localLoad("joclyhub$" + this.gameName + "$lvl", defaultLevel);
                if (defaultLevel >= this.levels.length)
                    defaultLevel = this.levels.length - 1;
                this.defaultLevel = defaultLevel;
            },
            chatSend: function(chatText) {
                console.warn("chat text", "'" + chatText + "'", "not handled");
            },
            alert: function(message) {
                $rootScope.alert({
                    title: $rootScope.t("playlet-id", {
                        '@id': this.id
                    }),
                    text: message,
                });
            },
            canPlaySound: function() {
                return $rootScope.pref.device.enableSound;
            },
            changedPlayer: function() {
                this.sendEventPSM("E_CHANGED_PLAYER", {});
            },
            startsWithCamAnim: function() {
                return false;
            },
            pauseOnHidden: function() {
                return false;
            },
            getTitle: function() {
                return $rootScope.gamesMap[this.gameName].title;
            },
            getTitlePrefix: function() {
                return $rootScope.t('table-prefix', {
                    '@table': this.id
                }) + ' ';
            },
            getDescription: function() {
                return this.getTitle();
            },
            webrtcPeerDetails: function(peerDetails) {
                console.warn("Playlet.webrtcPeerDetails: WebRTC not supported in playlet mode", this.mode);
            },
            notifyEnd: function(result, reason) {
                if (!this.features.notifyEnd)
                    return;
                if (arguments.length < 2)
                    reason = null;
                else if (reason)
                    reason = $rootScope.t(reason);
                var message, activity, type;
                var gameTitle = $rootScope.gamesMap[this.gameName].title;
                switch (result) {
                case 'win':
                    message = $rootScope.t('you-win');
                    activity = this.getTitlePrefix() + $rootScope.t('you-win-at', {
                        '@game': gameTitle
                    });
                    type = 'success';
                    break;
                case 'lose':
                    message = $rootScope.t('you-lose');
                    activity = this.getTitlePrefix() + $rootScope.t('you-lose-at', {
                        '@game': gameTitle
                    });
                    type = 'warning';
                    break;
                default:
                    message = $rootScope.t('draw');
                    activity = this.getTitlePrefix() + $rootScope.t('draw-at', {
                        '@game': gameTitle
                    });
                    type = 'info';
                    break;
                }
                $rootScope.activity.add({
                    text: activity,
                    click: function() {
                        $rootScope.go('/playlet/' + self.id);
                    },
                });
                $rootScope.showGameEnd(message, result, reason, this.options.gameId, this.endOfGameCallbacks, this.endOfGameScope);
            },
            shouldDisplayCamButton: function() {
                return true;
            },
            toggleWebRTCLocal: function() {
                console.log("toggleWebRTCLocal");
                if (!this.webrtc) {
                    if (this.options.channel)
                        jpzWebRTC.setChannel(this.options.channel);
                    this.webrtc = true;
                    var mySide = 0;
                    if (this.players[1].uid == $rootScope.user.uid || this.players[1].type == "self")
                        mySide = 1;
                    else if (this.players[ - 1].uid == $rootScope.user.uid || this.players[ - 1].type == "self")
                        mySide =- 1;
                    if (mySide) {
                        jpzWebRTC.setSelfSide(mySide);
                        jpzWebRTC.startLocal();
                    } else {
                        $rootScope.alert({
                            title: $rootScope.t('error'),
                            text: $rootScope.t('webrtc-not-a-player'),
                        });
                        this.closeWebRTC();
                    }
                } else
                    this.closeWebRTC();
            },
            onClose: function() {
                this.closeWebRTC();
            },
            closeWebRTC: function() {
                jpzWebRTC.setChannel(null);
                this.webrtc = false;
            },
            clearPlayer: function(who) {
                if (this.players && this.players[who]) {
                    var player = this.players[who];
                    for (var f in player)
                        if (player.hasOwnProperty(f))
                            delete player[f];
                }
            },
            localMedia: function(data) {},
            hasLocalMedia: function(data) {
                return false;
            },
            cameraButtonClass: function() {
                return {
                    'btn-normal': true,
                }
            },
            canResign: function() {
                return false;
            },
            canOfferDraw: function() {
                return this.canResign();
            },
            goGamePage: function() {
                $rootScope.go("/game/" + this.gameName)
            }
        };

        function PlayletHVSC(gameName, options) {
            this.init(gameName, 'hvsc', options);
            if ($rootScope.ga)
                $rootScope.ga.track('playlet-hvsc', this.gameName);
        }
        PlayletHVSC.prototype = new Playlet();
        PlayletHVSC.prototype.preStart = function() {
            if ($rootScope.config.request.self == '1')
                $.extend(true, this.players, {
                    '1': {
                        type: 'self',
                    },
                    '-1': {
                        type: 'self',
                    },
                });
            else if (this.model.defaultHuman==-1)
                $.extend(true, this.players, {
                    '1': {
                        type: 'computer',
                        level: this.defaultLevel,
                    },
                    '-1': {
                        type: 'self',
                    },
                });
            else
                $.extend(true, this.players, {
                    '1': {
                        type: 'self',
                    },
                    '-1': {
                        type: 'computer',
                        level: this.defaultLevel,
                    },
                });
            $.extend(true, this.features, {
                useBack: true,
                useRestart: true,
                useSwitchPlayers: true,
                useSwitchView: this.view.switchable,
                canSwitchView: this.view.switchable,
                useSetLevels: true,
                useWebRTCLocal: $rootScope.pref.user.webRTCLocal != 'none',
            });
        }
        PlayletHVSC.prototype.navPlayFromThere = function() {
            this.features.nav.exitToCurrentIndex = true;
            this.features.hasNavigation = false;
        }
        PlayletHVSC.prototype.getTitle = function() {
            return this.getTitlePrefix() + $rootScope.t('playlet-playing-game', {
                '@game': $rootScope.gamesMap[this.gameName].title
            });
        }
        PlayletHVSC.prototype.getDescription = function() {
            var $this = this;
            var gameTitle = $rootScope.gamesMap[this.gameName].title;
            function ComputerName(which) {
                return $rootScope.t('computer-name', {
                    '@level': $this.levels[$this.players[which].level].label
                });
            }
            if (this.players[1].type == 'self' && this.players[ - 1].type == 'self')
                return $rootScope.t('playlet-descr-hvsc-self', {
                    '@game': gameTitle
                });
            if (this.players[1].type == 'computer' && this.players[ - 1].type == 'computer')
                return $rootScope.t('playlet-descr-hvsc-comp', {
                    '@game': gameTitle,
                    '@a': ComputerName(1),
                    '@b': ComputerName( - 1)
                });
            var compWhich = this.players[1].type == 'computer' ? 1: - 1;
            return $rootScope.t('playlet-descr-hvsc', {
                '@game': gameTitle,
                '@comp': ComputerName(compWhich)
            });
        }
        PlayletHVSC.prototype.shouldDisplayCamButton = function() {
            return $rootScope.canWebRTC();
        }

        function PlayletView(gameName, options) {
            //console.log("PlayletView",options)
            this.init(gameName, 'view', options);
            if ($rootScope.ga)
                $rootScope.ga.track('playlet-view', this.gameName);
        }
        PlayletView.prototype = new Playlet();
        PlayletView.prototype.preStart = function() {
            $.extend(true, this.players, {
                '1': $.extend({
                    type: 'player',
                }, this.options.playera),
                '-1': $.extend({
                    type: 'player',
                }, this.options.playerb),
            });
            $.extend(true, this.features, {
                useNavigation: true,
                hasNavigation: true,
                useSwitchView: this.view.switchable,
                canSwitchView: this.view.switchable,
                nav: {
                    useExit: false,
                },
                useTimer: false,
            });
        }
        PlayletView.prototype.getDescription = function() {
            return $rootScope.t('playlet-descr-view', {
                '@game': $rootScope.gamesMap[this.gameName].title,
                '@a': this.players[1].name,
                '@b': this.players[ - 1].name
            });
        }
        PlayletView.prototype.shouldDisplayCamButton = function() {
            return false;
        }

        /*
        				function PlayletDemo(gameName,options) {
        					this.init(gameName,'demo',options);
        					if($rootScope.ga)
        						$rootScope.ga.track('playlet-demo',this.gameName);
        				}
        				PlayletDemo.prototype=new Playlet();
        				PlayletDemo.prototype.preStart = function() {
        					if(this.model.demoRandom)
        						$.extend(true,this.players,{
        							'1': { type: 'computer', level: 0, },
        							'-1': {	type: 'computer', level: 0, },
        						});
        					else
        						$.extend(true,this.players,{
        							'1': { type: 'computer', level: 1, },
        							'-1': {	type: 'computer', level: 1, },
        						});
        					$.extend(true,this.features,{
        						toolbarMode: 'demo',
        						hasControls: false,
        						useControls: false,
        						useNavigation: false,
        						useLoadGame: false,
        						useSaveGame: false,
        						useRestart: true,
        						notifyEnd: false,
        					});
        				}
        				PlayletDemo.prototype.canPlaySound = function() {
        					return $rootScope.pref.device.enableSoundDemo;
        				}
        				PlayletDemo.prototype.startsWithCamAnim = function() {
        					return true;
        				}
        				PlayletDemo.prototype.pauseOnHidden = function() {
        					return true;
        				}
        				PlayletDemo.prototype.getTitle = function() {
        					return this.getTitlePrefix()+$rootScope.t('playlet-demo-game',{'@game':$rootScope.gamesMap[this.gameName].title});
        				}
        				PlayletDemo.prototype.getDescription = function() {
        					return $rootScope.t('playlet-descr-demo',{'@game':$rootScope.gamesMap[this.gameName].title});
        				}
        				*/

        function PlayletLiveBase(gameName, options) {}
        PlayletLiveBase.prototype = new Playlet();
        PlayletLiveBase.prototype.liveBaseInit = function() {
            this.chatMessages = [];
        }
        PlayletLiveBase.prototype.preStart = function() {
            $.extend(true, this.features, {
                useNavigation: false,
                useLoadGame: false,
                useSaveGame: true,
                useChat: true,
                canChat: true,
                useRestart: false,
                useBack: false,
            });
        }
        PlayletLiveBase.prototype.chatSend = function(chatText) {
            this.liveSend({
                type: "event",
                event: "E_CHAT_MSG",
                text: chatText,
            });
        }
        PlayletLiveBase.prototype.chatSeenSend = function() {
            this.liveSend({
                type: "event",
                event: "E_CHAT_SEEN",
            });
        }
        PlayletLiveBase.prototype.liveSend = function(message) {
            if (this.options.channel)
                this.options.channel.send(message);
            else
                console.warn("Live message not send because channel is closed", message);
        }
        PlayletLiveBase.prototype.liveReceive = function(message) {
            console.log("liveReceive", message);
            var pool = $rootScope.pools['runningGames'];
            if (pool) {
                var poolItem = pool[this.options.gameId];
                if (poolItem) {
                    if (message.who !== undefined)
                        poolItem.who = message.who;
                    if (message.timeout !== undefined)
                        poolItem.expire = Math.round(Date.now() / 1000 + message.timeout);
                }
            }
            if (message.type == "event") {
                if (message.event == "E_G_GAMENOTFOUND") {
                    $rootScope.alert({
                        title: $rootScope.t('error'),
                        text: $rootScope.t('live-game-not-connect'),
                    });
                    this.doClose();
                } else
                    this.sendEventPSM(message.event, message);
            } else if (message.type == "chat") {
                this.chatMessages.push({
                    text: message.text,
                    identity: message.from,
                });
                this.features.hasChat = true;
                $rootScope.$apply();
            } else if (message.type == "observer") {
                if (message.op == "add") {
                    for (var i = 0; i < message.observers.length; i++) {
                        var observer = message.observers[i];
                        this.folks.push($.extend(true, {}, observer.identity, {
                            oid: observer.id,
                        }));
                    }
                } else if (message.op == "remove") {
                    for (var i = 0; i < message.observers.length; i++) {
                        var oid = message.observers[i];
                        for (var j = 0; j < this.folks.length; j++) {
                            var folk = this.folks[j];
                            if (folk.oid == oid) {
                                this.folks.splice(j, 1);
                                break;
                            }
                        }
                    }

                }
                $rootScope.$apply();
            } else if (message.type == "webrtc") {
                jpzWebRTC.handlePeerMessage(message);
            }
        }

        /*
        				function PlayletLive(gameName,options) {
        					this.liveBaseInit();
        					this.folks=[$rootScope.user];
        					this.init(gameName,'live',options);
        					if($rootScope.ga)
        						$rootScope.ga.track('playlet-live',this.gameName);
        				}
        				PlayletLive.prototype=new PlayletLiveBase();
        				PlayletLive.prototype.getTitle = function() {
        					return this.getTitlePrefix()+$rootScope.t('playlet-live-game',{'@game':$rootScope.gamesMap[this.gameName].title});
        				}
        				PlayletLive.prototype.getDescription = function() {
        					var gameTitle=$rootScope.gamesMap[this.gameName].title;
        					if(this.players[1].type=='self' && this.players[-1].type=='self')
        						return $rootScope.t('playlet-descr-live-self',{'@game':gameTitle});
        					var peerWhich=this.players[1].type=='player'?1:-1;
        					return $rootScope.t('playlet-descr-live',{'@game':gameTitle,
        						'@peer':this.players[peerWhich].name});
        				}
        				PlayletLive.prototype.requestClose = function(callback) {
        					var $this=this;
        					var psm=PSMs[this.id];
        					if(psm && psm.mGame && psm.mGame.GetFinished()) {
        						callback();
        						this.options.channel.disconnect();
        					} else {
        						jpzLayout.openDialog($rootScope,"/jocly/plazza/partial/close-live",{
        							confirm: function() {
        								callback();
        								$this.options.channel.disconnect();
        							},
        						});
        					}
        				}
        				PlayletLive.prototype.webrtcPeerDetails = function(peerDetails) {
        					//console.log("Playlet.webrtcPeerDetails",peerDetails,this.options.channel);
        					if(jpzWebRTC.setChannel(this.options.channel)) {
        						if($rootScope.pref.user.webRTCUse!='none') {
        							this.webrtc=true;
        							jpzWebRTC.sendPeerDetails(peerDetails);
        						}
        					}
        				}
        				*/

        /*
        				function PlayletLiveObs(gameName,options) {
        					this.liveBaseInit();
        					this.folks=[];
        					this.init(gameName,'liveobs',options);
        					if($rootScope.ga)
        						$rootScope.ga.track('playlet-live',this.gameName);
        				}
        				PlayletLiveObs.prototype=new PlayletLiveBase();
        				PlayletLiveObs.prototype.getTitle = function() {
        					return this.getTitlePrefix()+$rootScope.t('playlet-liveobs-game',{'@game':$rootScope.gamesMap[this.gameName].title});
        				}
        				PlayletLiveObs.prototype.getDescription = function() {
        					var gameTitle=$rootScope.gamesMap[this.gameName].title;
        					var nameA=this.players[1].name;
        					var nameB=this.players[-1].name;
        					if(!nameA || !nameB)
        						return $rootScope.t('playlet-descr-liveobs-anon',{'@game':gameTitle});
        					else
        						return $rootScope.t('playlet-descr-liveobs',{'@game':gameTitle,
        							'@a':nameA,'@b':nameB});
        				}
        				*/


        function PlayletLiveTB(gameName, options) {
            this.chatMessages = [];
            this.folks = [$rootScope.user];
            this.init(gameName, 'livetb', options);
            if ($rootScope.ga)
                $rootScope.ga.track('playlet-livetb', this.gameName);
            this.reconnectUnwatch = null;
            this.unreadChat = false;
            this.chatFolks = {};
            this.remoteHasMedia = false;
        }
        PlayletLiveTB.prototype = new Playlet();
        PlayletLiveTB.prototype.onClose = function() {
            this.closeWebRTC();
            if (this.reconnectUnwatch) {
                this.reconnectUnwatch();
                this.reconnectUnwatch = null;
            }
        }
        PlayletLiveTB.prototype.setReconnectHandler = function(callback) {
            if (this.reconnectUnwatch)
                this.reconnectUnwatch();
            this.reconnectUnwatch = $rootScope.$watch("network.connected", function(newValue, oldValue) {
                if (newValue && !oldValue) {
                    $timeout(callback, 1000);
                }
            });
        }
        PlayletLiveTB.prototype.getTitle = function() {
            return this.getTitlePrefix() + $rootScope.t('playlet-livetb-game', {
                '@game': $rootScope.gamesMap[this.gameName].title
            });
        }
        PlayletLiveTB.prototype.getDescription = function() {
            var gameTitle = $rootScope.gamesMap[this.gameName].title;
            if (this.players[1].type == 'self' && this.players[ - 1].type == 'self')
                return $rootScope.t('playlet-descr-live-self', {
                    '@game': gameTitle
                });
            var peerWhich = this.players[1].type == 'player' ? 1: - 1;
            return $rootScope.t('playlet-descr-live', {
                '@game': gameTitle,
                '@peer': this.players[peerWhich].name
            });
        }
        PlayletLiveTB.prototype.requestClose = function(callback) {
            /*
            					var $this=this;
            					var psm=PSMs[this.id];
            					if(psm && psm.mGame && psm.mGame.GetFinished()) {
            						callback();
            						this.options.channel.disconnect();
            					} else {
            						jpzLayout.openDialog($rootScope,"/jocly/plazza/partial/close-live",{
            							confirm: function() {
            								callback();
            								$this.options.channel.disconnect();
            							},
            						});
            					}
            					*/
            callback();
            this.options.channel.disconnect();
        }
        PlayletLiveTB.prototype.webrtcPeerDetails = function(peerDetails) {
            //console.log("Playlet.webrtcPeerDetails",peerDetails,this.options.channel);
            if (jpzWebRTC.setChannel(this.options.channel)) {
                if ($rootScope.pref.user.webRTCUse != 'none') {
                    this.webrtc = true;
                    jpzWebRTC.sendPeerDetails(peerDetails);
                }
            }
        }
        PlayletLiveTB.prototype.preStart = function() {
            $.extend(true, this.features, {
                useNavigation: true,
                hasNavigation: this.options.liveGameStatus == 'played' || this.options.liveGameStatus == 'saved',
                useLoadGame: false,
                useSaveGame: true,
                useChat: true,
                canChat: true,
            });
        }
        PlayletLiveTB.prototype.chatSend = function(chatText) {
            this.liveSend({
                type: "event",
                event: "E_CHAT_MSG",
                text: chatText,
            });
        }
        PlayletLiveTB.prototype.chatSeenSend = function() {
            this.liveSend({
                type: "event",
                event: "E_CHAT_SEEN",
            });
        }
        PlayletLiveTB.prototype.liveSend = function(message) {
            this.options.channel.send(message);
        }
        PlayletLiveTB.prototype.notifyDisconnect = function() {
            this.sendEventPSM("E_DISCONNECT", {});
        }
        PlayletLiveTB.prototype.notifyReconnect = function() {
            this.sendEventPSM("E_RECONNECT", {});
        }
        PlayletLiveTB.prototype.localMedia = function(data) {
            this.liveSend({
                type: "event",
                event: "E_LOCAL_MEDIA",
                on: data.on,
                browser: data.browser,
            });
        }
        PlayletLiveTB.prototype.hasLocalMedia = function() {
            return !!jpzWebRTC.localStream;
        }
        PlayletLiveTB.prototype.liveReceive = function(message) {
            var pool = $rootScope.pools['runningGames'];
            if (pool) {
                var poolItem = pool[this.options.gameId];
                if (poolItem) {
                    if (message.who !== undefined)
                        poolItem.who = message.who;
                    if (message.timeout !== undefined)
                        poolItem.expire = Math.round(Date.now() / 1000 + message.timeout);
                }
            }
            if (message.type == "event") {
                if (message.event == "E_LOAD_GAME") {
                    this.clearPlayer(1);
                    this.clearPlayer( - 1);
                    $.extend(true, this.players, {
                        "1": message.playerA,
                        "-1": message.playerB,
                    });
                    ['1', '-1'].forEach(function(who) {
                        var player = this.players[who];
                        if (player.uid && player.uid == $rootScope.user.uid) {
                            $.extend(true, player, $rootScope.user, {
                                type: 'self',
                            });
                        }
                    }, this);
                    this.unreadChat = false;
                    this.chatMessages.splice(this.chatMessages.length);
                    if (message.messages !== undefined) {
                        var $this = this;
                        message.messages.forEach(function(chatMessage) {
                            $this.chatMessages.push(chatMessage);
                        });
                        if (message.messages.length > 0 && message.seen) {
                            var seen = message.seen[$rootScope.user.uid];
                            if (seen === undefined || seen < message.messages[message.messages.length - 1].when) {
                                this.unreadChat = true;
                            }
                        }
                    }
                    if (message.folks) {
                        for (var uid in this.chatFolks)
                            delete this.chatFolks[uid]
                        for (var uid in message.folks) {
                            //if(uid==$rootScope.user.uid)
                            //	continue;
                            this.chatFolks[uid] = message.folks[uid];
                        }
                    }
                }
                if (message.event == "E_GAME_LOAD_FAILED") {
                    $rootScope.alert({
                        title: $rootScope.t('error'),
                        text: $rootScope.t('live-game-not-connect'),
                    });
                    this.doClose();
                } else
                    this.sendEventPSM(message.event, message);
            } else if (message.type == "addfolk") {
                this.chatFolks[message.user.uid] = message.user;
                if (!$rootScope.$$phase)
                    $rootScope.$apply('chatFolks');
            } else if (message.type == "delfolk") {
                delete this.chatFolks[message.userId];
                if (!$rootScope.$$phase)
                    $rootScope.$apply('chatFolks');
            } else if (message.type == "chat") {
                this.chatMessages.push({
                    text: message.text,
                    from: message.from,
                    when: message.when,
                });
                //this.features.hasChat=true;
                if (!this.features.hasChat)
                    this.unreadChat = true;
                else
                    this.chatSeenSend();
                $rootScope.$apply();
            } else if (message.type == "observer") {
                if (message.op == "add") {
                    for (var i = 0; i < message.observers.length; i++) {
                        var observer = message.observers[i];
                        this.folks.push($.extend(true, {}, observer.identity, {
                            oid: observer.id,
                        }));
                    }
                } else if (message.op == "remove") {
                    for (var i = 0; i < message.observers.length; i++) {
                        var oid = message.observers[i];
                        for (var j = 0; j < this.folks.length; j++) {
                            var folk = this.folks[j];
                            if (folk.oid == oid) {
                                this.folks.splice(j, 1);
                                break;
                            }
                        }
                    }

                }
                $rootScope.$apply();
            } else if (message.type == "webrtc") {
                jpzWebRTC.handlePeerMessage(message);
            } else if (message.type == "remote-media") {
                this.remoteHasMedia = message.on;
                if (!$rootScope.$$phase)
                    $rootScope.$apply('remoteHasMedia');
            }
        }
        PlayletLiveTB.prototype.cameraButtonClass = function() {
            var camClass = 'btn-default';
            if (jpzWebRTC.localStream) {
                if (jpzWebRTC.remoteStream)
                    camClass = 'btn-danger';
                else
                    camClass = 'btn-warning';
            } else if (this.remoteHasMedia)
                camClass = 'btn-success';
            var classes = {};
            classes[camClass] = true;
            return classes;
        }
        PlayletLiveTB.prototype.canResign = function() {
            if (!this.options.channel)
                return false;
            var table = $rootScope.pools['runningGames'][this.options.gameId];
            if (table && table.status == 'playing' &&
            ($rootScope.user.uid == table.playerA.uid || $rootScope.user.uid == table.playerB.uid))
                return true;
            return false;
        }
        PlayletLiveTB.prototype.resign = function() {
            var $this = this;
            jpzLayout.confirm({
                title: $rootScope.t('confirmation-requested'),
                text: $rootScope.t('about-to-resign'),
                confirm: function() {
                    $this.liveSend({
                        type: "event",
                        event: "E_RESIGN",
                    });
                }
            });
        }
        PlayletLiveTB.prototype.offerDraw = function() {
            var $this = this;
            jpzLayout.confirm({
                title: $rootScope.t('confirmation-requested'),
                text: $rootScope.t('about-to-offer-draw'),
                confirm: function() {
                    $this.liveSend({
                        type: "event",
                        event: "E_OFFER_DRAW",
                    });
                }
            });
        }
        PlayletLiveTB.prototype.drawOfferDialog = function() {
            var $this = this;
            function OfferAnswer(response) {
                $this.liveSend({
                    type: "event",
                    event: "E_ANSWER_DRAW",
                    response: response,
                });

            }
            jpzLayout.openDialog($rootScope, "/jocly/plazza/partial/draw-offer", {
                accept: function() {
                    OfferAnswer("accept");
                },
                deny: function() {
                    OfferAnswer("deny");
                },
                alwaysDeny: function() {
                    OfferAnswer("always-deny");
                },
            });
        }
        PlayletLiveTB.prototype.shouldDisplayCamButton = function() {
            if (!$rootScope.canWebRTC())
                return false;
            return this.players[1].uid == $rootScope.user.uid || this.players[ - 1].uid == $rootScope.user.uid ;
        }
        PlayletLiveTB.prototype.userChanged = function(user) {
            if (this.options.channel) {
                this.sendEventPSM("E_USER_CHANGED", {});
            }
        }
        PlayletLiveTB.prototype.shareGame = function(callback) {
            if (this.options.gameId)
                callback(null, {
                    id: this.options.gameId,
                    link: JoclyPlazza.config.cmsURL + "jocly/plazza/index.html#/live/" + this.options.gameId,
                });
            else
                callback("no game id defined");
        }

        function PlayletEmpty(gameName, options) {
            this.init(gameName, 'empty', options);
            if ($rootScope.ga)
                $rootScope.ga.track('playlet-empty', this.gameName);
        }
        PlayletEmpty.prototype = new Playlet();
        PlayletEmpty.prototype.preStart = function() {
            $.extend(true, this.features, {
                hasToolbar: false,
                hasControls: false,
                useControls: false,
                useNavigation: false,
                useLoadGame: false,
                useSaveGame: false,
                useRestart: false,
                notifyEnd: false,
            });
        }
        PlayletEmpty.prototype.canPlaySound = function() {
            return false;
        }
        PlayletEmpty.prototype.getTitle = function() {
            return this.getTitlePrefix() + $rootScope.t('playlet-empty-game', {
                '@game': $rootScope.gamesMap[this.gameName].title
            });
        }
        PlayletEmpty.prototype.getDescription = function() {
            return $rootScope.t('playlet-descr-empty', {
                '@game': $rootScope.gamesMap[this.gameName].title
            });
        }


        self.playlets = {};
        $rootScope.playlets = self.playlets;
        $rootScope.playletList = {
            count: 0,
            current: null,
            previous: 0,
            next: 0,
        }
        $rootScope.playletAPI = {
            createPlaylet: function(options, callback) {
                function PlayletReady(playlet) {
                    $rootScope.playlets[playlet.id] = playlet;
                    $rootScope.playletList.count++;
                    playlet.start(function() {
                        callback(playlet);
                    });
                }
                function GoTurnbased(data) {
                    var gameData = $.extend(true, {}, options, data, {
                        moves: data.gamedata.moves,
                        playera: data.playera,
                        playerb: data.playerb,
                        turnbasedFinished: parseInt(data.finished),
                        turnbasedChat: data.chat,
                        turnbasedTimeout: parseInt(data.timeout),
                    });
                    playlet = new PlayletTurnbased(gameData.game, gameData);
                    PlayletReady(playlet);
                }
                function GoView(data) {
                    var gameData = $.extend(true, {}, options, data);
                    playlet = new PlayletView(gameData.game, gameData);
                    PlayletReady(playlet);
                }
                var playlet = null;
                switch (options.mode) {
                case "hvsc":
                    playlet = new PlayletHVSC(options.gameName, options);
                    PlayletReady(playlet);
                    break;
                case "view":
                    if (options.viewData) {
                        var data = options.viewData;
                        delete options.viewData;
                        GoView(data);
                    } else
                        $.ajax({
                            url: (options.baseURL || $rootScope.network.connData.baseURL) + "get-archived-game/" + options.gameId,
                            success: function(data) {
                                if (data.status) {
                                    GoView(data.result);
                                } else {
                                    console.warn("view failed:", data.error);
                                    callback(null);
                                }
                                $rootScope.$apply();
                            },
                            error: function() {
                                callback(null);
                                $rootScope.$apply();
                            }
                        });
                    break;
                case "demo":
                    playlet = new PlayletDemo(options.gameName, options);
                    PlayletReady(playlet);
                    break;
                case "empty":
                    playlet = new PlayletEmpty(options.gameName, options);
                    PlayletReady(playlet);
                    break;
                case "live":
                    playlet = new PlayletLive(options.gameName, options);
                    var gameChannel = jpzNet.createChannel({
                        clientType: "gaming",
                        initData: {
                            gameId: options.gameId,
                        },
                        onConnect: function() {
                            options.channel = gameChannel;
                        },
                        onDisconnect: function() {},
                        onReceive: function(message) {
                            playlet.liveReceive(message);
                        },
                    });
                    PlayletReady(playlet);
                    break;
                case "liveobs":
                    var gameChannel = jpzNet.createChannel({
                        clientType: "gaming-obs",
                        initData: {
                            gameId: options.gameId,
                        },
                        onConnect: function() {
                            options.channel = gameChannel;
                            playlet = new PlayletLiveObs(options.gameName, options);
                            PlayletReady(playlet);
                        },
                        onDisconnect: function() {},
                        onReceive: function(message) {
                            playlet.liveReceive(message);
                        },
                    });
                    break;
                case "livetb":
                    var CreateGameChannel = function() {
                        var gameChannel = jpzNet.createChannel({
                            clientType: "live",
                            initData: {
                                gameId: options.gameId,
                            },
                            onConnect: function() {
                                if (playlet)
                                    playlet.options.channel = gameChannel;
                                else
                                    options.channel = gameChannel;
                            },
                            onDisconnect: function() {
                                if (playlet) {
                                    playlet.options.channel = null;
                                    playlet.notifyDisconnect();
                                }
                            },
                            onReceive: function(message) {
                                console.log("livetb receives", message, !!playlet);
                                if (message.type == 'event') {
                                    switch (message.event) {
                                    case 'E_LOAD_FAIL':
                                        $rootScope.alert({
                                            title: $rootScope.t('liveserver.cannot-load-table'),
                                            text: $rootScope.t(message.error),
                                        });
                                        gameChannel.disconnect();
                                        $rootScope.back();
                                        return;
                                    case 'E_TABLE_GAME':
                                        if (!playlet) {
                                            if (!$rootScope.gamesMap[message.game])
                                                $rootScope.go("/unsupported/" + message.game + "/" + options.gameId);
                                            else {
                                                options.playerA = message.playerA;
                                                options.playerB = message.playerB;
                                                options.liveGameStatus = message.status;
                                                playlet = new PlayletLiveTB(message.game, options);
                                                playlet.setReconnectHandler(function() {
                                                    CreateGameChannel();
                                                });
                                                PlayletReady(playlet);
                                            }
                                        } else
                                            playlet.notifyReconnect();
                                        return;
                                    }
                                } else if (message.type == 'alert') {
                                    $rootScope.alert({
                                        title: $rootScope.t(message.title, message.titleArgs || {}),
                                        text: $rootScope.t(message.text, message.textArgs || {}),
                                    });
                                    return;
                                }
                                if (playlet) {
                                    playlet.liveReceive(message);
                                } else {
                                    console.log("lost message", message)
                                }
                            },
                        });
                        return gameChannel;
                    }
                    if ($rootScope.network.connected)
                        CreateGameChannel();
                    else {
                        var unwatch = $rootScope.$watch('network.connected', function(connected) {
                            if (connected) {
                                unwatch();
                                CreateGameChannel();
                            }
                        });
                    }
                    break;
                case "turnbased":
                    if (options.turnbasedData) {
                        var data = options.turnbasedData;
                        delete options.turnbasedData;
                        GoTurnbased(data);
                    } else
                        $.ajax({
                            url: $rootScope.network.connData.baseURL + "plazza/turnbased/game/" + options.gameId,
                            success: function(data) {
                                if (data.status) {
                                    GoTurnbased(data.result);
                                } else
                                    callback(null);
                                    $rootScope.$apply();
                                },
                                error: function() {
                                    callback(null);
                                    $rootScope.$apply();
                                }
                            });
                    break;
                default:
                    playlet = new Playlet();
                    playlet.init(options.gameName, options.mode);
                }
            },
            createAndGoPlaylet: function(options) {
                $rootScope.go('/loading', true);
                $rootScope.playletAPI.createPlaylet(options, function(playlet) {
                    function GoToPlaylet() {
                        if (playlet)
                            $rootScope.go('/playlet/' + playlet.id, true);
                        else {
                            jpzLayout.alert({
                                title: $rootScope.t('game-creation-error'),
                                text: $rootScope.t('game-could-not-create'),
                            });
                            if (options.errorBack)
                                $rootScope.go(options.errorBack);
                            else if (options.errorBackSteps !== undefined)
                                $rootScope.back(options.errorBackSteps);
                            else
                                $rootScope.back();
                        }
                    }
                    if (options.delay === undefined)
                        GoToPlaylet();
                    else
                        $timeout(GoToPlaylet, options.delay);
                });
            },
            setCurrent: function(playletId) {
                if (playletId) {
                    $rootScope.playletList.previous = 0;
                    $rootScope.playletList.next = 0;
                    for (var id in $rootScope.playlets) {
                        if (id < playletId && ($rootScope.playletList.previous == 0 || id > $rootScope.playletList.previous))
                            $rootScope.playletList.previous = id;
                        if (id > playletId && ($rootScope.playletList.next == 0 || id < $rootScope.playletList.next))
                            $rootScope.playletList.next = id;
                    }
                    $rootScope.playletList.current = playletId;
                } else {
                    $rootScope.playletList.current = null;
                    $rootScope.playletList.previous = 0;
                    $rootScope.playletList.next = 0;
                }
            },
            closeCurrent: function() {
                var playlet = $rootScope.playlets[$rootScope.playletList.current];
                if (playlet)
                    playlet.close();
            },
            handleEventMessage: function(message) {
                // if message has gid field, assuming turnbased message
                if (message.gid) {
                    var pool = $rootScope.pools['playingTurnBased'];
                    if (pool) {
                        var poolItem = pool[message.gid];
                        if (poolItem) {
                            poolItem.movecount = parseInt(message.movecount) + 1;
                            poolItem.expire = Math.floor(Date.now() / 1000) + parseInt(message.timeout);
                            if (message.event == "E_TURNBASED_MOVE")
                                poolItem.who =- parseInt(message.who);
                        }
                    }
                    for (var id in $rootScope.playlets) {
                        var playlet = $rootScope.playlets[id];
                        if (playlet.mode == "turnbased" && playlet.options.gameId == message.gid)
                            playlet.handleMessage(message);
                    }
                    if (message.event == "E_TURNBASED_MOVE") {
                        if (message.player.uid != $rootScope.user.userId && $rootScope.gamesMap[message.game])
                            $rootScope.activity.add({
                                text: $rootScope.t('act-turnbased-played', {
                                    '@user': message.player.name,
                                    '@game': $rootScope.gamesMap[message.game].title
                                }),
                                click: 'goTurnbased("' + message.gid + '")',
                                show: true,
                            });
                    }
                }
            },
            getCurrentPlaylet: function() {
                var playlet = $rootScope.playlets[$rootScope.playletList.current];
                return playlet || null;
            },
            getCurrentGame: function() {
                var playlet = this.getCurrentPlaylet();
                if (playlet) {
                    var psm = PSMs[playlet.id];
                    if (psm && psm.mGame)
                        return psm.mGame;
                }
                return null;
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').controller('jpzPlayletCtrl', [ '$scope', '$routeParams', '$location', '$rootScope', '$timeout',
    '$document', '$compile',
    'JoclyPlazza.playlet', 'JoclyPlazza.util', 'JoclyPlazza.layout',
    function($scope, $routeParams, $location, $rootScope, $timeout,
    $document, $compile,
    jpzPlaylet, jpzUtil, jpzLayout) {
        $scope.playlet = jpzPlaylet.playlets[$routeParams.playletId];
        if ($scope.playlet === undefined) {
            //console.warn("Playlet",$routeParams.playletId,"not found");
            $location.path('/');
            return;
        }

        $scope.$watch("playlet.players", function(players) {
            console.error("### Players", players);
        }, true);

        $scope.playlet.useScope($scope);
        $scope.$on('$destroy', function() {
            $scope.playlet.leave();
            $rootScope.playletAPI.setCurrent(null);
            $scope.$emit("playlet-status", {
                status: 'leaving',
            });
        });
        var initialViewOptions = true;

        $scope.$watch(function() {
            if ($scope.playlet) {
                var players = $scope.playlet.players;
                return "" + players[1].type + "_" + players[1].level + "_" + players[ - 1].type + "_" + players[ - 1].level;
            } else
                return null;
        }, function(players) {
            if (players)
                $scope.sendEmbed({
                    type: "players",
                    players: $scope.playlet.players,
                    levels: $scope.playlet.levels,
                });
        }, true);

        $scope.$watch('playlet.viewOptions', function(viewOptions) {
            if (initialViewOptions)
                initialViewOptions = false;
            else {
                $scope.playlet.notifyViewOptions();
                jpzUtil.localSave("joclyhub$" + $scope.playlet.gameName + "$vo$" + $scope.playlet.mode, $scope.playlet.viewOptions);
            }
        }, true);

        $scope.$watch('playlet.historyIndex', function() {
            $timeout(function() {
                $scope.historyMakeVisible($scope.playlet.historyIndex);
            }, 100);
        });

        $scope.$watch('playlet.features.hasToolbar', function(toolbar, oToolbar) {
            $scope.layout.showToolbar=!!toolbar;
            $scope.$parent.$broadcast("jfxResize", {});
        });

        $scope.historySelect = function(index) {
            if ($scope.playlet.features.hasNavigation)
                $scope.playlet.sendEventPSM("E_NAV_GOTO", {
                    index: index
                });
            else {
                $scope.playlet.historyIndex = index;
                $scope.playlet.features.hasNavigation = true;
            }
        }

        $scope.historyMakeVisible = function(index) {
            var history = $(".jpz-playlet-history ul");
            var histHeight = history.height() + parseInt(history.css("padding-top")) + parseInt(history.css("padding-bottom"));
            var item = history.find("li:nth-child(" + (index + 1) + ")");
            if (item.length == 0)
                return;
            var itemPos = item.position();
            var histScroll = history.scrollTop();
            if (itemPos.top < 0)
                histScroll = histScroll + itemPos.top;
            else if (itemPos.top + item.height() > histHeight)
                histScroll = Math.max(histScroll + itemPos.top - histHeight + item.height(), 0);
            if (histScroll != history.scrollTop())
                history.animate({
                    scrollTop: histScroll,
                }, 400);
        }

        $scope.$watch('playlet.features.hasNavigation', function(current, old) {
            if (old != current) {
                if ($scope.playlet.features.hasNavigation)
                    $scope.playlet.sendEventPSM("E_NAV_IN", {});
                else {
                    var args = {};
                    if ($scope.playlet.features.nav.exitToCurrentIndex) {
                        args.toCurrentIndex = true;
                        $scope.playlet.features.nav.exitToCurrentIndex = false;
                    }
                    $scope.playlet.sendEventPSM("E_NAV_OUT", args);
                }
            }
        });

        $scope.navSendCommand = function(navCmd) {
            $scope.playlet.sendEventPSM("E_V_" + navCmd, {});
        }

        $scope.showRules = function() {
            jpzLayout.openDialog($scope, "/jocly/plazza/partial/rules", {
                classes: ['jpz-rules'],
                attrs: {
                    "jpz-rules-dialog": true,
                }
            });
        }

        $scope.closeAndPlayComputer = function() {
            $scope.playlet.close(function() {
                $rootScope.playletAPI.createAndGoPlaylet({
                    gameName: $scope.playlet.gameName,
                    mode: "hvsc",
                    delay: 100,
                });
            });
        }

        $scope.closeAndPlayLive = function() {
            $scope.playlet.close(function() {
                $scope.go("/new-live-game/" + $scope.playlet.gameName);
            });
        }

        $scope.openViewOptions = function() {
            jpzLayout.openDialog($scope, "/jocly/plazza/partial/playlet-view-options");
        }

        $scope.playletChatSend = function(chatText) {
            $scope.playlet.chatSend(chatText);
        }

        $scope.playerStates = function(player) {
            return {
                'jpz-playlet-player-playing' : player.state == 'playing',
                'jpz-playlet-player-winner' : player.state == 'winner',
                'jpz-playlet-player-loser' : player.state == 'loser',
                'jpz-playlet-player-playing-nav' : player.state == 'playing-nav',
            }
        }

        $scope.getTitle = function() {
            return $scope.playlet.getTitle();
        }
        $scope.getPageId = function() {
            return 'jocly-playlet';
        }

        $scope.progress = function() {
            //debugger;
            console.warn("wrong progress called");
            var progress = Math.max($scope.playlet.players[1].progress || 0, $scope.playlet.players[ - 1].progress || 0);
            return progress;
        }

        $scope.updateProgressBar = function(percent) {
            $(".pzite-progress-bar").each(function() {
                angular.element(this).isolateScope().update(percent);
            });
        }

        $scope.timerUpdate = function(selector, options) {
            $(selector).each(function() {
                angular.element(this).isolateScope().update(options);
            });
        }
        /*
        		$scope.startRemainingTimerCountDown = function(who,time) {
        			$(".pzite-progress-"+who).each(function() {
        				angular.element(this).isolateScope().update(time);
        			});
        		}

        		$scope.hideRemainingTimers = function() {
        			$(".pzite-progress-1,.pzite-progress--1").hide();
        		}

        		$scope.showRemainingTimer = function(who,time) {
        			$(".pzite-progress-"+who).show();
        		}
        		*/

        $scope.startWebRTC = function() {
            var playingAs = null;
            if ($scope.playlet.players[1].uid == $scope.user.uid)
                playingAs = 'a';
            else if ($scope.playlet.players[ - 1].uid == $scope.user.uid)
                playingAs = 'b';
            if (playingAs)
                $scope.playlet.webrtcPeerDetails({
                    playingAs: playingAs,
                });
        }

        $scope.$emit("playlet-status", {
            status: 'entering',
        });

    }
    ]);

    angular.module('JoclyPlazza').controller('jpzPlayletsCtrl', [ '$scope', '$location', '$rootScope', 'JoclyPlazza.playlet',
    function($scope, $location, $rootScope, jpzPlaylet) {
        if ($rootScope.playletList.count == 0) {
            $location.path('/');
        } else if ($rootScope.playletList.count == 1) {
            for (var playletId in $rootScope.playlets)
                break;
            $location.path('/playlet/' + $rootScope.playlets[playletId].id);
        }
    }
    ]);

    angular.module('JoclyPlazza').directive('jpzPlaylet', ['$timeout', function factory($timeout) {
        return {
            priority: 40,
            link: function(scope, element, attrs) {
                if (scope.playlet) {
                    $(".jpz-playlet-menu").dropdown();
                    scope.playletAPI.setCurrent(scope.playlet.id);
                    scope.playlet.enter(element);
                }
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('jpzPlayletBoard',
    ['$timeout', 'JoclyPlazza.layout',
    function factory($timeout, jpzLayout) {
        return {
            scope: true,
            link: function(scope, element, attrs) {
                element.addClass("jpz-playlet-board");
                scope.scheduleResize = function() {
                    if (scope.playlet) {
                        scope.playlet.scheduleResize(element);
                    } else {
                        //console.warn("jpzPlayletBoard: no playlet")
                    }
                }
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('jpzPlayletPlayer',
    ['$window', 'JoclyPlazza.util', function factory($window, jpzUtil) {
        return {
            //replace: true,
            priority: 40,
            templateUrl : '/jocly/plazza/partial/playlet-player',
            scope: true,
            link: function(scope, element, attrs) {
                function FormatTime(timerMs) {
                    if (timerMs < 0)
                        timerMs = 0;
                    var timing = Math.round(timerMs / 1000);
                    var days = Math.floor(timing / (24 * 3600));
                    timing = timing%(24 * 3600);
                    var hours = Math.floor(timing / 3600);
                    var minutes = Math.floor((timing%3600) / 60);
                    var seconds = timing%60;
                    var timeText = "" + hours + ":" + (minutes < 10 ? '0' : '') + minutes + ":" + (seconds < 10 ? '0' : '') + seconds;
                    if (days > 0)
                        timeText = "" + days + "d" + timeText;
                    return timeText;
                }
                scope.which = attrs.jpzPlayletPlayer;
                scope.who = scope.which == "A" ? 1 : - 1;
                scope.player = scope.playlet.players[scope.who];
                if (scope.playlet.features.useSetLevels) {
                    $(element).click(function() {
                        var tooltip = $(element).find(".jpz-playlet-player-levels");
                        var pos = $(element).offset();
                        tooltip.css({
                            top: pos.top - tooltip.height(),
                            left: Math.max(0, Math.min(
                            pos.left + ($(element).width() - tooltip.width()) / 2,
                            $("body").width() - tooltip.width())),
                        }).toggle(400);
                    });
                    scope.setComputerLevel = function(level) {
                        $.extend(scope.playlet.players[scope.who], {
                            level: level.index,
                            type: 'computer',
                            name: null,
                            picture: null,
                        });
                        jpzUtil.localSave("joclyhub$" + scope.playlet.gameName + "$lvl", level.index);
                        scope.playlet.changedPlayer();
                    };
                    scope.setSelfLevel = function() {
                        $.extend(scope.playlet.players[scope.who], {
                            type: 'self',
                        });
                    };
                }
                var timer = $window.setInterval(function() {
                    scope.$apply('player.timer', function(timer) {
                        if (timer === null || timer === undefined)
                            scope.player.timerText = null;
                        else
                            scope.player.timerText = FormatTime(timer);
                    });
                }, 1000);
                scope.$on('$destroy', function() {
                    $window.clearInterval(timer);
                });
                element.addClass("jpz-playlet-player-cont");
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').controller('jpzPlayletDemoCtrl',
    [ '$scope', '$routeParams', function($scope, $routeParams) {

        var gameName = $routeParams.gameName;
        $scope.playletAPI.createAndGoPlaylet({
            gameName: gameName,
            mode: "demo",
            delay: 100,
        });


    }
    ]);

    angular.module('JoclyPlazza').controller('jpzPlayletPlayCtrl',
    [ '$scope', '$routeParams', function($scope, $routeParams) {

        if (!($routeParams.gameName in $scope.gamesMap)) {
            $scope.go("/unsupported/" + $routeParams.gameName + "/play/" + $routeParams.gameName);
            return;
        }

        var gameName = $routeParams.gameName;
        $scope.playletAPI.createAndGoPlaylet({
            gameName: gameName,
            mode: "hvsc",
            delay: 100,
        });
    }
    ]);

    angular.module('JoclyPlazza').controller('jpzGameDevCtrl',
    [ '$scope', '$routeParams', '$controller', function($scope, $routeParams, $controller) {

        var gameName = $routeParams.gameName;

        if (!$scope.gamesMap[gameName]) {
            $scope.alert({
                title: $scope.t('error'),
                text: $scope.t('game-does-not-exist')
            });
            return;
        }

        $scope.playletAPI.createPlaylet({
            gameName: gameName,
            mode: "hvsc",
        }, function(playlet) {
            playlet.loadCSS();
            $routeParams.playletId = playlet.id;
            $controller('jpzPlayletCtrl', {
                $scope: $scope
            });
        });

        $scope.getTitle = function() {
            return $scope.gamesMap[gameName].title;
        }

    }
    ]);


})();;
(function($) {

    'use strict';

    angular.module('JoclyPlazza').service('JoclyPlazza.pref',
    [ '$rootScope', 'JoclyPlazza.util', 'JoclyPlazza.layout',
    function($rootScope, jpzUtil, jpzLayout) {

        var self = this;

        var defPref = {
            device: {
                playletControls: true,
                playletHistory: false,
                allow3d: "auto",
                logPSM: false,
                logHTSM: false,
                enableSound: true,
                enableSoundDemo: false,
                showScopeApplies: false,
                show3DStats: false,
                lastPlayed: [],
                havePrefDebugTab: false,
                lockScreen: true,
                vibrateOnSelfTurn: true,
                bigButtons: "auto",
                settingsTab: "prefs",
            },
            user: {
                gamesFav: {},
                gamesSet: 'popular',
                openTablesSet: 'all',
                navPos: - 80,
                historyPos: 80,
                openTablesTab: 'all',
                invitationsTab: 'all',
                gamesPlayedByTab: "any",
                // "any" or "self"
                maxChatMessages: 50,
                liveTiming: "pmmedium",
                turnbasedDays: 3,
                globalChatVisible: false,
                activityVisible: false,
                maxActivityMessages: 50,
                webRTCUse: "reciprocal",
                // "reciprocal", "none", "send", "receive"
                webRTCLocal: "none",
                // "none", "self" or "both"
            },
        }

        self.openPref = function() {
            jpzLayout.openDialog($rootScope, '/jocly/plazza/partial/pref', {
                attrs: {
                    "jpz-pref": true,
                }
            });
        }

        self.resetPref = function() {
            angular.copy(defPref, $rootScope.pref);
        }

        $rootScope.pref = $.extend(true, {}, defPref, {
            device: jpzUtil.localLoad("JoclyPlazza.pref", {}),
        });

        var lastUserPref = null;

        $rootScope.$watch('pref', function(newPref, oldPref) {
            if (!angular.equals(newPref.device, oldPref.device)) {
                if (!angular.equals($rootScope.pref.device, oldPref.device))
                    jpzUtil.localSave("JoclyPlazza.pref", $rootScope.pref.device);
            }
            if (lastUserPref && !angular.equals(newPref.user, lastUserPref)) {
                if ($rootScope.user.logged) {
                    $.ajax({
                        url: $rootScope.network.connData.pzURL + "set-pref",
                        dataType: $rootScope.features.jsonp ? 'jsonp': 'json',
                        crossDomain: true,
                        headers: {
                            "Accept-Encoding" : "gzip"
                        },
                        data: {
                            pref: JSON.stringify($rootScope.pref.user)
                        },
                        cache: false,
                        success: function(data) {
                            lastUserPref = $.extend(true, {}, $rootScope.pref.user);
                        },
                        error: function() {
                            console.error("set pref error", arguments);
                        },
                    });
                }
            }
        }, true);

        $rootScope.$watch('user.logged+network.connData.pzURL', function() {
            if ($rootScope.user.logged && $rootScope.network.connData && $rootScope.network.connData.pzURL) {
                $.ajax({
                    url: $rootScope.network.connData.pzURL + "get-pref",
                    dataType: $rootScope.features.jsonp ? 'jsonp': 'json',
                    crossDomain: true,
                    headers: {
                        "Accept-Encoding" : "gzip"
                    },
                    cache: false,
                    success: function(data) {
                        if (data.status) {
                            var fav = data.result.gamesFav;
                            data.result.gamesFav = {};
                            for (var i = 0; i < fav.length; i++)
                                data.result.gamesFav[fav[i]] = true;
                            $.extend($rootScope.pref.user, data.result);
                            lastUserPref = $.extend(true, {}, $rootScope.pref.user);
                            if (!$rootScope.$$phase)
                                $rootScope.$apply('pref.user');
                        }
                    },
                });
            }
        });

        $rootScope.prefAPI = {
            open: function() {
                self.openPref();
            },
        }

    }
    ]);

    angular.module('JoclyPlazza').directive('jpzPrefPanel',
    [ 'JoclyPlazza.pref',
    function factory(jpzPref) {
        return {
            templateUrl: "/jocly/plazza/partial/pref-panel",
            replace: true,
        };
    }
    ]);

    angular.module('JoclyPlazza').controller('jpzPrefPageCtrl',
    [ '$scope',
    function($scope) {

        $scope.toolbarTitle = $scope.t('preferences');

        $scope.getTitle = function() {
            return $scope.t('preferences');
        }
        $scope.getPageId = function() {
            return 'preferences';
        }
        $scope.hasPrefResetButton = true;
    }
    ]);

    angular.module('JoclyPlazza').controller('jpzPrefCtrl',
    [ '$scope', 'JoclyPlazza.layout', 'JoclyPlazza.net', 'JoclyPlazza.webrtc', 'JoclyPlazza.pref',
    function($scope, jpzLayout, jpzNet, jpzWebRTC, jpzPref) {

        // settings section

        $scope.webGLSupported = JoclyPlazza.config.supports3D;
        $scope.webRTCSupported=!!jpzWebRTC.getUserMedia;
        $scope.reset = jpzPref.resetPref;
        $scope.simplePushEndpoint = JoclyPlazza.config.simplePushEndpoint;
        $scope.clearSimplePushNotification = function() {
            navigator.push.unregister($scope.simplePushEndpoint);
            $scope.simplePushEndpoint = JoclyPlazza.config.simplePushEndpoint = null;
        }
        $scope.location = location;
        $scope.$watch('notifications', function(newNotifs, oldNotifs) {
            var message = {
                type: "event",
                event: "notification-update-endpoint",
                notifications: $scope.notifications,
            }
            if ($scope.eventsChannel)
                $scope.eventsChannel.send(message);
            else {
                var unwatch = $scope.$watch('eventsChannel', function(channel) {
                    if (channel) {
                        $scope.eventsChannel.send(message);
                        unwatch();
                    }
                });
            }
        }, true);


        // profile section

        $scope.$on("input-file-clear", function() {
            $scope.uploader.use = false;
            if (!$scope.$$phase)
                $scope.$apply();
        });

        $scope.$on("picture-post", function(event, data) {
            $.ajax({
                url: JoclyPlazza.config.cmsURL + "jocly/plazza/set-profile-picture",
                type: 'POST',
                data: data.formData,
                success: function(data) {
                    console.info("result", data);
                    if (data.status) {
                        jpzNet.restartConnection();
                    }
                },
                cache: false,
                contentType: false,
                processData: false
            });
        });


        $scope.editing = {
            email: false,
        }

        $scope.values = {
            email: '',
        }

        $scope.updateEmail = function() {
            $scope.editing.email = false;
            $.ajax({
                url: $scope.network.connData.baseURL + "plazza/update-email",
                data: {
                    email: $scope.values.email
                },
                method: "POST",
                success: function(data) {
                    if (data.status) {
                        jpzNet.restartConnection();
                    } else
                        jpzLayout.alert({
                            title: $scope.t('error'),
                            text: data.error,
                        });
                },
                error: function() {
                    jpzLayout.alert({
                        title: $scope.t('error'),
                        text: $scope.t('network-error'),
                    });
                },
            });
        }

        $scope.updatePassword = function() {
            $scope.editing.password = false;
            $.ajax({
                url: $scope.network.connData.baseURL + "plazza/update-password",
                data: {
                    password: $scope.values.password
                },
                method: "POST",
                success: function(data) {
                    if (data.status) {
                        jpzLayout.alert({
                            title: $scope.t('success'),
                            text: $scope.t('password-modified'),
                        });
                    } else
                        jpzLayout.alert({
                            title: $scope.t('error'),
                            text: data.error,
                        });
                },
                error: function() {
                    jpzLayout.alert({
                        title: $scope.t('error'),
                        text: $scope.t('network-error'),
                    });
                },
            });
        }

        $scope.getTitle = function() {
            return $scope.t('account-profile');
        }
        $scope.getPageId = function() {
            return 'account-profile';
        }

        var games = [];
        $scope.games.forEach(function(game) {
            games.push(game.name);
        });

        $scope.elos = {};
        $scope.elosCount = 0;
        $scope.hasMore = false;

        function UpdateELOs(reset) {
            console.info("UpdateELOs")
            if (reset) {
                $scope.elos = {};
                $scope.elosCount = 0;
            }
            var urlParams = {
                gameset: $scope.gameSetId,
                uid: $scope.user.uid,
            };
            var url = $scope.network.liveBaseURL + "/elo";
            if (!reset && $scope.elosCount > 0)
                urlParams.skip = $scope.elosCount;
            $.ajax({
                url: url,
                dataType: $scope.features.jsonp ? 'jsonp': 'json',
                crossDomain: true,
                headers: {
                    "Accept-Encoding" : "gzip"
                },
                cache: false,
                data: urlParams,
                success: function(data) {
                    if (data.status) {
                        $scope.hasMore = data.result.hasMore;
                        if (reset)
                            for (var id in $scope.elos)
                                delete $scope.elos[id];
                        for (var i = 0; i < data.result.elos.length; i++) {
                            var elo = data.result.elos[i];
                            $scope.elos[elo.game] = elo;
                        }
                        $scope.elosCount = 0;
                        for (var id in $scope.elos)
                            $scope.elosCount++;
                    }
                },
                error: function() {
                    console.info("Failed getting elos", arguments);
                },
                complete: function() {
                    if (!$scope.$$phase)
                        $scope.$apply();
                },
            });
        }

        $scope.sortElos = function(elo) {
            return - elo.elo;
        }

        $scope.more = function() {
            UpdateELOs(false);
        }

        $scope.$watch('user.logged', function(logged) {
            if (logged && $scope.pref.device.settingsTab == 'elo')
                UpdateELOs(true);
        });

        $scope.$watch('pref.device.settingsTab', function(section) {
            if ($scope.user.logged && $scope.pref.device.settingsTab == 'elo')
                UpdateELOs(true);
        });

        $scope.$watch('user.countryCode', function(cc, occ) {
            if ($scope.user.logged && cc && occ && cc != occ) {
                $.ajax({
                    url: JoclyPlazza.config.cmsURL + "jocly/plazza/set-profile-country",
                    type: 'POST',
                    data: {
                        country: cc,
                    },
                    success: function(data) {
                        if (data.status) {
                            jpzNet.restartConnection();
                        }
                    },
                    cache: false,
                });
            }
        });

    }
    ]);



})(jQuery);
;

(function() {

    var translations = {};


    angular.module('JoclyPlazza').service(
    'JoclyPlazza.translate',
    [
    function() {
        var self = this;

        self.addTranslation = function(translation) {
            for (var tag in translation)
                translations[tag] = translation[tag];
        }

        self.translate = function(tag, placeHolders) {
            if (arguments.length < 2)
                placeHolders = {};
            var str = translations[tag];
            if (str === undefined) {
                console.warn("No translation for ", tag);
                str = tag;
            } else {
                for (var ph in placeHolders) {
                    var phval = placeHolders[ph];
                    str = str.replace(new RegExp(ph, "g"), phval);
                }
            }
            return str;
        }

    }
    ]);

})();;
(function($) {

    'use strict';

    angular.module('JoclyPlazza').service('JoclyPlazza.webrtc',
    ['$rootScope', '$document', '$timeout',
    function($rootScope, $document, $timeout) {

        var WebRTC = this;

        if (typeof JoclyPlazza != "undefined")
            JoclyPlazza.webrtc = this;

        $.extend(WebRTC, {
            RTCPeerConnection : null,
            getUserMedia : null,
            attachMediaStream : null,
            reattachMediaStream : null,
            webrtcDetectedBrowser : null,
            detachMediaStream : null,
            localStream : null,
            remoteStream : null,
            channel : null,
            peerConn : null,
        });

        if (navigator.mozGetUserMedia) {
            $.extend(WebRTC, {
                webrtcDetectedBrowser : "firefox",
                pc_config : {
                    "iceServers" : [ {
                        "url" : "stun:23.21.150.121"
                    }
                    ]
                },
                pc_constraint : {
                    'mandatory' : {},
                    'optional' : [ {
                        'DtlsSrtpKeyAgreement' : 'true'
                    }
                    ]
                },
                offer_constraints : {
                    'mandatory' : {
                        'MozDontOfferDataChannel' : true
                    },
                    'optional' : []
                },
                RTCPeerConnection : mozRTCPeerConnection,
                RTCSessionDescription : mozRTCSessionDescription,
                RTCIceCandidate : mozRTCIceCandidate,
                getUserMedia : navigator.mozGetUserMedia
                .bind(navigator),
                attachMediaStream : function(
                element, stream) {
                    if ($(element).attr("webrtc-attached") != "1")
                        $(element).attr("webrtc-attached", "1");
                    element.mozSrcObject = stream;
                    element.play();
                },
                reattachMediaStream : function(to, from) {
                    to.mozSrcObject = from.mozSrcObject;
                    to.play();
                },
                detachMediaStream : function(element) {
                    $(element).attr("webrtc-attached", "0");
                    element.mozSrcObject = null;
                    element.pause();
                },
            });
            if (!MediaStream.prototype.getVideoTracks)
                MediaStream.prototype.getVideoTracks = function() {
                    return [];
                };
            if (!MediaStream.prototype.getAudioTracks)
                MediaStream.prototype.getAudioTracks = function() {
                    return this.audioTracks || [];
                };
        } else if (navigator.webkitGetUserMedia) {
            $.extend(WebRTC, {
                webrtcDetectedBrowser : "chrome",
                pc_config : {
                    "iceServers" : [ {
                        "url" : "stun:stun.l.google.com:19302"
                    }
                    ]
                },
                pc_constraints : {
                    'mandatory' : {},
                    'optional' : [ {
                        'DtlsSrtpKeyAgreement' : 'true'
                    }
                    ]
                },
                offer_constraints : {
                    'mandatory' : {},
                    'optional' : []
                },
                RTCPeerConnection : webkitRTCPeerConnection,
                RTCSessionDescription : RTCSessionDescription,
                RTCIceCandidate : RTCIceCandidate,
                getUserMedia : navigator.webkitGetUserMedia.bind(navigator),
                attachMediaStream : function(element, stream) {
                    element.src = webkitURL.createObjectURL(stream);
                    element.play();
                    $(element).attr("webrtc-attached", "1");
                },
                reattachMediaStream : function(to, from) {
                    to.src = from.src;
                },
                detachMediaStream : function(element) {
                    $(element).attr("webrtc-attached", "0");
                    element.src = '';
                    element.pause();
                },
            });
            if (!webkitMediaStream.prototype.getVideoTracks)
                webkitMediaStream.prototype.getVideoTracks = function() {
                    return this.videoTracks;
                };
            if (!webkitMediaStream.prototype.getAudioTracks)
                webkitMediaStream.prototype.getAudioTracks = function() {
                    return this.audioTracks;
                };
            if (!webkitRTCPeerConnection.prototype.getLocalStreams)
                webkitRTCPeerConnection.prototype.getLocalStreams = function() {
                    return this.localStreams;
                };
            if (!webkitRTCPeerConnection.prototype.getRemoteStreams)
                webkitRTCPeerConnection.prototype.getRemoteStreams = function() {
                    return this.remoteStreams;
                };
        } else {
            console.log("Browser does not appear to be WebRTC-capable");
        }

        $.extend(WebRTC, {
            media_constraints : {
                'optional' : [],
                'mandatory' : {}
            },

            init : function(stream) {
                this.localStream = stream;
                this.audioMute(stream, true);
            },
            createPeerConn : function() {
                var $this = this;
                var pc_config = $.extend(true,
                WebRTC.pc_config, {
                    optional : [ {
                        'DataChannels' : true
                    }
                    ],
                });
                try {
                    this.peerConn = new this.RTCPeerConnection(
                    pc_config,
                    WebRTC.pc_constraints);
                } catch (e) {
                    console.warn("Failed to create PeerConnection, exception", e);
                }
                this.peerConn.onicecandidate = function(event) {
                    if (event.candidate) {
                        console.log("Sending ICE candidate...", event.candidate);
                        $this.channel.send({
                            type : "event",
                            event : "E_WEBRTC",
                            webrtc : {
                                type : "signaling",
                                message : {
                                    type : 'candidate',
                                    label : event.candidate.sdpMLineIndex,
                                    id : event.candidate.sdpMid,
                                    candidate : event.candidate.candidate
                                },
                            },
                        });
                    } else {
                        // console.log("End of candidates.");
                    }
                }
                this.peerConn.onaddstream = function(event) {
                    if ($this.localStream)
                        $this.audioMute($this.localStream, false);
                    //$this.audioMute(event.stream, false);
                    $this.remoteStream = event.stream;
                    $(document).trigger("joclyhub.webrtc", {
                        webrtcType : "mediaOn",
                        stream : event.stream,
                        side : $this.peerSide,
                        local : false,
                    });
                    $rootScope.$apply();
                }
                this.peerConn.onremovestream = function(event) {
                    $(document).trigger("joclyhub.webrtc", {
                        webrtcType : "mediaOff",
                        side : $this.peerSide,
                        local : false,
                    });
                    $this.remoteStream = null;
                    $rootScope.$apply();
                }
                this.peerConn.onstream = function(event) {
                    console.log("peerConn onstream", event.type);
                }
                this.peerConn.addStream(this.localStream);
            },
            startLocal : function() {
                var $this = this;
                var constraints = $.extend(true, {
                    mandatory : {
                        /* Firefox 26 does not seem to appreciate: UNSUPPORTED_ERR minWidth */
                        //minWidth : 160,
                        //minHeight : 120,
                    },
                }, this.media_constraints);
                //console.info("Request user media")
                this.getUserMedia({
                    'audio' : true,
                    'video' : constraints,
                }, function(stream) {
                    //console.info("Got user media")
                    /*
                    						stream.mute({
                    							audio: true,
                    						})
                    						*/
                    function MediaOn(side) {
                        $this.mediaOn({
                            stream : stream,
                            side : side,
                            local : true,
                        });
                        $(document).trigger("joclyhub.webrtc", {
                            webrtcType : "mediaOn",
                            stream : stream,
                            side : side,
                            local: true,
                        });
                    }
                    function LocalMediaOn() {
                        $this.localMediaOn({
                            stream : stream
                        });
                        $rootScope.$broadcast("webrtc-local-media", {
                            on: true,
                            stream: stream,
                            browser: $this.webrtcDetectedBrowser,
                        });
                    }
                    /*
                    						if(!$this.selfSide) {
                    							switch($rootScope.pref.user.webRTCLocal) {
                    							case 'a':
                    								LocalMediaOn();
                    								MediaOn(1);
                    								break;
                    							case 'b':
                    								LocalMediaOn();
                    								MediaOn(-1);
                    								break;
                    							case 'both':
                    								LocalMediaOn();
                    								MediaOn(1);
                    								MediaOn(-1);
                    								break;
                    							}
                    						} else {
                    							LocalMediaOn();
                    							MediaOn($this.selfSide);
                    						}
                    						*/
                    LocalMediaOn();
                    MediaOn($this.selfSide);
                    $rootScope.$apply();
                    /*
                    						MediaOn(1);
                    						MediaOn(-1);
                    						*/
                }, function(error) {
                    console.log("UserMedia failure", error);
                });
            },
            preferOpus : function(sdp) {
                var sdpLines = sdp.split('\r\n');
                for ( var i = 0; i < sdpLines.length; i++) {
                    if (sdpLines[i].search('m=audio') !== - 1) {
                        var mLineIndex = i;
                        break;
                    }
                }
                if (mLineIndex === null)
                    return sdp;
                for ( var i = 0; i < sdpLines.length; i++) {
                    if (sdpLines[i].search('opus/48000') !== - 1) {
                        var opusPayload = this.extractSdp(
                        sdpLines[i], /:(\d+) opus\/48000/i);
                        if (opusPayload)
                            sdpLines[mLineIndex] = this
                            .setDefaultCodec(
                            sdpLines[mLineIndex],
                            opusPayload);
                        break;
                    }
                }
                sdpLines = this.removeCN(sdpLines, mLineIndex);
                sdp = sdpLines.join('\r\n');
                return sdp;
            },
            extractSdp : function(sdpLine, pattern) {
                var result = sdpLine.match(pattern);
                return (result && result.length == 2) ? result[1]
                : null;
            },
            setDefaultCodec : function(mLine, payload) {
                var elements = mLine.split(' ');
                var newLine = new Array();
                var index = 0;
                for ( var i = 0; i < elements.length; i++) {
                    if (index === 3) // Format of media starts
                    // from
                    // the fourth.
                    newLine[index++] = payload; // Put target
                    // payload to the
                    // first.
                    if (elements[i] !== payload)
                        newLine[index++] = elements[i];
                }
                return newLine.join(' ');
            },
            removeCN : function(sdpLines, mLineIndex) {
                var mLineElements = sdpLines[mLineIndex].split(' ');
                for ( var i = sdpLines.length - 1; i >= 0; i--) {
                    var payload = this.extractSdp(sdpLines[i],
                    /a=rtpmap:(\d+) CN\/\d+/i);
                    if (payload) {
                        var cnPos = mLineElements.indexOf(payload);
                        if (cnPos !== - 1) {
                            mLineElements.splice(cnPos, 1);
                        }
                        sdpLines.splice(i, 1);
                    }
                }
                sdpLines[mLineIndex] = mLineElements.join(' ');
                return sdpLines;
            },

            handlePeerMessage: function(data) {
                var $this = this;
                try {
                    switch (data.webrtcType) {
                    case 'startLocalMedia':
                        this.startLocal();
                        break;
                    case 'initiateCall':
                        this.createPeerConn();
                        WebRTC.peerConn.createOffer(
                        function(offer) {
                            offer.sdp = WebRTC
                            .preferOpus(offer.sdp);
                            WebRTC.peerConn
                            .setLocalDescription(offer);
                            $this.channel.send({
                                type : "event",
                                event : "E_WEBRTC",
                                webrtc : {
                                    type : "signaling",
                                    message : offer,
                                },
                            });
                        },
                        function(error) {
                            console
                            .log("Could not create SDP offer! Reason: "
                            + error);
                        },
                        $.extend(true, {
                            'mandatory' : {
                                'OfferToReceiveAudio' : true,
                                'OfferToReceiveVideo' : true,
                            },
                        },
                        WebRTC.offer_constraints));
                        break;
                    case 'expectCall':
                        this.createPeerConn();
                        break;
                    case 'signaling':
                        var msg = data.message;
                        console.log("webrtc.handleMessage: received signaling", msg);
                        if (msg.type == "offer") {
                            console.warn("received offer", WebRTC.peerConn);
                            WebRTC.peerConn.setRemoteDescription(new WebRTC.RTCSessionDescription(msg), function() {
                                console.warn("creating answer");
                                WebRTC.peerConn.createAnswer(
                                function(answer) {
                                    console.warn("sending answer");
                                    answer.sdp = WebRTC.preferOpus(answer.sdp);
                                    WebRTC.peerConn.setLocalDescription(answer);
                                    $this.channel.send({
                                        type : "event",
                                        event : "E_WEBRTC",
                                        webrtc : {
                                            type : "signaling",
                                            message : answer,
                                        },
                                    });
                                },
                                function(error) {
                                    console.warn("Could not create SDP answer! Reason: " + error);
                                },
                                {
                                    'mandatory' : {
                                        'OfferToReceiveAudio' : true,
                                        'OfferToReceiveVideo' : true,
                                    }
                                });
                            }, function(error) {
                                console.warn("Could not set remote description. Reason:", error);
                            });
                            console.warn("created answer");
                        } else if (msg.type == "answer") {
                            WebRTC.peerConn.setRemoteDescription(new WebRTC.RTCSessionDescription(msg));
                        } else if (msg.type == 'candidate') {
                            var candidate = new WebRTC.RTCIceCandidate({
                                sdpMLineIndex : msg.label,
                                candidate : msg.candidate,
                            });
                            console.log("iceCandidate added to peerConnection");
                            WebRTC.peerConn.addIceCandidate(candidate);
                        } else if (msg.type == "bye") {
                            //console.warn("received bye",!!WebRTC.remoteStream);
                            if (WebRTC.remoteStream) {
                                if (WebRTC.localStream)
                                    WebRTC.audioMute(WebRTC.localStream, true);
                                $(document).trigger("joclyhub.webrtc", {
                                    webrtcType : "mediaOff",
                                    side : $this.peerSide,
                                    local : false,
                                });
                                if (!$rootScope.$$phase)
                                    $rootScope.$apply();
                            }
                            WebRTC.remoteStream = null;
                        }
                        break;
                    case 'ccv':
                        $(document).trigger("joclyhub.webrtc", data);
                        break;
                    default:
                        console.warn("WebRTC.handlePeerMessage unhandled message", data)
                    }
                } catch (e) {
                    console.error("WebRTC.handlePeerMessage", data, e);
                }
            },

            setChannel: function(channel) {
                if (!channel) {
                    $(document).trigger("joclyhub.webrtc", {
                        webrtcType : "localMediaOff",
                        stream : null
                    });
                    $(document).trigger("joclyhub.webrtc", {
                        webrtcType : "mediaOff",
                        side : 1,
                        stream : null
                    });
                    $(document).trigger("joclyhub.webrtc", {
                        webrtcType : "mediaOff",
                        side : - 1,
                        stream : null
                    });
                    if (WebRTC.localStream) {
                        $rootScope.$broadcast("webrtc-local-media", {
                            on: false,
                        });
                        WebRTC.localStream.stop();
                    }
                    WebRTC.localStream = null;
                    if (!$rootScope.$$phase)
                        $rootScope.$apply();
                }
                if (!this.channel) {
                    this.channel = channel;
                    return true;
                } else if (!channel) {
                    if (this.peerConn) {
                        try {
                            var streams = this.peerConn.getLocalStreams();
                            if (streams)
                                for (var i = 0; i < streams.length; i++)
                                    this.peerConn.removeStream(streams[i]);
                        } catch (e) {
                            console.warn("Error removing streams", e);
                        }
                        this.peerConn = null;
                    }
                    this.channel.send({
                        type : "event",
                        event : "E_WEBRTC",
                        webrtc : {
                            type : "signaling",
                            message : {
                                type : "bye",
                            },
                        },
                    });
                    if (WebRTC.remoteStream) {
                        try {
                            WebRTC.remoteStream.stop();
                        } catch (e) {
                            console.warn("Could not stop remote stream");
                        }
                    }
                    WebRTC.remoteStream = null;
                    this.channel = null;
                }
                return false;
            },

            sendPeerDetails: function(data) {
                WebRTC.peerPlayer = data.peer;
                WebRTC.selfSide = data.playingAs == 'a' ? 1
                : - 1;
                WebRTC.peerSide = data.playingAs == 'a' ? - 1
                : 1;
                this.channel.send({
                    type : "event",
                    event : "E_WEBRTC",
                    webrtc : {
                        type : "mediaConfig",
                        mediaConfig : $rootScope.pref.user.webRTCUse,
                    },
                });
            },

            setSelfSide: function(side) {
                WebRTC.selfSide = side;
                WebRTC.peerSide = - side;
            },

            mediaOn: function(data) {},

            localMediaOn: function(data) {
                WebRTC.init(data.stream);
                var $this = this;
            },

            audioMute : function(stream, muted) {
                var audioTracks = stream.getAudioTracks();
                setTimeout(function() {
                    for ( var i = 0; i < audioTracks.length; i++) {
                        if (audioTracks[i].stop)
                            audioTracks[i].stop();
                        else
                            audioTracks[i].enabled = !muted;
                    }
                }, 0);
            },
            sendCCVMessage : function(message) {
                if (this.channel)
                    this.channel.send({
                        type : "event",
                        event : "E_WEBRTC",
                        webrtc : {
                            type : "ccv",
                            message : message,
                        },
                    });
            }
        });

    }
    ]);

})(jQuery);;
(function($) {

    'use strict';

    angular.module('JoclyPlazza').service('JoclyPlazza.over',
    [
    function() {
        var callbacks = [];
        this.register = function(callback) {
            callbacks.push(callback);
        }
        this.unregister = function(callback) {
            var index = callbacks.indexOf(callback);
            if (index >= 0)
                callbacks.splice(index, 1);
        }
        this.control = function(operation, options) {
            callbacks.forEach(function(callback) {
                callback(operation, options);
            });
        }
    }
    ]);

    angular.module('JoclyPlazza').directive('jpzOver',
    [ '$timeout', '$interval', 'JoclyPlazza.over',
    function factory($timeout, $interval, jpzOver) {
        return {
            //scope: true,
            templateUrl : '/jocly/plazza/partial/over',
            link: function(scope, element, attrs) {
                element.addClass("jpz-over");
                function Control(operation, options) {
                    console.log("jpzOver control", operation, options);
                    switch (operation) {
                    case 'show':
                        element.addClass("jpz-over-visible");
                        if (options.duration) {
                            var progress = element.find(".jpz-over-footer-progress");
                            var t0 = Date.now();
                            var progressTimer = $interval(function() {
                                var t = Date.now();
                                var right = (100 - .1 * (t - t0) / options.duration) + "%";
                                progress.css("right", right);
                                //console.log("right",right);
                            }, 10);
                            $timeout(function() {
                                element.removeClass("jpz-over-visible");
                                $interval.cancel(progressTimer);
                            }, options.duration * 1000);
                        }
                        if (options.message) {
                            element.find(".jpz-over-footer-message").text(options.message);
                            element.find(".jpz-over-footer").show();
                        } else
                            element.find(".jpz-over-footer").hide();
                        break;
                    case 'hide':
                        element.removeClass("jpz-over-visible");
                        break;
                    }
                }
                jpzOver.register(Control);
                scope.$on("$destroy", function() {
                    jpzOver.unregister(Control);
                });
            },
        };
    }
    ]);

})(jQuery);;
(function($) {

    'use strict';

    angular.module('JoclyPlazza').service('JoclyPlazza.analytics',
    [ '$rootScope',
    function($rootScope) {

        var devSite = /local\.jocly|mig\.jocly|beta\.jocly|jc\.jocly|jcfrog\.jocly/.test(JoclyPlazza.config.baseURL);

        if (typeof _gaq == "undefined")
            $('<script/>').attr('type', 'text/javascript').text("\
            var _gaq = _gaq || []; \
            _gaq.push(['_setAccount', '" + JoclyPlazza.features.ga + "']); \
            _gaq.push(['_trackPageview']); \
            (function() { \
            var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true; \
            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js'; \
            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); \
            })();").appendTo($('head'));

        var ga = {
            app: JoclyPlazza.features.app,
            track: function() {
                if (!devSite) {
                    var _arguments = arguments;
                    var args = Array.prototype.concat.apply(['_trackEvent', ga.app], _arguments);
                    _gaq.push(args);
                    //console.log("ga track",args);
                }
            },
        }

        $rootScope.ga = ga;

    }
    ]);

    angular.module('JoclyPlazza').directive('jpzGoogleAnalytics',
    [ 'JoclyPlazza.analytics',
    function factory(jpzGA) {
        return {
            link: function(scope, element) {
                console.info("jpzGoogleAnalytics");
            },
        };
    }
    ]);


})(jQuery);;
(function() {

    angular.module('JoclyPlazza').directive('pziteShareGame',
    [ 'JoclyPlazza.layout',
    function factory(jpzLayout) {
        return {
            replace: true,
            scope: true,
            templateUrl : '/jocly/plazza/partial/pzite-share-game',
            link: function(scope, element, attrs) {
                element.removeClass("jpz-hidden");
                var shareData = null;
                scope.shareGame = function(scope1) {
                    if (shareData)
                        scope.showShare();
                    else
                        scope1.playlet.shareGame(function(err, data) {
                            if (err) {
                                console.warn("could not share game:", err);
                                return;
                            }
                            shareData = data;
                            scope.showShare();
                        });
                }
                scope.showShare = function() {
                    console.log("show-share");
                    jpzLayout.openDialog(scope, "/jocly/plazza/partial/show-share", {
                        link: shareData.link,
                    });
                }
            },
        };
    }
    ]);

})();
;
/*
 * Copyright (c) 2012 - Jocly - www.jocly.com - All rights reserved
 */

function JHStateMachine() {}

JHStateMachine.prototype = {}

JHStateMachine.prototype.init = function() {
    this.smState = null;
    this.smStates = {};
    this.smEventQueue = [];
    this.smScheduled = false;
    this.smPauseNotified = false;
    this.smPaused = true;
    this.smHistory = [];
    this.smGroups = {};
}

JHStateMachine.prototype.smDebug = function() {}
JHStateMachine.prototype.smWarning = function() {}
JHStateMachine.prototype.smError = function() {}

JHStateMachine.prototype.smTransition = function(states, events, newState, methods) {
    states = this.smSolveStates(states);
    if (typeof(events) == "string") {
        events = [events];
    }
    if (typeof(methods) == "string") {
        methods = [methods];
    }
    for (var s in states) {
        var stateName = states[s];
        if (typeof(this.smStates[stateName]) == "undefined") {
            this.smStates[stateName] = {
                transitions: {},
                enteringMethods: [],
                leavingMethods: []
            }
        }
        for (var e in events) {
            var eventName = events[e];
            if (typeof(this.smStates[stateName].transitions[eventName]) == "undefined") {
                this.smStates[stateName].transitions[eventName] = {
                    state: (newState != null) ? newState: stateName,
                    methods: []
                };
            }
            for (var m in methods) {
                var methodName = methods[m];
                this.smStates[stateName].transitions[eventName].methods.push(methodName);
            }
        }
    }
    if (newState != null && typeof(this.smStates[newState]) == "undefined") {
        this.smStates[newState] = {
            transitions: {},
            enteringMethods: [],
            leavingMethods: []
        }
    }
}

JHStateMachine.prototype.smEntering = function(states, methods) {
    if (typeof(states) == "string") {
        states = [states];
    }
    if (typeof(methods) == "string") {
        methods = [methods];
    }
    for (var s in states) {
        var stateName = states[s];
        if (typeof(this.smStates[stateName]) == "undefined") {
            this.smStates[stateName] = {
                transitions: {},
                enteringMethods: [],
                leavingMethods: []
            }
        }
        for (var m in methods) {
            var methodName = methods[m];
            this.smStates[stateName].enteringMethods.push(methodName);
        }
    }
}

JHStateMachine.prototype.smLeaving = function(states, methods) {
    if (typeof(states) == "string") {
        states = [states];
    }
    if (typeof(methods) == "string") {
        methods = [methods];
    }
    for (var s in states) {
        var stateName = states[s];
        if (typeof(this.smStates[stateName]) == "undefined") {
            this.smStates[stateName] = {
                transitions: {},
                enteringMethods: [],
                leavingMethods: []
            }
        }
        for (var m in methods) {
            var methodName = methods[m];
            this.smStates[stateName].leavingMethods.push(methodName);
        }
    }
}

JHStateMachine.prototype.smStateGroup = function(group, states) {
    if (typeof(states) == "string")
        states = [states];
    if (typeof(this.smGroups[group]) == "undefined")
        this.smGroups[group] = [];
    states = this.smSolveStates(states);
    for (var i in states) {
        var state = states[i];
        if (!this.smContained(state, this.smGroups[group]))
            this.smGroups[group].push(state);
    }
}

JHStateMachine.prototype.smSetInitialState = function(state) {
    this.smState = state;
}

JHStateMachine.prototype.smGetState = function() {
    return this.smState;
}

JHStateMachine.prototype.smHandleEvent = function(event, args) {

    if (typeof(this.smStates[this.smState]) == "undefined") {
        console.error("Unknown state '", this.smState, "'");
        return;
    }
    var hEntry = {
        date: new Date().getTime(),
        fromState: this.smState,
        event: event,
        methods: []
    }
    try {
        hEntry.args = JSON.stringify(args);
    } catch (e) {
        //console.error("handleEvent(event,...) JSON.stringify(args): ",e);
    }

    var transition = this.smStates[this.smState].transitions[event];
    if (typeof(transition) == "undefined") {
        console.warn("JHStateMachine: Event '", event, "' not handled in state '", this.smState, "'");
        return;
    }

    this.smCurrentEvent = event;

    var stateChanged = (this.smState != transition.state);

    if (stateChanged) {
        var leavingMethods = this.smStates[this.smState].leavingMethods;
        for (var i in leavingMethods) {
            try {
                hEntry.methods.push(leavingMethods[i]);
                if (typeof leavingMethods[i] == "function")
                    leavingMethods[i].call(this, args);
                else
                    this['$' + leavingMethods[i]](args);
            } catch (e) {
                console.error("Exception in leaving [", this.smState, "] --> " +
                (typeof leavingMethods[i] == "function" ? leavingMethods[i].name : leavingMethods[i])
                + "(", args, "): ", e);
                throw e;
            }
        }
    }

    for (var i in transition.methods) {
        try {
            hEntry.methods.push(transition.methods[i]);
            if (typeof transition.methods[i] == "function")
                transition.methods[i].call(this, args);
            else
                this['$' + transition.methods[i]](args);
        } catch (e) {
            console.error("Exception in [" + this.smState + "] -- " + event + " --> " +
            (typeof transition.methods[i] == "function" ? transition.methods[i].name : transition.methods[i])
            + "(", args, "): ",
            e);
            throw e;
        }
    }

    this.smJHStateMachineLeavingState(this.smState, event, args);


    this.smDebug("{", this.smState, "} == [", event, "] ==> {", transition.state, "}");


    this.smState = transition.state;

    if (stateChanged) {
        var enteringMethods = this.smStates[this.smState].enteringMethods;
        for (var i in enteringMethods) {
            try {
                hEntry.methods.push(enteringMethods[i]);
                if (typeof enteringMethods[i] == "function")
                    enteringMethods[i].call(this, args);
                else
                    this['$' + enteringMethods[i]](args);
            } catch (e) {
                console.error("Exception in entering [" + this.smState + "] --> " +
                (typeof enteringMethods[i] == "function" ? enteringMethods[i].name : enteringMethods[i])
                + "(", args, "): ", e);
                throw e;
            }
        }
    }

    this.smCurrentEvent = null;

    this.smJHStateMachineEnteringState(this.smState, event, args);

    hEntry.toState = this.smState;
    this.smHistory.splice(0, 0, hEntry);
    while (this.smHistory.length > 50)
        this.smHistory.pop();
}

JHStateMachine.prototype.smPlay = function() {
    var $this = this;
    if (this.smPaused) {
        this.smPaused = false;
        setTimeout(function() {
            $this.smRun();
        }, 0);
    }
}

JHStateMachine.prototype.smPause = function() {
    this.smPaused = true;
}

JHStateMachine.prototype.smStep = function() {
    this.smPauseNotified = false;
    if (this.smEventQueue.length > 0) {
        var eventItem = this.smEventQueue.shift();
        this.smHandleEvent(eventItem.event, eventItem.args);
    }
    this.smNotifyPause();
}

JHStateMachine.prototype.smRun = function() {
    this.smScheduled = false;

    var stepCount = 0;
    while (this.smEventQueue.length > 0) {
        if (this.smPaused) {
            this.smRunEnd(stepCount);
            return;
        } else {
            stepCount++;
            this.smStep();
        }
    }
    while (this.smPaused == false && this.smEventQueue.length > 0) {
        stepCount++;
        this.smStep();
    }
    this.smRunEnd(stepCount);
}

JHStateMachine.prototype.smRunEnd = function() {}

JHStateMachine.prototype.smQueueEvent = function(event, args) {
    var self = this;
    this.smEventQueue.push({
        event: event,
        args: args
    });
    this.smNotifyPause();
    if (!this.smScheduled) {
        this.smScheduled = true;
        setTimeout(function() {
            self.smRun();
        }, 0);
    }
}

JHStateMachine.prototype.smNotifyPause = function() {
    if (this.smEventQueue.length > 0 && this.smPaused == true) {
        var item = this.smEventQueue[0];
        this.smJHStateMachinePaused(item.event, item.args);
    }
}

JHStateMachine.prototype.smJHStateMachineEnteringState = function(state, event, args) {}

JHStateMachine.prototype.smJHStateMachineLeavingState = function(state, event, args) {}

JHStateMachine.prototype.smJHStateMachinePaused = function(state, event, args) {}

JHStateMachine.prototype.smGetTable = function() {
    var cells = {}
    for (var s in this.smStates) {
        var state = this.smStates[s];
        for (var e in state.transitions) {
            var toState = state.transitions[e].state;
            var cellname = s + "/" + toState;
            if (typeof(cells[cellname]) == "undefined") {
                cells[cellname] = {};
            }
            cells[cellname][e] = [];
            if (s != toState) {
                for (var m in state.leavingMethods) {
                    cells[cellname][e].push(state.leavingMethods[m]);
                }
            }
            for (var m in state.transitions[e].methods) {
                cells[cellname][e].push(state.transitions[e].methods[m]);
            }
            if (s != toState) {
                for (var m in this.smStates[toState].enteringMethods) {
                    cells[cellname][e].push(this.smStates[toState].enteringMethods[m]);
                }
            }
        }
    }
    var table = ["<table><tr><td></td>"];
    for (var s in this.smStates) {
        table.push("<td class='state'>" + s + "</td>");
    }
    table.push("</tr>");
    for (var s1 in this.smStates) {
        table.push("<tr><td class='state'>" + s1 + "</td>");
        var state1 = this.smStates[s1];
        for (var s2 in this.smStates) {
            var state2 = this.smStates[s2];
            var cellname = s1 + "/" + s2;
            if (typeof(cells[cellname]) == "undefined") {
                table.push("<td class='empty'></td>");
            } else {
                table.push("<td class='transition'>");
                for (var e in cells[cellname]) {
                    table.push("<div class='event'>");
                    table.push("<div class='eventname'>" + e + "</div>");
                    for (var m in cells[cellname][e]) {
                        table.push("<div class='method'>" + cells[cellname][e][m] + "</div>");
                    }
                    table.push("</div>");
                }
                table.push("</td>");
            }
        }
        table.push("</tr>");
    }
    table.push("</table>");
    return table.join("");
}

JHStateMachine.prototype.smGetHistoryTable = function() {
    var table = ["<table><tr><th>Date</th><th>To</th><th>Event</th><th>Methods</th><th>From</th></tr>"];
    for (var i in this.smHistory) {
        var hEntry = this.smHistory[i];
        table.push("<tr>");
        var date = new Date(hEntry.date);
        var timestamp = date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds() + "." + date.getMilliseconds();
        table.push("<td class='timestamp'>" + timestamp + "</td>");
        table.push("<td class='to'>" + hEntry.toState + "</td>");
        table.push("<td><div class='event'>" + hEntry.event + "</div><div class='args'>(" + hEntry.args + ")</div></td>");
        table.push("<td class='methods'>");
        for (var j in hEntry.methods) {
            table.push(hEntry.methods[j] + "<br/>");
        }
        table.push("</td>");
        table.push("<td class='from'>" + hEntry.fromState + "</td>");
        table.push("</tr>");
    }
    table.push("</table>");
    return table.join("");
}

JHStateMachine.prototype.smSolveStates = function(states) {
    var states0 = [];
    if (typeof(states) == "string") {
        states = [states];
    }
    for (var s in states) {
        var state = states[s];
        if (typeof(this.smGroups[state]) == "undefined") {
            if (!this.smContained(state, states0))
                states0.push(state);
        } else {
            for (var s0 in this.smGroups[state])
                if (!this.smContained(this.smGroups[state][s0]), states0)
                    states0.push(this.smGroups[state][s0]);
        }
    }
    return states0;
}

JHStateMachine.prototype.smContained = function(state, group) {
    for (var i in group) {
        if (state == group[i])
            return true;
    }
    return false;
}

JHStateMachine.prototype.smCheck = function() {
    var result = {
        missing: [],
        unused: []
    }
    var existingFnt = [];
    for (var s in this.smStates) {
        for (var i in this.smStates[s].enteringMethods) {
            var fnt = this.smStates[s].enteringMethods[i];
            existingFnt[fnt] = true;
        }
        for (var i in this.smStates[s].leavingMethods) {
            var fnt = this.smStates[s].leavingMethods[i];
            existingFnt[fnt] = true;
        }
        for (var e in this.smStates[s].transitions) {
            var event = this.smStates[s].transitions[e];
            for (var i in event.methods) {
                var fnt = event.methods[i];
                existingFnt[fnt] = true;
            }
        }
    }
    for (var fnt in existingFnt) {
        if (typeof(this['$' + fnt]) != "function") {
            result.missing.push(fnt);
            console.error("JHStateMachine: missing function $", fnt);
        }
    }
    for (var k in this) {
        try {
            if (k[0] == '$' && typeof(this[k]) == "function") {
                var fnt = k.substr(1);
                if (typeof(existingFnt[fnt]) == "undefined") {
                    //this.warning("JHStateMachine.check "+this.target.name+": unused function "+k);
                    result.unused.push(fnt);
                }
            }
        } catch (e) {}
    }
    return result;
};

function JoclyPSM(options) {
    this.mWidget = null;
    this.mScope = options.scope;
    this.mMode = options.playlet.mode;
    this.mPlaylet = options.playlet;
    this.mModel = options.model;
    this.mView = options.view;
    this.mView.camAnim = options.camAnim;
    this.mBaseGameClass = options.baseGameClass;
    this.mConfig = options.config;
    this.mViewAs = JocGame.PLAYER_A;
    this.mEndReason = null;
    this.preloadedImages = {};
    this.init();
    this.defineStateMachine();
    this.extendStateMachine();
    this.smSetInitialState("S_INIT");
    this.smPlay();
    this.smQueueEvent("E_INIT", {});
}

JoclyPSM.prototype = new JHStateMachine();

JoclyPSM.prototype.defineStateMachine = function() {
    this.smTransition("S_INIT", "E_INIT", "S_LOADING", ["globalInit", "showSwitchPlayers", "init", "initDatabaseData", "initGame", "preloadImages", "resetForcedWinner", "livetbLoadGame"]);

    this.smTransition("S_LOADING", "E_LOADED_RES", "S_WAIT_WIDGET", ["resetTimers", "gameIOButtons", "loadMoves",
    "startNav", "startLive", "startTurnbased", "updateHistory", "clearLoading", ]);
    /*
    	this.smTransition("S_LOADING",["E_USER_CHANGED"],null,["recordEvent"]);
    	this.smLeaving(["S_LOADING"],["playEvents"]);
    	*/


    this.smTransition("S_WAIT_WIDGET", "E_RESIZE", null, ["setWidget", "resize", "updateSounds", "checkResources"]);
    this.smTransition("S_WAIT_WIDGET", "E_LOADED_RES", "S_READY", []);
    this.smTransition(["S_WAIT_WIDGET"],
    ["E_VIEW_OPTS_CHANGED", "E_RESTART", "E_SWITCH_PLAYERS", "E_SWITCH_VIEW", "E_LOAD_GAME", "E_NAV_IN", "E_NAV_OUT", "E_NAV_PLAY",
    "E_NAV_GOTO", "E_V_QSTEP", "E_V_QSTART", "E_V_QEND", "E_V_QBACK", "E_V_FBACK", "E_V_FFORWARD", "E_V_STEP", "E_V_PLAY", "E_V_STOP",
    "E_R_MSG_MOVE", "E_SELF_TURN", "E_PEER_TURN", "E_COMP_TURN", "E_PEER_DETAILS", "E_DISCONNECT",
    "E_G_PEERS", "E_G_MOVES", "E_G_ADDED_OBS", "E_G_MOVE", "E_G_DISC", "E_G_END", "E_TURNBASED_MOVE", "E_DO_IMPORT", "E_XDVIEW"], null, ["recordEvent"]);
    this.smLeaving(["S_WAIT_WIDGET"], ["playEvents"]);

    this.smTransition(["S_LOADING", "S_ANIMATING_MOVE", "S_ANIMATING_END", "S_COMP_ABORTING"],
    ["E_RESIZE", "E_VIEW_OPTS_CHANGED", "E_RESTART", "E_SWITCH_PLAYERS", "E_SWITCH_VIEW", "E_LOAD_GAME", "E_NAV_IN", "E_NAV_OUT", "E_NAV_PLAY",
    "E_NAV_GOTO", "E_V_QSTEP", "E_V_QSTART", "E_V_QEND", "E_V_QBACK", "E_V_FBACK", "E_V_FFORWARD", "E_V_STEP", "E_V_PLAY", "E_V_STOP",
    "E_R_MSG_MOVE", "E_SELF_TURN", "E_PEER_TURN", "E_COMP_TURN", "E_PEER_DETAILS",
    "E_G_PEERS", "E_G_MOVES", "E_G_ADDED_OBS", "E_G_MOVE", "E_G_DISC", "E_G_END",
    "E_TURNBASED_MOVE", "E_DO_IMPORT", "E_XDVIEW"], null, ["recordEvent"]);

    this.smTransition(["S_LOADING", "S_ANIMATING_MOVE", "S_ANIMATING_END", "S_COMP_ABORTING", "S_WAIT_WIDGET"],
    ["E_IMPORT"], null, ["stopNavImportGame"]);

    this.smLeaving(["S_LOADING", "S_ANIMATING_MOVE", "S_ANIMATING_END", "S_COMP_ABORTING"], ["playEvents"]);

    this.smTransition(["S_READY", "S_COMP_MOVING", "S_PEER_MOVING"], "E_RESIZE", null, ["setWidget", "resize", "updateSounds", "displayBoard"]);
    this.smTransition(["S_READY", "S_COMP_MOVING", "S_PEER_MOVING"], "E_VIEW_OPTS_CHANGED", null, ["refreshView", "displayBoard"]);

    this.smEntering("S_READY", ["enableLoadGame", "displayBoard", "unsetIsSelfMove", "updateControls", "ready"]);
    this.smLeaving("S_READY", ["disableLoadGame"]);
    //this.smLeaving("S_READY",["resetForcedWinner"]);
    this.smTransition("S_READY", "E_ACTION", null, ["action"]);
    this.smTransition("S_READY", "E_SELF_TURN", "S_SELF_MOVING", ["notifySelfTurn", "updateTimers"]);
    this.smTransition("S_READY", "E_COMP_TURN", "S_COMP_MOVING", ["notifyCompTurn", "updateTimers"]);
    this.smTransition("S_READY", "E_PEER_TURN", "S_PEER_MOVING", ["notifyPeerTurn", "updateTimers"]);
    this.smTransition("S_READY", "E_FINISHED", "S_ANIMATING_END", ["resetTimers", "notifyWinner", "notifyEnd"]);
    this.smTransition("S_READY", "E_SWITCH_PLAYERS", null, ["switchPlayers", "ready"]);
    this.smTransition("S_READY", "E_LOAD_GAME", null, ["loadGame", "updateHistory", "updatePlayedHistory", "resetTimers", "displayBoard", "ready"]);
    this.smTransition("S_READY", "E_SWITCH_VIEW", null, ["switchView"]);
    this.smTransition("S_READY", "E_NAV_OUT", null, ["exitNav", "updateHistory", "updateControls", "ready"]);
    this.smTransition("S_READY", "E_NAV_IN", null, ["enterNav", "clearWinner", "displayBoard", "updateControls", "ready"]);
    this.smTransition("S_READY", "E_NAV_PLAY", null, ["modeHvsc", "navUpdate", "updateHistory", "updateControls", "ready"]);
    this.smTransition("S_READY", "E_NAV_GOTO", null, ["navGoTo", "navUpdate", "displayBoard", "updateControls", "ready"]);
    this.smTransition("S_READY", "E_V_QSTEP", null, ["navMoveStep", "navUpdate", "displayBoard", "ready"]);
    this.smTransition("S_READY", "E_V_QSTART", null, ["navMoveStart", "navUpdate", "displayBoard", "ready"]);
    this.smTransition("S_READY", "E_V_QEND", null, ["navMoveEnd", "navUpdate", "displayBoard", "ready"]);
    this.smTransition("S_READY", "E_V_QBACK", null, ["navMoveBack", "navUpdate", "displayBoard", "ready"]);
    this.smTransition("S_READY", "E_V_FBACK", null, ["navMoveFastBack", "navUpdate", "displayBoard", "ready"]);
    this.smTransition("S_READY", "E_V_FFORWARD", null, ["navMoveFastForward", "navUpdate", "displayBoard", "ready"]);
    this.smTransition("S_READY", "E_V_STEP", "S_ANIMATING_MOVE", ["navApplyNextMove", "notifyMove"]);
    this.smTransition("S_READY", "E_V_PLAY", null, ["navPlay", "updateControls", "ready"]);
    this.smTransition("S_READY", "E_V_STOP", null, ["navStop", "updateControls", "ready"]);
    this.smTransition("S_READY", "E_RESTART", null, ["notifyRestart", "initGame", "resetHistory", "resetTimers", "updateControls", "displayBoard", "ready"]);
    this.smTransition("S_READY", "E_BACK", null, ["back", "updateHistory", "displayBoard", "updateControls", "ready"]);
    this.smTransition("S_READY", "E_PEER_DETAILS", null, ["webrtcSendPeerDetails", "updatePeerDetails"]);
    this.smTransition("S_READY", "E_G_PEERS", null, ["obsUpdatePeerDetails"]);
    this.smTransition("S_READY", "E_G_MOVES", null, ["saveLiveMoves", "updateHistory", "displayBoard", "ready"]);
    this.smTransition("S_READY", "E_G_DISC", null, ["messageObsDisc", "setForcedWinner", "ready"]);
    this.smTransition("S_READY", "E_G_END", null, []);
    this.smTransition("S_READY", "E_G_MOVE", null, ["makeObsMove"]);
    this.smTransition("S_READY", "E_MOVE", null, ["closeNav", "applyMove", "moveToHistory", "exitNav", "updateControls", "displayBoard", "ready"]);
    this.smTransition("S_READY", "E_TURNBASED_MOVE", null, ["turnbasedMove"]);
    this.smTransition("S_READY", "E_SAVE_DISK_GAME", null, ["saveDiskGame"]);
    this.smTransition("S_READY", "E_SELF_ACK_EXPIRED", "S_READY", ["messageSelfAckExpired", "setForcedWinner", "ready"]);
    this.smTransition("S_READY", "E_PEER_ACK_EXPIRED", "S_READY", ["messagePeerAckExpired", "setForcedWinner", "ready"]);
    this.smTransition("S_READY", "E_NACK_NOTIF", "S_READY", ["messagePeersDisagreed", "setForcedWinner", "ready"]);
    this.smTransition("S_READY", "E_IMPORT", null, ["stopNavImportGame"]);
    this.smTransition("S_READY", "E_DO_IMPORT", null, ["importGame", "updateHistory"]);
    this.smTransition("S_READY", "E_XDVIEW", null, ["xdview"]);
    this.smTransition("S_READY", "E_RECONNECT", null, ["livetbLoadGame", "sendLocalMedia"]);

    this.smEntering("S_SELF_MOVING", ["enableLoadGame", "audioUsermove", "activePlayer", "humanTurn", "startPlayTimer", "notifySelfMoving"]);
    this.smLeaving("S_SELF_MOVING", ["disableLoadGame", "humanTurnEnd", "stopPlayTimer", "notifySelfMovingEnd"]);
    this.smTransition("S_SELF_MOVING", "E_RESIZE", null, ["setWidget", "humanTurnEnd", "resize", "updateSounds", "displayBoard", "humanTurn"]);
    this.smTransition("S_SELF_MOVING", "E_VIEW_OPTS_CHANGED", null, ["humanTurnEnd", "refreshView", "displayBoard", "humanTurn"]);
    this.smTransition("S_SELF_MOVING", "E_SELF_MOVE", null, ["checkValidMove"]);
    this.smTransition("S_SELF_MOVING", "E_VALID_MOVE", "S_ANIMATING_MOVE", ["applyMove", "setIsSelfMove", "notifyMove", "moveToHistory", "liveSendMove", "turnbasedSendMove"]);
    this.smTransition("S_SELF_MOVING", "E_CHANGED_PLAYER", "S_READY", []);
    this.smTransition("S_SELF_MOVING", "E_RESTART", "S_READY", ["notifyRestart", "initGame", "resetHistory", "resetTimers"]);
    this.smTransition("S_SELF_MOVING", "E_BACK", "S_READY", ["back", "updateHistory"]);
    this.smTransition("S_SELF_MOVING", "E_SWITCH_PLAYERS", "S_READY", ["switchPlayers"]);
    this.smTransition("S_SELF_MOVING", "E_LOAD_GAME", "S_READY", ["loadGame", "updateHistory", "resetTimers"]);
    this.smTransition("S_SELF_MOVING", "E_SWITCH_VIEW", null, ["humanTurnEnd", "switchView", "humanTurn"]);
    this.smTransition("S_SELF_MOVING", "E_NAV_IN", "S_READY", ["humanTurnEnd", "enterNav"]);
    this.smTransition("S_SELF_MOVING", "E_SELF_EXPIRED", "S_READY", ["messageSelfExpired", "setForcedWinner"]);
    this.smTransition("S_SELF_MOVING", "E_PEER_DISC", "S_READY", ["messagePeerDisc", "setForcedWinner"]);
    this.smTransition("S_SELF_MOVING", "E_FINISHED", "S_READY", []);
    this.smTransition("S_SELF_MOVING", "E_MOVE", "S_ANIMATING_MOVE", ["applyMove", "unsetIsSelfMove", "notifyMove", "moveToHistory"]);
    this.smTransition("S_SELF_MOVING", "E_TURNBASED_MOVE", null, ["turnbasedHumanTurnEnd", "turnbasedMove"]);
    this.smTransition("S_SELF_MOVING", "E_INVALID_MOVE", null, ["invalidMoveError", "humanTurnEnd", "displayBoard", "humanTurn"]);
    this.smTransition("S_SELF_MOVING", "E_IMPORT", "S_READY", ["notifyRestart", "initGame", "resetHistory", "resetTimers", "stopNavImportGame"]);
    this.smTransition("S_SELF_MOVING", ["E_ACTION", "E_SELF_TURN"], null, []);
    this.smTransition("S_SELF_MOVING", "E_XDVIEW", null, ["xdview"]);

    this.smTransition("S_SELF_MOVING", "E_G_MOVE", null, ["turnbasedHumanTurnEnd", "selfMoveFromRemote"]);
    this.smTransition("S_SELF_MOVING", ["E_PEER_TURN"], null, ["recordEvent"]);
    this.smLeaving("S_SELF_MOVING", ["playEvents"]);
    this.smTransition("S_SELF_MOVING", "E_TIMEOUT", "S_READY", ["resetTimers", "messageSelfExpired", "setForcedWinner"]);
    this.smTransition("S_SELF_MOVING", "E_RESIGN", "S_READY", ["resetTimers", "messageResign", "setForcedWinner"]);
    this.smTransition("S_SELF_MOVING", "E_OFFER_DRAW", null, ["messageOfferDraw"]);
    this.smTransition("S_SELF_MOVING", "E_AGREED_DRAW", "S_READY", ["resetTimers", "messageDraw", "setForcedWinner"]);
    this.smTransition("S_SELF_MOVING", "E_DISCONNECT", "S_READY", []);
    this.smTransition("S_SELF_MOVING", "E_RECONNECT", "S_READY", ["livetbLoadGame"]);

    this.smTransition("S_ANIMATING_MOVE", "E_MOVE_SHOWN", "S_READY", ["nextPlayer"]);
    this.smTransition("S_ANIMATING_MOVE", ["E_MOVE", "E_NACK_NOTIF", "E_PEER_TURN", "E_SELF_TURN", "E_TIMEOUT", "E_RESIGN", "E_OFFER_DRAW", "E_DISCONNECT", "E_RECONNECT"], null, ["recordEvent"]);
    this.smTransition("S_ANIMATING_MOVE", "E_XDVIEW", null, ["xdview"]);
    this.smLeaving("S_ANIMATING_MOVE", ["playEvents"]);

    this.smEntering("S_COMP_MOVING", ["enableLoadGame", "activePlayer", "machineTurn", "startPlayTimer"]);
    this.smLeaving("S_COMP_MOVING", ["disableLoadGame", "stopPlayTimer"]);
    this.smTransition("S_COMP_MOVING", "E_COMP_MOVE", "S_ANIMATING_MOVE", ["applyMove", "notifyMove", "moveToHistory"]);
    this.smTransition("S_COMP_MOVING", "E_CHANGED_PLAYER", "S_COMP_ABORTING", ["requestAbort"]);
    this.smTransition("S_COMP_MOVING", "E_RESTART", "S_COMP_ABORTING", ["notifyRestart", "requestAbort", "initGame", "resetHistory", "resetTimers"]);
    this.smTransition("S_COMP_MOVING", "E_SWITCH_PLAYERS", "S_COMP_ABORTING", ["requestAbort", "switchPlayers"]);
    this.smTransition("S_COMP_MOVING", "E_LOAD_GAME", "S_COMP_ABORTING", ["requestAbort", "loadGame", "updateHistory", "resetTimers"]);
    this.smTransition("S_COMP_MOVING", "E_BACK", "S_COMP_ABORTING", ["requestAbort", "back", "updateHistory"]);
    this.smTransition("S_COMP_MOVING", "E_SWITCH_VIEW", null, ["switchView"]);
    this.smTransition("S_COMP_MOVING", "E_NAV_IN", "S_COMP_ABORTING", ["requestAbort", "enterNav"]);
    this.smTransition("S_COMP_MOVING", "E_XDVIEW", null, ["xdview"]);

    this.smEntering("S_PEER_MOVING", ["peerPlayer", "startPlayTimer"]);
    this.smLeaving("S_PEER_MOVING", ["peerPlayer", "stopPlayTimer", "playEvents"]);
    this.smTransition("S_PEER_MOVING", "E_R_MSG_MOVE", null, ["liveCheckValidMove"]);
    this.smTransition("S_PEER_MOVING", "E_VALID_MOVE", "S_ANIMATING_MOVE", ["liveSendMoveAck", "applyMove", "unsetIsSelfMove", "notifyMove", "moveToHistory"]);
    this.smTransition("S_PEER_MOVING", "E_G_MOVE", null, ["makeObsMove"]);
    this.smTransition("S_PEER_MOVING", "E_MOVE", "S_ANIMATING_MOVE", ["applyMove", "notifyMove", "moveToHistory"]);
    this.smTransition("S_PEER_MOVING", "E_INVALID_MOVE", null, ["liveSendMoveNack"]);
    this.smTransition("S_PEER_MOVING", "E_LOAD_GAME", "S_READY", ["loadGame", "updateHistory", "resetTimers"]);
    this.smTransition("S_PEER_MOVING", "E_SWITCH_VIEW", null, ["switchView"]);
    this.smTransition("S_PEER_MOVING", "E_PEER_EXPIRED", "S_READY", ["messagePeerExpired", "setForcedWinner"]);
    this.smTransition("S_PEER_MOVING", "E_PEER_DISC", "S_READY", ["messagePeerDisc", "setForcedWinner"]);
    this.smTransition("S_PEER_MOVING", "E_FINISHED", "S_READY", []);
    this.smTransition("S_PEER_MOVING", "E_G_DISC", "S_READY", ["messageObsDisc", "setForcedWinner"]);
    this.smTransition("S_PEER_MOVING", "E_G_END", null, []);
    this.smTransition("S_PEER_MOVING", "E_NAV_IN", "S_READY", ["enterNav", "displayBoard", "updateControls", "ready"]);
    this.smTransition("S_PEER_MOVING", "E_TURNBASED_MOVE", null, ["turnbasedMove"]);
    this.smTransition("S_PEER_MOVING", "E_PEER_TURN", null, []);
    this.smTransition("S_PEER_MOVING", "E_XDVIEW", null, ["xdview"]);
    this.smTransition("S_PEER_MOVING", "E_RECONNECT", "S_READY", ["livetbLoadGame"]);

    this.smTransition("S_PEER_MOVING", ["E_SELF_TURN"], null, ["recordEvent"]);
    this.smLeaving("S_PEER_MOVING", ["playEvents"]);
    this.smTransition("S_PEER_MOVING", "E_TIMEOUT", "S_READY", ["resetTimers", "messagePeerExpired", "setForcedWinner"]);
    this.smTransition("S_PEER_MOVING", "E_RESIGN", "S_READY", ["resetTimers", "messageResign", "setForcedWinner"]);
    this.smTransition("S_PEER_MOVING", "E_OFFER_DRAW", null, ["messageOfferDraw"]);
    this.smTransition("S_PEER_MOVING", "E_AGREED_DRAW", "S_READY", ["resetTimers", "messageDraw", "setForcedWinner"]);
    this.smTransition("S_PEER_MOVING", "E_DISCONNECT", "S_READY", []);

    this.smTransition("S_ANIMATING_END", "E_END_SHOWN", "S_READY", ["autoRestart"]);

    this.smTransition("S_COMP_ABORTING", "E_COMP_ABORTED", "S_READY", ["clearProgress"]);
    this.smTransition("S_COMP_ABORTING", "E_COMP_MOVE", null, ["compAborted"]);

    this.smTransition(["S_LOADING", "S_LOADING", "S_READY", "S_SELF_MOVING", "S_ANIMATING_MOVE", "S_COMP_MOVING", "S_PEER_MOVING", "S_ANIMATING_END", "S_COMP_ABORTING"],
    "E_CLOSE", null, ["close"]);
    this.smTransition("S_COMP_MOVING", "E_CLOSE", "S_COMP_ABORTING", ["requestAbort"]);
}

JoclyPSM.prototype.applyScope = function() {
    if (!this.mScope.$$phase)
        this.mScope.$apply();
}

JoclyPSM.prototype.digestScope = function() {
    if (!this.mScope.$$phase)
        this.mScope.$digest();
}

JoclyPSM.prototype.smRunEnd = function(stepCount) {
    if (stepCount > 0)
        this.digestScope();
}

JoclyPSM.prototype.extendStateMachine = function() {}

JoclyPSM.prototype.smDebug = function() {
    if (this.mScope.pref.device.logPSM)
        console.log.apply(console, Array.prototype.concat.apply(['[psm-' + this.mPlaylet.id + ']'], arguments));
}

JoclyPSM.prototype.smError = function() {
    if (this.mScope.pref.device.logPSM)
        console.error.apply(console, Array.prototype.concat.apply(['[psm-' + this.mPlaylet.id + ']'], arguments));
}

JoclyPSM.prototype.smWarning = function() {
    if (this.mScope.pref.device.logPSM)
        console.warn.apply(console, Array.prototype.concat.apply(['[psm-' + this.mPlaylet.id + '] '], arguments));
}

JoclyPSM.prototype.t = function() {
    return this.mScope.t.apply(this.mScope, arguments);
}

JoclyPSM.prototype.$livetbLoadGame = function(args) {
    if (this.mMode == 'livetb')
        if (this.mPlaylet.options.channel)
            this.mPlaylet.options.channel.send({
                type: "event",
                event: "E_REQUEST_GAME"
            });
}

JoclyPSM.prototype.$globalInit = function(args) {}

JoclyPSM.prototype.$init = function(args) {
    var $this = this;
}

JoclyPSM.prototype.$initGame = function(args) {
    var $this = this;
    this.mWho = JocGame.PLAYER_A;

    if (this.mGame) {
        this.mGame.GameDestroyView();
        this.mGame.GameDestroyGame();
    }
    this.mGame = new this.mBaseGameClass({
        game: this.mModel.gameOptions ? this.mModel.gameOptions: {},
        view: this.mView,
    });
    this.mGame.mWidget = this.mWidget;
    this.mGame.mViewAs = this.mViewAs;
    this.mGame.mStrings = this.mModel.strings;
    this.mGame.MakeMove = function(args) {
        $this.smQueueEvent("E_SELF_MOVE", args);
    }
    this.mGame.preloadedImages = this.preloadedImages;
    this.mGame.CanPlaySound = function() {
        return $this.mPlaylet.canPlaySound();
    }

    if (this.mGame.mWidget)
        this.mGame.mGeometry = {
            width: this.mGame.mWidget.width(),
            height: this.mGame.mWidget.height(),
        };

    this.mGame.mNotation = this.mPlaylet.viewOptions.notation;
    if (JoclyPlazza.features.notation)
        this.mGame.mNotation=!!JoclyPlazza.features.notation;
    this.mGame.mShowMoves = this.mPlaylet.viewOptions.moves;
    if (JoclyPlazza.features.showmoves)
        this.mGame.mShowMoves=!!JoclyPlazza.features.showmoves;
    this.mGame.mSounds = this.mPlaylet.viewOptions.sounds;
    if (JoclyPlazza.features.sounds)
        this.mGame.mSounds=!!JoclyPlazza.features.sounds;
    this.mGame.mAutoComplete = this.mPlaylet.viewOptions.autocomplete;
    if (JoclyPlazza.features.mAutoComplete)
        this.mGame.mAutoComplete=!!JoclyPlazza.features.autocomplete;
    this.mGame.mSkin = this.mPlaylet.viewOptions.skin;
    if (JoclyPlazza.features.skin)
        this.mGame.mSkin = JoclyPlazza.features.skin;

    if (this.mGame.mWidget) {
        var mask = this.mGame.mWidget.children(".jocly-res-loading-mask").detach();
        this.mGame.mWidget.empty();
        mask.appendTo(this.mGame.mWidget);
        this.mScope.attachResources(this.mGame);
        this.mGame.GameInitView();
        this.mScope.sendEmbed({
            type: "skin",
            skin: this.mGame.mSkin,
        });
    }
}

JoclyPSM.prototype.$checkResources = function() {
    var $this = this;
    var moveOn = true;
    if (this.mView.xdView && this.mPlaylet.viewOptions && this.mPlaylet.viewOptions.skin &&
    this.mView.skins) {
        var skin = null;
        for (var i = 0; i < this.mView.skins.length; i++)
            if (this.mView.skins[i].name == this.mPlaylet.viewOptions.skin) {
                skin = this.mView.skins[i];
                break;
            }
        if (skin && skin.preload) {
            var ress = [];
            for (var i = 0; i < skin.preload.length; i++) {
                var m = /^(.*\|)(.*?)$/.exec(skin.preload[i]);
                if (m) {
                    var res = m[1] + this.mView.fullPath + m[2];
                    if (!this.mGame.xdResourceLoaded(res))
                        ress.push(res);
                }
            }
            if (ress.length > 0) {
                moveOn = false;
                this.mGame.xdLoadResources(ress, function() {
                    $this.smQueueEvent("E_LOADED_RES", {});
                });
            }
        }
    }
    if (moveOn)
        $this.smQueueEvent("E_LOADED_RES", {});
}

JoclyPSM.prototype.$preloadImages = function() {
    var $this = this;

    var havePreloadRes = false;
    if (!havePreloadRes) {
        this.preloadedImages = {};
        function SendFilesLoadedEvent() {
            $this.mGame.preloadedImages = $this.preloadedImages;
            $this.smQueueEvent("E_LOADED_RES", {});
        }

        function LoadImage(id) {
            var image = new Image();
            var src = $this.mView.fullPath + "/" + $this.mView.preloadImages[id];
            $this.preloadedImages[id] = image;
            image.onload = function() {
                $this.preloadingImagesCount--;
                if ($this.preloadingImagesCount == 0)
                    SendFilesLoadedEvent();
            }
            image.src = src;
        }
        if (typeof this.mView.preloadImages == "undefined" || this.mView.preloadImages.length == 0)
            SendFilesLoadedEvent();
        else {
            this.preloadingImagesCount = 0;
            for (var id in this.mView.preloadImages) {
                this.preloadingImagesCount++;
                LoadImage(id);
            }
        }
    }
}

JoclyPSM.prototype.$ready = function(args) {
    var $this = this;

    var oldWinner = this.mWinner;
    if (this.mForcedWinner) {
        this.mWinner = this.mForcedWinner;
    } else {
        this.mGame.SetWho( - this.mGame.mWho);
        this.mWinner = this.mGame.GetFinished();
        this.mGame.SetWho( - this.mGame.mWho);
    }
    if (this.mWinner) {
        this.mPlaylet.navPlaying = false;
        /*
        		if(this.mPlaylet.navigation==false)
        			$(document).trigger("joclyhub.winner",{ show: true, winner:this.mWinner});
        		*/
        if (this.mWinner != oldWinner) {
            this.smQueueEvent("E_FINISHED", {
                winner: this.mWinner
            });
        }
        if (this.mWinner == JocGame.DRAW) {
            this.mPlaylet.players[1].state = "winner";
            this.mPlaylet.players[ - 1].state = "winner";
        } else {
            this.mPlaylet.players[this.mWinner].state = "winner";
            this.mPlaylet.players[ - this.mWinner].state = "loser";
        }
    } else {
        if (this.mPlaylet.features.hasNavigation) {
            if (this.mPlaylet.moves && this.mPlaylet.historyIndex >= this.mPlaylet.moves.length - 1) {
                this.mPlaylet.navPlaying = false;
            }
            if (this.mPlaylet.navPlaying)
                this.smQueueEvent("E_V_STEP");
            var player = [JocGame.PLAYER_B, JocGame.PLAYER_A][(this.mPlaylet.historyIndex + 2)%2];
            if (this.mGame.mInitial && this.mGame.mInitial.turn == JocGame.PLAYER_B)
                player =- player;
            this.mPlaylet.players[player].state = "playing-nav";
            this.mPlaylet.players[ - player].state = "normal";
            this.mScope.sendEmbed({
                type: "turn",
                who: player,
            });
        } else {
            this.smQueueEvent("E_ACTION", {});
            /*
            			if(this.mMode!="live" && this.mMode!="liveobs" && this.mMode!="livetb")
            				this.smQueueEvent("E_ACTION",{});
            			else
            				console.info("doing what now from mode",this.mMode)
            			*/
            this.mPlaylet.players[ - this.mWho].state = "normal";
            this.mScope.sendEmbed({
                type: "turn",
                who: this.mGame.mWho,
            });
        }
    }
}


JoclyPSM.prototype.$action = function(args) {
    switch (this.mPlaylet.players[this.mWho].type) {
    case "computer":
        this.smQueueEvent("E_COMP_TURN", {});
        break;
    case "self":
        this.smQueueEvent("E_SELF_TURN", {});
        break;
    }
}

JoclyPSM.prototype.$resize = function(args) {
    this.mGame.mGeometry = {
        width: args.width,
        height: args.height,
    };
    if (this.mWidget) {
        this.mGame.GameDestroyView();
        this.mScope.attachResources(this.mGame);
        this.mGame.GameInitView();
        this.mScope.sendEmbed({
            type: "skin",
            skin: this.mGame.mSkin,
        });
    }
}


JoclyPSM.prototype.$refreshView = function(args) {
    this.mGame.GameDestroyView();
    this.mGame.mNotation = this.mPlaylet.viewOptions.notation;
    this.mGame.mShowMoves = this.mPlaylet.viewOptions.moves;
    this.mGame.mAutoComplete = this.mPlaylet.viewOptions.autocomplete;
    this.mGame.mSounds = this.mPlaylet.viewOptions.sounds;
    this.mGame.mSkin = this.mPlaylet.viewOptions.skin;
    this.mScope.attachResources(this.mGame);
    this.mGame.GameInitView();
    this.mScope.sendEmbed({
        type: "skin",
        skin: this.mGame.mSkin,
    });
}

JoclyPSM.prototype.$recordEvent = function(args) {
    if (typeof this.mBufferedEvents == "undefined")
        this.mBufferedEvents = [];
    this.mBufferedEvents.push({
        event: this.smCurrentEvent,
        args: args,
    });
}

JoclyPSM.prototype.$playEvents = function(args) {
    if (typeof this.mBufferedEvents != "undefined") {
        var bufferedEvents = this.mBufferedEvents;
        this.mBufferedEvents = [];
        for (var i in bufferedEvents) {
            var event = bufferedEvents[i];
            this.smQueueEvent(event.event, event.args);
        }
    }
}

JoclyPSM.prototype.$displayBoard = function(args) {
    if (this.mWidget && this.mMode != "empty")
        this.mGame.DisplayBoard();

    this.mScope.notifyDisplay(this.mGame);

}

JoclyPSM.prototype.$humanTurn = function(args) {
    if (this.mWidget)
        this.mGame.HumanTurn();
}

JoclyPSM.prototype.$humanTurnEnd = function(args) {
    if (this.mWidget)
        this.mGame.HumanTurnEnd();
}

JoclyPSM.prototype.$checkValidMove = function(args) {
    if (this.mGame.IsValidMove(args))
        this.smQueueEvent("E_VALID_MOVE", args);
    else {
        if (this.mGame.mBoard.mInvalidMoveMessage) {
            args.errorMessage = this.mGame.mBoard.mInvalidMoveMessage;
            this.mGame.mBoard.mInvalidMoveMessage = null;
        }
        this.smQueueEvent("E_INVALID_MOVE", args);
        //this.log("Invalid move "+JSON.stringify(args));
    }
}

JoclyPSM.prototype.$setIsSelfMove = function(args) {
    this.mIsSelfMove = true;
}

JoclyPSM.prototype.$unsetIsSelfMove = function(args) {
    this.mIsSelfMove = false;
}

JoclyPSM.prototype.$notifyMove = function(args) {
    var $this = this;
    this.mGame.MoveShown = function() {
        $this.smQueueEvent("E_MOVE_SHOWN", {});
    }
    if (this.mWidget && (this.mIsSelfMove == false || this.mView.animateSelfMoves == true)) {
        var moveShown = this.mGame.PlayedMove(this.lastMove, this.oldBoard);
        if (!moveShown)
            return;
    }
    this.smQueueEvent("E_MOVE_SHOWN", {});
}


JoclyPSM.prototype.$moveToHistory = function(args) {
    var $this = this;
    this.mPlaylet.history.push({
        text: this.mGame.mPlayedMoves[$this.mGame.mPlayedMoves.length - 1].ToString(),
        index: this.mPlaylet.history.length,
    });
    this.mPlaylet.historyIndex = this.mPlaylet.history.length - 1;
}

JoclyPSM.prototype.$resetHistory = function(args) {
    this.mPlaylet.history.splice(0, this.mPlaylet.history.length);
    this.mPlaylet.historyIndex =- 1;
}

JoclyPSM.prototype.$updateHistory = function(args) {
    this.mPlaylet.history.splice(0, this.mPlaylet.history.length);
    for (var i = 0; i < this.mGame.mPlayedMoves.length; i++) {
        this.mPlaylet.history.push({
            text: this.mGame.mPlayedMoves[i].ToString(),
            index: i,
        });
    }
    this.mPlaylet.historyIndex = Math.min(this.mPlaylet.historyIndex, this.mPlaylet.history.length - 1);
}

JoclyPSM.prototype.$applyMove = function(args) {
    this.lastMove = new (this.mGame.GetMoveClass())(args);
    this.lastMove.compact = this.mGame.mBoard.CompactMoveString(this.mGame, this.lastMove);
    this.oldBoard = new (this.mGame.GetBoardClass())(this.mGame);
    this.oldBoard.CopyFrom(this.mGame.mBoard);
    this.mGame.ApplyMove(this.lastMove);
    if (this.mModel.debugEval)
        this.mGame.mBoard.Evaluate(this.mGame, null, null, "debug");
    this.mScope.sendEmbed({
        type: "move",
        move: this.lastMove,
        moveStr: this.lastMove.ToString(),
        who: this.mGame.mWho,
        self: this.mPlaylet.players[this.mGame.mWho].type == 'self',
    });
}

JoclyPSM.prototype.$nextPlayer = function(args) {
    this.mWho =- this.mWho;
    this.mGame.SetWho(this.mWho);
}

JoclyPSM.prototype.$machineTurn = function(args) {
    var $this = this;
    var player = this.mPlaylet.players[this.mWho];
    var level = player = this.mPlaylet.levels[player.level];

    var who = $this.mWho;
    var lastProgress = 0;
    this.mPlaylet.players[who].progress = lastProgress;
    var startMachineArgs = {
        //randomSeed: $("#jocly-seed").val(),
        level: level,
        maxDepth: level.maxDepth,
        potential: level.potential,
        Done: function(result) {
            $this.mPlaylet.players[who].progress = 0;
            if ($this.mConfig.request.engdebug && $this.mExploredCount > 0)
                console.log("Engine ends:", $this.mExploredCount, "explored in", this.mDuration,
                "ms (", Math.round($this.mDuration * 100 / $this.mExploredCount) / 100, "ms/board), evaluation", $this.mBoard.mEvaluation);
            $this.smQueueEvent("E_COMP_MOVE", result.move);
            $this.mScope.updateProgressBar(0);
        },
        Progress: function(percent) {
            if (percent != lastProgress) {
                lastProgress = percent;
                $this.mPlaylet.players[who].progress = percent;
                $this.mScope.updateProgressBar(percent);
            }
        },
    };

    // TODO remove old database code
    if (this.mGame.mOptions.moveDatabase &&
    this.mMoveDatabase[this.mGame.mWho].inUse &&
    navigator.onLine &&
    (typeof navigator.network == "undefined" || navigator.network.connection)
    ) {
        this.mGame.mBoard.mSignature = null;
        var signature = this.mGame.mBoard.GetSignature();
        var startTime = new Date().getTime();
        var url = this.mGame.mOptions.moveDatabase
        .replace(/\{sign\}/gi, signature)
        .replace(/\{who\}/gi, this.mGame.mWho);
        $.ajax({
            url: url,
            dataType: 'jsonp',
            crossDomain: true,
            success: function(data) {
                if (data.status) {
                    $this.mMoveDatabase[$this.mGame.mWho].noMatchCount = 0;
                    for (var k in data.move) {
                        var val = data.move[k];
                        if (typeof val == "string") {
                            if (/^[0-9]+$/.test(val))
                                data.move[k] = parseInt(val);
                            if (/^[0-9]+\?[0-9]+$/.test(val))
                                data.move[k] = parseFloat(val);
                        }
                    }
                    $this.smQueueEvent("E_COMP_MOVE", data.move);
                } else {
                    $this.mMoveDatabase[$this.mGame.mWho].noMatchCount++;
                    if ($this.mMoveDatabase[$this.mGame.mWho].noMatchCount > 2)
                        $this.mMoveDatabase[$this.mGame.mWho].inUse = false;
                    $this.mGame.StartMachine(startMachineArgs);
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                console.warn("MoveDatabase error:", jqXHR, textStatus, errorThrown);
                $this.mMoveDatabase[$this.mGame.mWho].inUse = false;
                $this.mGame.StartMachine(startMachineArgs);
            }
        });
    } else {
        this.mGame.StartMachine(startMachineArgs);
    }
}

JoclyPSM.prototype.$notifyEnd = function(args) {
    var $this = this;
    this.mGame.EndShown = function() {
        $this.smQueueEvent("E_END_SHOWN", args);
    }
    var needWait = this.mGame.ShowEnd();
    if (needWait == false)
        return;
    this.smQueueEvent("E_END_SHOWN", args);
}

JoclyPSM.prototype.$activePlayer = function(args) {
    this.mPlaylet.players[this.mWho].state = "playing";
}

JoclyPSM.prototype.$peerPlayer = function(args) {
    this.mPlaylet.players[this.mWho].state = "playing-nav";
}

JoclyPSM.prototype.$requestAbort = function(args) {
    var $this = this;
    var who = this.mWho;
    this.mGame.Abort(function() {
        $this.smQueueEvent("E_COMP_ABORTED", {});
    });
}

JoclyPSM.prototype.$compAborted = function(args) {
    this.smQueueEvent("E_COMP_ABORTED", {});
}


JoclyPSM.prototype.$updateSounds = function(args) {
    function AddSound(tag, path, fname) {
        var audio = $("<audio/>").attr("id", "jocly-sound-" + tag).attr("preload", "auto");
        $("<source/>").attr("src", path + "/res/sounds/" + fname + ".ogg").attr("type", "audio/ogg").appendTo(audio);
        $("<source/>").attr("src", path + "/res/sounds/" + fname + ".mp3").attr("type", "audio/mp3").appendTo(audio);
        audio.appendTo($("#jocly-sounds"));
    }
    $("#jocly-sounds").empty();
    var defaultSounds = {
        useraction: "bells1",
        usermove: "bells1",
        win: "winblues",
        loss: "lose",
        end: "draw",
    }
    for (var i in defaultSounds)
        AddSound(i, this.mConfig.baseURL + this.mConfig.joclyPath, defaultSounds[i]);
    if (this.mView.sounds) {
        for (var i in this.mView.sounds) {
            $("#jocly-sound-" + i).remove();
            if (this.mView.sounds[i])
                if (this.mView.sounds[i])
                    AddSound(i, this.mView.fullPath, this.mView.sounds[i]);
        }
    }
}

JoclyPSM.prototype.$notifyWinner = function(args) {
    if (this.mPlaylet.features.hasNavigation == false) {
        var self = 0;
        if (this.mPlaylet.players[1].type == "self" && this.mPlaylet.players[ - 1].type != "self")
            self = 1;
        else if (this.mPlaylet.players[ - 1].type == "self" && this.mPlaylet.players[1].type != "self")
            self =- 1;
        else if (this.mScope.user.logged) {
            var uid = this.mScope.user.userId;
            if (this.mPlaylet.players[1].uid == uid && this.mPlaylet.players[ - 1].uid != uid)
                self = 1;
            else if (this.mPlaylet.players[ - 1].uid == uid && this.mPlaylet.players[1].uid != uid)
                self =- 1;
        }
        if (args.winner == JocGame.DRAW) {
            if (this.mPlaylet.features.hasEndSound)
                this.mGame.PlaySound("end");
            this.mPlaylet.notifyEnd('draw', this.mEndReason);
        } else if (!self) {
            if (this.mPlaylet.features.hasEndSound)
                this.mGame.PlaySound("end");
        } else if (args.winner == self) {
            if (this.mPlaylet.features.hasEndSound)
                this.mGame.PlaySound("win");
            this.mPlaylet.notifyEnd('win', this.mEndReason);
        } else {
            if (this.mPlaylet.features.hasEndSound)
                this.mGame.PlaySound("loss");
            this.mPlaylet.notifyEnd('lose', this.mEndReason);
        }
        this.mScope.sendEmbed({
            type: "gameOver",
            winner: args.winner,
        });
    }
}

JoclyPSM.prototype.$audioUsermove = function(args) {
    this.mGame.PlaySound('usermove');
}

JoclyPSM.prototype.$updateControls = function(args) {
    var beginning = this.mGame.mPlayedMoves.length == 0;
    this.mPlaylet.features.canRestart=!beginning;
    this.mPlaylet.features.canBack = false;
    for (var i = 0; i < this.mGame.mPlayedMoves.length && i < 2; i++)
        if (this.mPlaylet.players[i == 0 ? 1: - 1].type == "self") {
            this.mPlaylet.features.canBack = true;
            break;
        }
    this.mPlaylet.features.canSwitchPlayers = true;
}

JoclyPSM.prototype.$back = function(args) {
    var backIndex =- 1;
    if (typeof args.index != "undefined")
        backIndex = args.index;
    else
        for (var i = this.mGame.mPlayedMoves.length - 1; i >= 0; i--)
            if (this.mPlaylet.players[i%2?-1: 1].type == "self") {
                backIndex = i;
                break;
            }
    if (backIndex >= 0) {
        this.mGame.BackTo(backIndex, this.mGame.mPlayedMoves);
        this.mWho = this.mGame.mWho;
        this.mGame.mBoard.GenerateMoves(this.mGame);
    }
}

JoclyPSM.prototype.$showSwitchPlayers = function(args) {
    this.mPlaylet.features.canSwitchPlayers = true;
}

JoclyPSM.prototype.$hideSwitchPlayers = function(args) {
    this.mPlaylet.features.canSwitchPlayers = false;
}

JoclyPSM.prototype.$switchPlayers = function(args) {
    function ClearObject(obj) {
        for (var f in obj)
            if (obj.hasOwnProperty(f))
                delete obj[f];
    }
    var playerA = $.extend({}, this.mPlaylet.players[JocGame.PLAYER_A]);
    var playerB = $.extend({}, this.mPlaylet.players[JocGame.PLAYER_B]);
    ClearObject(this.mPlaylet.players[JocGame.PLAYER_A]);
    ClearObject(this.mPlaylet.players[JocGame.PLAYER_B]);
    $.extend(this.mPlaylet.players[JocGame.PLAYER_A], playerB);
    $.extend(this.mPlaylet.players[JocGame.PLAYER_B], playerA);
}

JoclyPSM.prototype.$switchView = function(args) {
    this.mGame.mViewAs =- this.mGame.mViewAs;
    this.mSwitchRequested = false;
    this.mGame.GameDestroyView();
    this.mScope.attachResources(this.mGame);
    this.mGame.GameInitView();
    this.mGame.DisplayBoard();
}

JoclyPSM.prototype.$gameIOButtons = function(args) {}

JoclyPSM.prototype.$enableLoadGame = function(args) {
    this.mPlaylet.features.canLoadGame = true;
}

JoclyPSM.prototype.$disableLoadGame = function(args) {
    this.mPlaylet.features.canLoadGame = false;
}

JoclyPSM.prototype.$updatePlayedHistory = function(args) {
    if (this.mPlaylet.options.liveGameStatus == 'played' || this.mPlaylet.options.liveGameStatus == 'saved') {
        this.mGame.BackTo(0, this.mGame.mPlayedMoves);
        this.mWho = this.mGame.mWho;
        this.mGame.mBoard.GenerateMoves(this.mGame);
    }
}

JoclyPSM.prototype.$loadGame = function(args) {
    var valid = true, moveIndex = args.playedMoves ? args.playedMoves.length: 0;
    try {
        this.mGame.Load(args);
        this.mWho = this.mGame.mWho;
        this.mPlaylet.moves = args.playedMoves || [];
        this.mGame.mBoard.GenerateMoves(this.mGame);
    } catch (e) {
        valid = false;
    }
    if (args.needsAck) {
        var board = this.mGame.mBoard;
        if (valid && (board.mFinished != args.finished || board.mWinner != args.winner))
            valid = false;
        if (this.mPlaylet.options.channel) {
            if (valid)
                this.mPlaylet.options.channel.send({
                    type: "event",
                    event: "E_MOVE_ACK",
                    ok: true,
                    moveIndex: moveIndex - 1
                });
            else
                this.mPlaylet.options.channel.send({
                    type: "event",
                    event: "E_MOVE_ACK",
                    ok: false,
                    moveIndex: moveIndex - 1
                });
        } else {
            console.error("Channel is down while sending MOVE ACK");

        }
    }
    if (args.playerA && args.playerB && args.playerB.uid == this.mScope.user.uid && args.playerA.uid != this.mScope.user.uid)
        this.mViewAs =- 1;
    else
        this.mViewAs = 1;
    this.mGame.mViewAs = this.mViewAs;
    var player = 0;
    if (args.playerB && args.playerB.uid == this.mScope.user.uid)
        player =- 1;
    else if (args.playerA && args.playerA.uid == this.mScope.user.uid)
        player = 1;

    if (args.drawOffer)
        if ((args.drawOffer.by == 1 && player==-1 && args.drawOffer.denied!=-1) ||
        (args.drawOffer.by==-1 && player == 1 && args.drawOffer.denied != 1))
            this.smQueueEvent("E_OFFER_DRAW", {});
    if (this.mWidget) {
        this.mGame.GameDestroyView();
        this.mScope.attachResources(this.mGame);
        this.mGame.GameInitView();
    }
}

JoclyPSM.prototype.$startPlayTimer = function(args) {
    var which = this.mGame.mWho == 1 ? "A": "B";
    if (this.mMode == "hvsc") {
        this.mScope.timerUpdate(".jpz-playlet-player-timer-panel-" + which, {
            mode: 'forward',
            'run': true
        });
        this.mScope.timerUpdate(".pzite-player-timer-tb-" + which, {
            show: true,
            mode: 'forward',
            'run': true
        });
    }
}

JoclyPSM.prototype.$stopPlayTimer = function(args) {
    var which = this.mGame.mWho == 1 ? "A": "B";
    if (this.mMode == "hvsc") {
        this.mScope.timerUpdate(".jpz-playlet-player-timer-panel-" + which, {
            'run': false
        });
        this.mScope.timerUpdate(".pzite-player-timer-tb-" + which, {
            show: false,
            'run': false
        });
    }
}

JoclyPSM.prototype.$resetTimers = function(args) {
    this.mScope.timerUpdate(".jpz-playlet-player-timer-panel", {
        show: true,
        mode: 'static',
        time: 0
    });
    this.mScope.timerUpdate(".pzite-player-timer-tb", {
        show: false,
        mode: 'static',
        time: 0,
        short: true
    });
}

JoclyPSM.prototype.$enterNav = function(args) {
    if (this.mGame.mPlayedMoves.length > 0) {
        // if no played move, keep the current moves set
        this.mPlaylet.moves = [];
        for (var i = 0; i < this.mGame.mPlayedMoves.length; i++) {
            var move = this.mGame.mPlayedMoves[i];
            this.mPlaylet.moves.push(move);
        }
    }
    this.mPlaylet.navPlaying = false;
    this.mGame.BackTo(this.mPlaylet.historyIndex + 1, this.mPlaylet.moves);
    this.mWho = this.mGame.mWho;
    this.mGame.mBoard.GenerateMoves(this.mGame);
}

JoclyPSM.prototype.$exitNav = function(args) {
    this.mPlaylet.moves = this.mPlaylet.moves || [];
    var kept = this.mPlaylet.moves.length;
    if (args.toCurrentIndex)
        kept = this.mPlaylet.historyIndex + 1;
    this.mPlaylet.history.splice(kept, this.mPlaylet.history.length - kept);
    this.mGame.mPlayedMoves = [];
    for (var i = 0; i < kept; i++) {
        this.mGame.mPlayedMoves.push(this.mPlaylet.moves[i]);
    }
    this.mGame.BackTo(kept, this.mPlaylet.moves);
    this.mWho = this.mGame.mWho;
    this.mGame.mBoard.GenerateMoves(this.mGame);
    this.mPlaylet.moves = [];
}

JoclyPSM.prototype.$navApplyNextMove = function(args) {
    var move = this.mPlaylet.moves[++this.mPlaylet.historyIndex];
    this.lastMove = new (this.mGame.GetMoveClass())(move);
    this.oldBoard = new (this.mGame.GetBoardClass())(this.mGame);
    this.oldBoard.CopyFrom(this.mGame.mBoard);
    this.mGame.ApplyMove(this.lastMove);
}

JoclyPSM.prototype.$navMoveStart = function(args) {
    this.mPlaylet.historyIndex =- 1;
}

JoclyPSM.prototype.$navMoveEnd = function(args) {
    this.mPlaylet.historyIndex = this.mPlaylet.moves.length - 1;
}

JoclyPSM.prototype.$navMoveStep = function(args) {
    this.mPlaylet.historyIndex = Math.min(this.mPlaylet.historyIndex + 1, this.mPlaylet.moves.length - 1);
}

JoclyPSM.prototype.$navMoveFastForward = function(args) {
    this.mPlaylet.historyIndex = Math.min(this.mPlaylet.historyIndex + 4, this.mPlaylet.moves.length - 1);
}

JoclyPSM.prototype.$navMoveBack = function(args) {
    this.mPlaylet.historyIndex = Math.max(this.mPlaylet.historyIndex - 1, - 1);
}

JoclyPSM.prototype.$navMoveFastBack = function(args) {
    this.mPlaylet.historyIndex = Math.max(this.mPlaylet.historyIndex - 4, - 1);
}

JoclyPSM.prototype.$navUpdate = function(args) {
    this.mGame.BackTo(this.mPlaylet.historyIndex + 1, this.mPlaylet.moves);
    this.mWho = this.mGame.mWho;
    this.mGame.mBoard.GenerateMoves(this.mGame);
}

JoclyPSM.prototype.$navGoTo = function(args) {
    this.mPlaylet.historyIndex = Math.min(args.index, Math.max(args.index, this.mPlaylet.moves.length - 1));
}

JoclyPSM.prototype.$navPlay = function(args) {
    this.mPlaylet.navPlaying = true;
}

JoclyPSM.prototype.$navStop = function(args) {
    this.mPlaylet.navPlaying = false;
}

JoclyPSM.prototype.$autoRestart = function(args) {
    var $this = this;
    if (this.mMode == "demo") {
        setTimeout(function() {
            /*
            			if(JoclyHub.frameData && JoclyHub.frameData.onDemoOver)
            				JoclyHub.frameData.onDemoOver();
            			*/
            $this.smQueueEvent("E_RESTART", {});
        }, 6000);
    }
}

JoclyPSM.prototype.$startNav = function(args) {
    if (this.mPlaylet.features.hasNavigation) {
        this.smQueueEvent("E_NAV_IN", {});
        var $this = this;
        if (this.mPlaylet.options.autoPlay)
            setTimeout(function() {
                $this.smQueueEvent("E_V_PLAY", {});
            }, 2000);
    }
}

JoclyPSM.prototype.$loadMoves = function(args) {
    if (this.mPlaylet.options.moves) {
        this.mGame.Load({
            playedMoves: this.mPlaylet.options.moves
        });
        this.mWho = this.mGame.mWho;
        this.mGame.mBoard.GenerateMoves(this.mGame);
        this.mPlaylet.historyIndex =- 1;
    }
}

JoclyPSM.prototype.$startLive = function(args) {
    switch (this.mMode) {
    case "live":
        this.mPlaylet.options.channel.send({
            type: "event",
            event: "E_START_PREF",
            start: this.mPlaylet.options.liveStartPref || 'dont-mind',
            gameId: this.mPlaylet.options.gameId
        });
        break;
    case "liveobs":
        this.mPlaylet.options.channel.send({
            type: "event",
            event: "E_OBSERVING"
        });
        break;
    }
}

JoclyPSM.prototype.$liveSendMove = function(args) {
    if (this.mMode == "live" || this.mMode == "livetb") {
        var finished = false;
        var winner = this.mGame.GetFinished();
        if (winner)
            finished = true;

        this.mPlaylet.options.channel.send({
            type: "event",
            event: "E_MOVE",
            move: (new (this.mGame.GetMoveClass())(args)).Strip(),
            finished: finished,
            winner: winner
        });
    }
}

JoclyPSM.prototype.$turnbasedSendMove = function(args) {
    var $this = this;
    if (this.mMode == "turnbased") {
        var end = {
            finished: false,
        }
        var winner = this.mGame.GetFinished();
        if (winner) {
            end.finished = true;
            end.winner = winner;
        }
        $.ajax({
            url: this.mScope.network.connData.baseURL + "tb/api/" + this.mPlaylet.options.gameId,
            data: {
                method: "move",
                move: JSON.stringify((new (this.mGame.GetMoveClass())(args)).Strip()),
                end: JSON.stringify(end),
            },
            success: function(data) {
                if (!data.status)
                    $this.mPlaylet.alert(data.error);
            }
        });
    }
}

JoclyPSM.prototype.$liveCheckValidMove = function(args) {
    var move = args.move;
    var finished = args.finished;
    var winner = args.winner;

    var valid = false;

    if (this.mGame.IsValidMove(move)) {
        var lastMove = new (this.mGame.GetMoveClass())(move);
        var board = new (this.mGame.GetBoardClass())(this.mGame);
        board.mWho = this.mWho;
        board.CopyFrom(this.mGame.mBoard);
        board.ApplyMove(this.mGame, lastMove);
        board.mFinished = false;
        board.mWinner = JocGame.DRAW;
        board.mWho =- board.mWho;
        board.mMoves = [];
        board.GenerateMoves(this.mGame, this);
        if (board.mFinished == false) {
            this.mGame.HandleRepeat(board);
            board.Evaluate(this.mGame, true, true);
            this.mGame.UnhandleRepeat(board);
        }
        if (board.mFinished == finished) {
            if (finished == false || winner == board.mWinner)
                valid = true;
            else
                console.info("disagree on winner", "peer", winner, "self", board.mWinner);
        } else
            console.info("disagree on finish", "peer", finished, "self", board.mFinished);
    }

    if (valid) {
        this.mNextMoveExpire = new Date().getTime() + this.mUserTimeout * 1000;
        this.smQueueEvent("E_VALID_MOVE", move);
    } else {
        this.smQueueEvent("E_INVALID_MOVE", move);
    }
}

JoclyPSM.prototype.$liveSendMoveAck = function(args) {
    this.mPlaylet.options.channel.send({
        type: "event",
        event: "E_MOVE_ACK",
        ok: true,
        moveIndex: this.mGame.mPlayedMoves.length
    });
}

JoclyPSM.prototype.$liveSendMoveNack = function(args) {
    this.mPlaylet.options.channel.send({
        type: "event",
        event: "E_MOVE_ACK",
        ok: false,
        moveIndex: this.mGame.mPlayedMoves.length
    });
}

JoclyPSM.prototype.$updatePeerDetails = function(args) {
    console.log("updatePeerDetails", args);
    var playerSelf = {
        type: "self"
    };
    var playerPeer = $.extend({}, args.peer, {
        type: "player"
    });
    if (args.playingAs == "a")
        $.extend(true, this.mPlaylet.players, {
            '1': playerSelf,
            '-1': playerPeer,
        });
    else {
        $.extend(true, this.mPlaylet.players, {
            '1': playerPeer,
            '-1': playerSelf,
        });
        if (this.mPlaylet.view.switchable)
            this.smQueueEvent("E_SWITCH_VIEW", {});
    }
    if (this.mPlaylet.folks) {
        for (var i = 0; i < this.mPlaylet.folks.length; i++) {
            var folk = this.mPlaylet.folks[i];
            if (folk.oid === undefined && folk.uid == args.peer.uid) {
                this.mPlaylet.folks.splice(i, 1);
                break;
            }
        }
        this.mPlaylet.folks.push(args.peer);
    }
}

JoclyPSM.prototype.$webrtcSendPeerDetails = function(args) {
    this.mPlaylet.webrtcPeerDetails(args);
}

JoclyPSM.prototype.$obsUpdatePeerDetails = function(args) {
    $.extend(true, this.mPlaylet.players, {
        "1": $.extend({}, args.peers.playera, {
            type: "player"
        }),
        "-1": $.extend({}, args.peers.playerb, {
            type: "player"
        }),
    });
    if (this.mPlaylet.folks) {
        for (var i = this.mPlaylet.folks.length - 1; i >= 0; i--)
            if (this.mPlaylet.folks[i].oid === undefined)
                this.mPlaylet.folks.splice(i, 1);
        this.mPlaylet.folks.unshift(args.peers.playerb);
        this.mPlaylet.folks.unshift(args.peers.playera);
    }
}

JoclyPSM.prototype.$messageSelfExpired = function(args) {
    this.mScope.activity.add({
        text: this.t("table-self-timeout", {
            '@table': this.mPlaylet.id
        }),
        type: "danger",
        click: 'go("/playlet/' + this.mPlaylet.id + '")',
        show: true,
    });
    this.mEndReason = 'end-self-expired';
}

JoclyPSM.prototype.$messageSelfAckExpired = function(args) {
    this.mScope.activity.add({
        text: this.t("table-self-ack-timeout", {
            '@table': this.mPlaylet.id
        }),
        type: "danger",
        click: 'go("/playlet/' + this.mPlaylet.id + '")',
        show: true,
    });
    this.mEndReason = 'end-self-ack-expired';
}

JoclyPSM.prototype.$messagePeerExpired = function(args) {
    this.mScope.activity.add({
        text: this.t("table-peer-expired", {
            '@table': this.mPlaylet.id,
            '@player': this.mPlaylet.players[ - args.winner].name
        }),
        type: "danger",
        click: 'go("/playlet/' + this.mPlaylet.id + '")',
        show: true,
    });
    this.mEndReason = 'end-peer-expired';
}

JoclyPSM.prototype.$messagePeerAckExpired = function(args) {
    this.mScope.activity.add({
        text: this.t("table-peer-ack-expired", {
            '@table': this.mPlaylet.id,
            '@player': this.mPlaylet.players[ - args.winner].name
        }),
        type: "danger",
        click: 'go("/playlet/' + this.mPlaylet.id + '")',
        show: true,
    });
    this.mEndReason = 'end-peer-ack-expired';
}

JoclyPSM.prototype.$messageResign = function(args) {
    var text = this.t("user-resigned", {
        '@user': this.mPlaylet.players[ - args.winner].name
    });
    if (this.mPlaylet.players[ - args.winner].uid == this.mScope.user.uid)
        text = this.t("you-resigned");
    this.mScope.activity.add({
        text: text,
        type: "danger",
        click: 'go("/playlet/' + this.mPlaylet.id + '")',
        show: true,
    });
    this.mEndReason = 'end-resign';
}

JoclyPSM.prototype.$messageDraw = function(args) {
    var text = this.t("agreed-draw", {
        '@user1': this.mPlaylet.players[1].name,
        '@user2': this.mPlaylet.players[ - 1].name
    });
    this.mScope.activity.add({
        text: text,
        type: "danger",
        click: 'go("/playlet/' + this.mPlaylet.id + '")',
        show: true,
    });
    this.mEndReason = 'end-agreed-draw';
}

JoclyPSM.prototype.$messagePeersDisagreed = function(args) {
    this.mScope.activity.add({
        text: this.t("table-peers-disagreed", {
            '@table': this.mPlaylet.id
        }),
        type: "danger",
        click: 'go("/playlet/' + this.mPlaylet.id + '")',
        show: true,
    });
    this.mEndReason = 'end-peers-disagreed';
}

JoclyPSM.prototype.$messagePeerDisc = function(args) {
    this.mPlaylet.players[args.disconnected].disconnected = true;
    this.mScope.activity.add({
        text: this.t("table-peer-disc", {
            '@table': this.mPlaylet.id,
            '@player': this.mPlaylet.players[args.disconnected].name
        }),
        type: "danger",
        click: 'go("/playlet/' + this.mPlaylet.id + '")',
        show: true,
    });
    this.mEndReason = 'end-peer-disconnected';
    if (this.mPlaylet.folks) {
        for (var i = 0; i < this.mPlaylet.folks.length; i++) {
            var folk = this.mPlaylet.folks[i];
            if (folk.oid === undefined && folk.uid == this.mPlaylet.players[args.disconnected].uid) {
                this.mPlaylet.folks.splice(i, 1);
                break;
            }
        }
    }
}

JoclyPSM.prototype.$messageObsDisc = function(args) {
    this.mScope.activity.add({
        text: this.t("table-peer-disc", {
            '@table': this.mPlaylet.id,
            '@player': this.mPlaylet.players[args.disconnected].name
        }),
        type: "info",
        click: 'go("/playlet/' + this.mPlaylet.id + '")',
        show: true,
    });
}

JoclyPSM.prototype.$setForcedWinner = function(args) {
    console.log("$setForcedWinner", args);
    this.mForcedWinner = args.winner;
}

JoclyPSM.prototype.$resetForcedWinner = function(args) {
    this.mForcedWinner = 0;
}

JoclyPSM.prototype.$saveLiveMoves = function(args) {
    this.mPlaylet.moves = [];
    for (var i = 0; i < args.moves.length; i++)
        this.mPlaylet.moves.push(this.mGame.CreateMove(args.moves[i]));
    this.mGame.BackTo(this.mPlaylet.moves.length, this.mPlaylet.moves);
    this.mWho = this.mGame.mWho;
    this.mGame.mBoard.GenerateMoves(this.mGame);

}

JoclyPSM.prototype.$makeObsMove = function(args) {
    this.smQueueEvent("E_MOVE", this.mGame.CreateMove(args.move));
}

JoclyPSM.prototype.$closeNav = function(args) {
    this.mPlaylet.hasNavigation = false;
}

JoclyPSM.prototype.$turnbasedMove = function(args) {
    if (args.movecount == this.mGame.mPlayedMoves.length) {
        this.mPlaylet.options.turnbasedTimeout = args.timeout;
        this.smQueueEvent("E_MOVE", this.mGame.CreateMove(args.move));
    }
}

JoclyPSM.prototype.$startTurnbased = function(args) {
    if (this.mMode == "turnbased" && this.mPlaylet.players[ - 1].uid == this.mScope.user.userId) {
        if (this.mPlaylet.view.switchable)
            this.smQueueEvent("E_SWITCH_VIEW", {});
    }
}

JoclyPSM.prototype.$notifyRestart = function(args) {}

JoclyPSM.prototype.$turnbasedHumanTurnEnd = function(args) {}

JoclyPSM.prototype.$invalidMoveError = function(args) {
    var errorMessage = args.errorMessage ?
    this.mScope.t('invalid-move-error-arg', {
        '@error': args.errorMessage
    }):
    this.mScope.t('invalid-move-error');
    this.mPlaylet.alert(errorMessage);
}

JoclyPSM.prototype.$initDatabaseData = function(args) {
    this.mMoveDatabase = {
        "1": {
            inUse: true,
            noMatchCount: 0,
        },
        "-1": {
            inUse: true,
            noMatchCount: 0,
        },
    };
}


JoclyPSM.prototype.$clearLoading = function(args) {}

JoclyPSM.prototype.$setWidget = function(args) {
    if (args.deleteWidget) {
        this.mWidget = null;
        if (this.mGame) {
            this.mGame.mWidget = null;
        }
    } else if (args.widget) {
        this.mWidget = args.widget;
        if (this.mGame)
            this.mGame.mWidget = args.widget;
    }
}

JoclyPSM.prototype.$close = function(args) {
    if (this.mGame)
        this.mGame.CloseView();
    this.smPause();
}

JoclyPSM.prototype.$clearProgress = function(args) {
    this.mPlaylet.players[this.mWho].progress = 0;
}

JoclyPSM.prototype.$notifySelfTurn = function(args) {
    this.mScope.activity.add({
        text: this.t("table-self-turn", {
            '@table': this.mPlaylet.id
        }),
        type: "info",
        click: 'go("/playlet/' + this.mPlaylet.id + '")',
        show: this.mScope.playletList.current != this.mPlaylet.id,
    });
}

JoclyPSM.prototype.$notifyCompTurn = function(args) {
    if (this.mMode != "demo")
        this.mScope.activity.add({
            text: this.t("table-comp-turn", {
                '@table': this.mPlaylet.id
            }),
            type: "info",
            click: 'go("/playlet/' + this.mPlaylet.id + '")',
        });
}

JoclyPSM.prototype.$notifyPeerTurn = function(args) {
    if (this.mMode == "live" || this.mMode == "turnbased")
        this.mScope.activity.add({
            text: this.t("table-peer-turn", {
                '@table': this.mPlaylet.id,
                '@peer': this.mPlaylet.players[this.mWho].name
            }),
            type: "info",
            click: 'go("/playlet/' + this.mPlaylet.id + '")',
            show: this.mScope.playletList.current != this.mPlaylet.id,
        });
}

JoclyPSM.prototype.$updateTimers = function(args) {
    if (args.remaining !== undefined) {
        var who = this.mGame.mWho == 1 ? "A": "B";
        var other = this.mGame.mWho == 1 ? "B": "A";
        this.mScope.timerUpdate(".jpz-playlet-player-timer-panel-" + who, {
            mode: 'countdown',
            time: args.expiry[this.mGame.mWho] + this.mScope.serverTimeDiff - Date.now(),
            run: true,
        });
        this.mScope.timerUpdate(".jpz-playlet-player-timer-panel-" + other, {
            mode: 'static',
            time: args.remaining[ - this.mGame.mWho]
        });
        this.mScope.timerUpdate(".pzite-player-timer-tb-" + who, {
            show: true,
            mode: 'countdown',
            time: args.expiry[this.mGame.mWho] + this.mScope.serverTimeDiff - Date.now(),
            run: true,
        });
        this.mScope.timerUpdate(".pzite-player-timer-tb-" + other, {
            show: false,
            mode: 'static',
        });
    }
}

JoclyPSM.prototype.$stopNavImportGame = function(args) {
    this.mPlaylet.navPlaying = false;
    this.smQueueEvent("E_DO_IMPORT", args);
}

JoclyPSM.prototype.$importGame = function(args) {
    console.log("importGame", args);
    var aGame = this.mGame;
    if (args.initial && (!aGame.mInitialString || aGame.mInitialString != args.initial)) {
        console.log("importGame", "initialString changed");
        if (aGame.Import === undefined) {
            this.mScope.alert({
                title: this.mScope.t('error'),
                text: this.mScope.t('embed.import-not-supported'),
            });
            //this.mScope.go('/splash');
            return;
        }
        var importResult = aGame.Import(args.format, args.initial);
        if (!importResult.status) {
            var error = this.mScope.t('embed.import-error');
            switch (importResult.error) {
            case 'parse':
                error = this.mScope.t('embed.parse-error');
                break;
            case 'unsupported':
                error = this.mScope.t('embed.unsupported-format');
                break;
            }
            this.mScope.alert({
                title: this.mScope.t('error'),
                text: error,
            });
            return;
        }
        aGame.mInitial = importResult.initial;
        aGame.InitGame();
        aGame.mInitialString = args.initial;
        this.mPlaylet.players[aGame.mWho].state = "playing-nav";
        this.mPlaylet.players[ - aGame.mWho].state = "normal";
        aGame.mImportedMoves = null;
        this.mPlayedMoves = [];
        this.mPlaylet.startingPlayer = aGame.mInitial.turn || 1;
    } else if (!args.initial) {
        aGame.mInitial = null;
        aGame.mInitialString = null;
        this.mPlaylet.startingPlayer = 1;
    }

    aGame.mBoard = new (aGame.GetBoardClass())(aGame);
    if (aGame.mBoard.InitialPosition)
        aGame.mBoard.InitialPosition(aGame);
    aGame.mBoard.mMoves = [];
    aGame.SetWho(1);
    if (aGame.mInitial)
        aGame.SetWho(aGame.mInitial.turn || 1);

    if (!aGame.mImportedMoves)
        aGame.mImportedMoves = [];

    for (var index = 0; index < args.playedMoves.length; index++) {
        var matching = false;
        if (index < aGame.mImportedMoves.length && aGame.mImportedMoves[index].str == args.playedMoves[index]) {
            aGame.mPlayedMoves[index] = aGame.mImportedMoves[index].move;
            matching = true;
        }
        if (!matching) {
            aGame.mBoard.GenerateMoveObjects(aGame);
            var allMoves = {};
            aGame.mBoard.mMoves.forEach(function(move) {
                var moveStr = aGame.mBoard.CompactMoveString(aGame, move, allMoves);
                move.compact = moveStr;
            });
            var move = aGame.GetBestMatchingMove(args.playedMoves[index], aGame.mBoard.mMoves);
            if (!move) {
                var prettyMoves = [];
                aGame.mBoard.mMoves.forEach(function(m) {
                    prettyMoves.push(m.ToString());
                })
                console.warn("Cannot resolve unique for imported move", args.playedMoves[index], "in", prettyMoves.join(','));
                aGame.mImportedMoves = aGame.mImportedMoves.slice(0, index);
                return;
            }
            aGame.mPlayedMoves[index] = move;
            aGame.mImportedMoves[index] = {
                move: move,
                str: args.playedMoves[index],
            }
        }
        aGame.mBoard.ApplyMove(aGame, aGame.mPlayedMoves[index]);
        aGame.mBoard.mMoves = [];
        aGame.HandleRepeat(aGame.mBoard);
        aGame.SetWho( - aGame.mWho);
    }
    aGame.mPlayedMoves = aGame.mPlayedMoves.slice(0, index);
    aGame.mImportedMoves = aGame.mImportedMoves.slice(0, index);
    this.mPlaylet.moves = [];
    for (var i = 0; i < aGame.mPlayedMoves.length; i++) {
        var move = aGame.mPlayedMoves[i];
        this.mPlaylet.moves.push(move);
    }
    this.mPlaylet.mHistoryIndex = aGame.mPlayedMoves.length - 1;
    this.smQueueEvent("E_NAV_GOTO", {
        index: args.current !== undefined ? args.current - 1: - 1
    });
    if (args.playMove)
        this.smQueueEvent("E_V_STEP", {});
}

JoclyPSM.prototype.$xdview = function(args) {
    if (this.mGame.mWidget) {
        if (this.mGame.xdExternalCommand)
            this.mGame.xdExternalCommand(args, this.mScope);
        else
            console.warn("view is not xdview, xdview call ignored", args);
    } else
        console.warn("widget not set, xdview call ignored", args);
}

JoclyPSM.prototype.$selfMoveFromRemote = function(args) {
    this.smQueueEvent("E_MOVE", args.move);
}

JoclyPSM.prototype.$messageOfferDraw = function(args) {
    this.mPlaylet.drawOfferDialog(args);
}

JoclyPSM.prototype.$sendLocalMedia = function(args) {
    var localMedia = this.mPlaylet.hasLocalMedia();
    this.mPlaylet.localMedia({
        on: localMedia
    });
}

JoclyPSM.prototype.$clearWinner = function(args) {
    this.mWinner = 0;
    this.mForcedWinner = 0;
}

JoclyPSM.prototype.$notifySelfMoving = function(args) {
    this.mScope.sendEmbed({
        type: "self-turn",
        on: true,
    });
}

JoclyPSM.prototype.$notifySelfMovingEnd = function(args) {
    this.mScope.sendEmbed({
        type: "self-turn",
        on: false,
    });
};
/*
 * Copyright (c) 2013 - Jocly - www.jocly.com - All rights reserved
 */

JoclyUCT = {};

(function() {

    function Node(parent, who) {
        this.visits = 1; // number of time the node has been visited
        this.children = null; // node children if any
        this.who = who; // 1 = first player, 2 = second player
        this.parents = []; // parent nodes
        if (parent)
            this.parents.push(parent);
        this.known = false; // true if all the node and nodes below have been expanded and all leaves are terminal
        this.evaluation = 0; // the current minimax value
        this.staticEvalSum = 0; // the sum of the normalized playouts evaluations
        this.staticEvalCount = 0; // the number of playouts evaluations
        this.depth = parent ? parent.depth + 1 : 0; // the node depth
    }

    Node.prototype = {
        addParent: function(parent) {
            this.parents.push(parent);
            if (parent.depth + 1 < this.depth)
                this.depth = parent.depth + 1;
        }
    }

    var winnerMap = {
        // convert from Jocly convention (draw==2)
        "-1": - 1,
        1: 1,
        2: 0,
        0: 0
    }

    JoclyUCT.startMachine = function(aGame, aOptions) {
        var loopCount = 0;
        var nodeCount = 0;
        var redundantNodeCount = 0;
        var poDur = 0, poCount = 0; // playout stats
        var skippedAlphaBeta = 0; // alpha-beta stats
        var maxDepth = 0;

        var uctParams = {
            minVisitsExpand: aOptions.level.minVisitsExpand || 1,
            playoutSpread: aOptions.level.playoutSpread || 2,
            playoutDepth: (aOptions.level.playoutDepth !== undefined) ? aOptions.level.playoutDepth: 0,
            c: (aOptions.level.c !== undefined) ? aOptions.level.c: .3,
            playoutCeil: (aOptions.level.playoutCeil !== undefined) ? aOptions.level.playoutCeil: 0,
            log: aOptions.level.log ? true: false,
            maxDuration: (aOptions.level.maxDuration !== undefined) ? aOptions.level.maxDuration: 2,
            maxLoops: (aOptions.level.maxLoops !== undefined) ? aOptions.level.maxLoops: 0,
            maxNodes: (aOptions.level.maxNodes !== undefined) ? aOptions.level.maxNodes: 0,
            showMinimaxTree: aOptions.level.showMinimaxTree ? true: false,
            showBestLine: aOptions.level.showBestLine ? true: false,
            ignoreLeaf: aOptions.level.ignoreLeaf === undefined ? false: aOptions.level.ignoreLeaf,
            propagateMultiVisits: aOptions.level.propagateMultiVisits === undefined ? true: aOptions.level.propagateMultiVisits,
            propagation: aOptions.level.propagation === undefined ? "mixed": aOptions.level.propagation,
            useDepthWeights: aOptions.level.useDepthWeights === undefined ? false: aOptions.level.useDepthWeights,
            productRatio: aOptions.level.productRatio === undefined ? 0: aOptions.level.productRatio,
            useAlphaBeta: aOptions.level.useAlphaBeta === undefined ? false: aOptions.level.useAlphaBeta,
            uncertaintyFactor: aOptions.level.uncertaintyFactor === undefined ? 0: aOptions.level.uncertaintyFactor,
            directVisits: aOptions.level.directVisits === undefined ? true: aOptions.level.directVisits,
            distributeEval: aOptions.level.distributeEval === undefined ? true: aOptions.level.distributeEval,
            pickMove: aOptions.level.pickMove === undefined ? "besteval": aOptions.level.pickMove,
            // or maxvisits
            debugRawEval: aOptions.level.debugRawEval === undefined ? false: aOptions.level.debugRawEval,
        };
        var uctNodes = {};
        var signatures; // the array of visited board signatures

        if (uctParams.log)
            console.log("Running UCT AI - ", aOptions.level.label, "- Player", aGame.mWho == 1 ? "A" : "B");

        /*
        		 * Normalize evaluations to get -1<eval<1
        		 * Handle negative and positive evaluations separately so 0 remains 0
        		 */
        var evalMapPositive = {
            v: 0,
            // evaluation original value
            l: null,
            // "less" branch (for evaluations < v)
            m: {
                // "more" branch (for evaluations > v)
                v: Number.MAX_VALUE,
                l: null,
                m: null,
            },
        }
        var evalMapNegative = $.extend(true, {}, evalMapPositive); // deep copy for the initial negative map

        function NormalizeEval(evaluation) {
            var evalNode = evalMapPositive;
            var negative = false;
            var normEval = 0, step = 1;
            if (evaluation == 0)
                return 0;
            if (evaluation < 0) {
                evaluation =- evaluation;
                evalNode = evalMapNegative;
                negative = true;
            }
            while (true) {
                if (evaluation > evalNode.v) {
                    normEval += step;
                    if (!evalNode.m) {
                        evalNode.m = {
                            v: evaluation,
                            l: null,
                            m: null
                        }
                    }
                    evalNode = evalNode.m;
                } else if (evaluation < evalNode.v) {
                    normEval -= step;
                    if (!evalNode.l) {
                        evalNode.l = {
                            v: evaluation,
                            l: null,
                            m: null
                        }
                    }
                    evalNode = evalNode.l;
                } else {
                    // matching evaluation
                    break;
                }
                step = step / 2;
            }
            if (negative)
                normEval =- normEval;
            return normEval;
        }

        /*
        		 * Best evaluation (minimax)
        		 */
        function GetMinimaxEval(node, children) {
            var evaluation = undefined;
            for (var i = 0; i < children.length; i++) {
                var node1 = children[i];
                if (evaluation === undefined || node1.evaluation * node1.who > evaluation * node1.who)
                    evaluation = node1.evaluation;
            }
            return evaluation;
        }
        /*
        		 * Minus worse opponent evaluation
        		 */
        function GetMaximinEval(node, children) {
            var evaluation = undefined;
            for (var i = 0; i < children.length; i++) {
                var node1 = children[i];
                if (evaluation === undefined || node1.evaluation * node1.who < evaluation * node1.who)
                    evaluation = node1.evaluation;
            }
            return - evaluation;
        }
        /*
        		 * Probability product evaluation
        		 */
        function GetProductEval(node, children) {
            var value = 1;
            for (var i = 0; i < children.length; i++) {
                var node1 = children[i];
                value1 = (node1.evaluation + 1) / 2;
                if (node.who == 1)
                    value*=1 - node1.evaluation;
                else
                    value*=node1.evaluation;
            }
            if (node.who == 1)
                return (1 - value) * 2 - 1;
            else
                return value * 2 - 1;
        }

        function PropagateEvalParent(node, visits, visited) {
            if (aGame.mOptions.uctTransposition && !aGame.mOptions.uctIgnoreLoop && (node.sign in visited))
                return;
            var children = [];
            if (uctParams.ignoreLeaf) {
                var hasExpandedChildren = false;
                for (var i = 0; i < node.children.length; i++)
                    if (node.children[i].n.children) {
                        hasExpandedChildren = true;
                        break;
                    }
                if (hasExpandedChildren) {
                    for (var i = 0; i < node.children.length; i++) {
                        var node1 = node.children[i].n;
                        if (node1.known || node1.children)
                            children.push(node1);
                    }
                }
            }
            if (children.length == 0)
                for (var i = 0; i < node.children.length; i++)
                    children.push(node.children[i].n);

            var evaluation;
            switch (uctParams.propagation) {
            case "maximin":
                evaluation = GetMaximinEval(node, children);
                break;
            case "minimax2min-avg":
                var evaluation1 = GetMaximinEval(node, children);
                var evaluation2 = GetMinimaxEval(node, children);
                evaluation = (evaluation1 + evaluation2) / 2;
                break;
            case "minimax2min-best":
                var evaluation1 = GetMaximinEval(node, children);
                var evaluation2 = GetMinimaxEval(node, children);
                if (node.who == 1)
                    evaluation = Math.max(evaluation1, evaluation2);
                else
                    evaluation = Math.min(evaluation1, evaluation2);
                break;
            case "product":
                evaluation = GetPropabilityProductEval(node, children);
                break;
            case "minimax":
            case "mixed":
            default:
                evaluation = GetMinimaxEval(node, children);
                if (uctParams.propagation == "mixed" && uctParams.productRatio > 0) {
                    evaluation2 = GetProductEval(node, children);
                    evaluation = uctParams.productRatio * evaluation2 + (1 - uctParams.productRatio) * evaluation;
                }
                if (uctParams.useDepthWeights)
                    evaluation = WeightEval(evaluation, node.depth + 1);
            }
            if (uctParams.uncertaintyFactor) // tend to do good things now rather than later
            evaluation*=1 - Math.pow(10, - uctParams.uncertaintyFactor)
                * Math.log(node.depth + 1);
            if (node.evaluation !== evaluation) {
                node.evaluation = evaluation;
                if (!uctParams.directVisits)
                    node.visits += visits;
                PropagateEval(node, visits, visited);
            } else if (!uctParams.directVisits)
                PropagateVisits(node, visits, visited);
        }
        function PropagateEval(node, visits, visited) {
            if (node.parents.length == 0) // root node: stop here
            return;
            if (aGame.mOptions.uctTransposition && !aGame.mOptions.uctIgnoreLoop) {
                if (!visited)
                    visited = {};
                visited[node.sign] = true;
            }
            for (var i = 0; i < node.parents.length; i++) {
                var parent = node.parents[i];
                if (uctParams.useAlphaBeta) {
                    // sort the parent children so alpha-beta will be more efficient
                    parent.children.sort(function(c1, c2) {
                        return (c2.evaluation - c1.evaluation) * node.who;
                    });
                }
                PropagateEvalParent(parent, visits, visited);
            }
        }

        function PropagateVisits(node, visits, visited) {
            if (node.parents.length == 0) // root node: stop here
            return;
            if (aGame.mOptions.uctTransposition && !aGame.mOptions.uctIgnoreLoop) {
                if (!visited)
                    visited = {};
                visited[node.sign] = true;
            }
            for (var i = 0; i < node.parents.length; i++) {
                var parent = node.parents[i];
                if (!(parent.sign in visited)) {
                    parent.visits += visits;
                    visited[parent.sign] = true;
                    PropagateVisits(parent, visits, visited);
                }
            }
        }

        /*
        		 * Propagates known boolean up
        		 */
        function PropagateKnownParent(node, visited) {
            if (aGame.mOptions.uctTransposition && !aGame.mOptions.uctIgnoreLoop && (node.sign in visited))
                return;
            var known = true;
            for (var i = 0; i < node.children.length; i++) {
                var node1 = node.children[i].n;
                if (node1.known == false) {
                    known = false;
                    break;
                }
            }
            if (known == true) {
                node.known = true;
                PropagateKnown(node, visited);
            }
        }
        function PropagateKnown(node, visited) {
            if (node.known == false || node.parents.length == 0)
                return;
            if (aGame.mOptions.uctTransposition && !aGame.mOptions.uctIgnoreLoop) {
                if (!visited)
                    visited = {};
                visited[node.sign] = true;
            }
            for (var i = 0; i < node.parents.length; i++)
                PropagateKnownParent(node.parents[i], visited);
        }

        /*
        		 * A simple 32 bits integer transformation function, so that zobrist board signatures can be XORed without side effect
        		 */
        function TransformInteger(v0) {
            var ib = 1;
            var v = 0;
            for (var i = 0; i < 32; i++) {
                var b = (v0>>>i) & 1;
                if (ib)
                    v = (v<<1) | b;
                else
                    v = (v<<1) | (1 - b);
                ib = b;
            }
            return v;
        }

        /*
        		 * Runs an iteration
        		 */
        function Step() {
            loopCount++;

            // Select
            var board = new (aGame.GetBoardClass())(aGame);
            board.CopyFrom(aGame.mBoard);

            var pathSign = 0; // keep track of the boards we've been through (order doesn't matter)
            var node = rootNode;
            var depth = 0;
            var descendMaxDepth = 0;
            var moves = [];
            var nodePath = [];
            var parentVisits = loopCount;
            var visited = {};
            var alpha =- 2;
            var beta = 2;
            while (true) {
                nodePath.push(node);
                if (depth > descendMaxDepth) {
                    descendMaxDepth = depth;
                }
                if (node.children === null)
                    break;
                var candidateChildren;
                if (uctParams.useAlphaBeta) {
                    candidateChildren = [];
                    for (var i = 0; i < node.children.length; i++) {
                        var child1 = node.children[i];
                        var node1 = child1.n;
                        candidateChildren.push(child1);
                        if (node1.who == 1 && // maximizing player
                        node1.evaluation > alpha)
                            alpha = node1.evaluation;
                        if (node1.who==-1 && // minimizing player
                        node1.evaluation < beta)
                            beta = node1.evaluation;
                        if (beta < alpha) {
                            skippedAlphaBeta += node.children.length - 1 - i;
                            //console.log("alpha-beta skipped",node.children.length-1-i,"nodes");
                            break;
                        }
                    }

                } else
                    candidateChildren = node.children;
                if (aGame.mOptions.uctTransposition && !aGame.mOptions.uctIgnoreLoop) {
                    var candidateChildren0 = [];
                    for (var i = 0; i < candidateChildren.length; i++)
                        if (!(candidateChildren[i].n.sign in visited))
                            candidateChildren0.push(candidateChildren[i]);
                    candidateChildren = candidateChildren0;
                }
                var bestChildren = [], bestUCB;
                var parentVisitsLog;
                if (uctParams.directVisits)
                    parentVisitsLog = Math.log(parentVisits);
                else
                    parentVisitsLog = Math.log(node.visits);

                function PickBestChildren() {
                    for (var i = 0; i < candidateChildren.length; i++) {
                        var child1 = candidateChildren[i];
                        var node1 = child1.n;
                        if (node1.known)
                            continue;
                        var value = (node1.evaluation * node1.who + 1) / 2; // ensures value between 0 and 1
                        var ucb;
                        if (uctParams.directVisits)
                            ucb = value + uctParams.c * Math.sqrt(parentVisitsLog / child1.f);
                        else
                            ucb = value + uctParams.c * Math.sqrt(parentVisitsLog / node1.visits);
                        if (bestChildren.length == 0 || ucb >= bestUCB) {
                            if (bestChildren.length > 0 && ucb > bestUCB)
                                bestChildren = [];
                            bestUCB = ucb;
                            bestChildren.push(child1);
                        }
                    }
                }

                /*
                				 * redistribute evaluations uniformly between 0 and 1 (excluded)
                				 */
                function PickBestChildrenDistributeEval() {

                    var childrenDE = {};
                    var values = [];
                    for (var i = 0; i < candidateChildren.length; i++) {
                        var child1 = candidateChildren[i];
                        var node1 = child1.n;
                        if (node1.known)
                            continue;
                        var value = (node1.evaluation * node1.who + 1) / 2; // ensures value between 0 and 1
                        if (childrenDE[value] === undefined) {
                            childrenDE[value] = [];
                            values.push(value);
                        }
                        childrenDE[value].push(child1);
                    }
                    values.sort(function(v1, v2) {
                        return v1 - v2;
                    });
                    var step = 1 / (values.length + 1);
                    var index = 0;
                    for (var vi = 0; vi < values.length; vi++) {
                        index++;
                        var value0 = values[vi];
                        var children = childrenDE[value0];
                        var value1 = step * index;
                        for (var i = 0; i < children.length; i++) {
                            var child1 = children[i];
                            var node1 = child1.n;
                            var ucb;
                            if (uctParams.directVisits)
                                ucb = value1 + uctParams.c * Math.sqrt(parentVisitsLog / child1.f);
                            else
                                ucb = value1 + uctParams.c * Math.sqrt(parentVisitsLog / node1.visits);
                            if (bestChildren.length == 0 || ucb >= bestUCB) {
                                if (bestChildren.length > 0 && ucb > bestUCB)
                                    bestChildren = [];
                                bestUCB = ucb;
                                bestChildren.push(child1);
                            }
                        }
                    }
                }

                if (uctParams.distributeEval)
                    PickBestChildrenDistributeEval();
                else
                    PickBestChildren()

                if (bestChildren.length == 0) // all child nodes are known
                return;
                var child = bestChildren[Math.floor(Math.random() * bestChildren.length)];
                if (uctParams.directVisits) {
                    child.f++;
                    parentVisits = child.f;
                }
                node = child.n;
                if (aGame.mOptions.uctTransposition && !aGame.mOptions.uctIgnoreLoop)
                    visited[node.sign] = 1;
                depth++;
                moves.push(child.m);
                board.ApplyMove(aGame, child.m);
                aGame.AddVisit(board);
                board.mMoves = [];
                signatures.push(board.GetSignature());
                if (aGame.mOptions.uctTransposition == "states")
                    pathSign^=TransformInteger(board.GetSignature()); // consider the states we have been through but not their order
                board.mWho =- board.mWho;
            }

            // Expand
            if (node == rootNode || node.visits >= uctParams.minVisitsExpand) {
                if (!board.mMoves || board.mMoves.length == 0)
                    board.GenerateMoves(aGame);
                if (board.mFinished) {
                    // in some game implementations, ending is detected while generating the moves
                    node.known = true;
                    node.evaluation = winnerMap[board.mWinner];
                    PropagateKnown(node);
                } else {
                    node.children = [];
                    var bestEval = undefined;
                    var known = true;
                    for (var i = 0; i < board.mMoves.length; i++) {
                        var move = board.mMoves[i];
                        var signatures1 = [];
                        var board1 = new (aGame.GetBoardClass())(aGame);
                        board1.CopyFrom(board);
                        board1.ApplyMove(aGame, move);
                        aGame.AddVisit(board1);
                        board1.mMoves = [];
                        board1.mWho =- board1.mWho;
                        if (depth > maxDepth)
                            maxDepth = depth;
                        var signature = board1.GetSignature();
                        signatures1.push(signature);
                        var sign1;
                        if (aGame.mOptions.uctTransposition == "states") {
                            sign1 = pathSign^signature; // board signature is not transformed to differentiate the leaf board
                            sign1^=depth; // depth in signature
                        } else if (aGame.mOptions.uctTransposition == "state")
                            sign1 = signature; // only final state counts
                        var node1 = null;
                        if (aGame.mOptions.uctTransposition)
                            node1 = uctNodes[sign1];
                        if (!node1) {
                            node1 = new Node(node, - node.who);
                            nodeCount++;
                            if (aGame.mOptions.uctTransposition) {
                                uctNodes[sign1] = node1;
                                node1.sign = sign1;
                            }
                            board1.Evaluate(aGame);
                            if (board1.mFinished) {
                                node1.known = true;
                                node1.evaluation = winnerMap[board1.mWinner]; // 1, -1 or 0
                            } else {
                                if (isNaN(board1.mEvaluation))
                                    console.error("Evaluation in not a number !", board1.mEvaluation);
                                node1.evaluation = Playout(node1, board1, signatures1);
                            }
                            node1.staticEvalSum = node1.evaluation;
                            node1.staticEvalCount = 1;
                        } else {
                            redundantNodeCount++;
                            node1.addParent(node);
                        }
                        if (node1.known == false)
                            known = false;
                        var nodeChain = {
                            n: node1,
                            m: (new (aGame.GetMoveClass())(move)).Strip(),
                            // Save memory by stripping the stored move
                        }
                        if (uctParams.directVisits)
                            nodeChain.f = 1;
                        node.children.push(nodeChain);
                        var eval = node1.evaluation * node1.who;
                        if (bestEval === undefined || eval > bestEval * node1.who)
                            bestEval = node1.evaluation;
                        for (var j = 0; j < signatures1.length; j++)
                            aGame.RemoveVisit(null, signatures1[j]);
                    }
                    node.evaluation = bestEval;
                    PropagateEval(node, uctParams.propagateMultiVisits ? board.mMoves.length : 1);
                    if (uctParams.directVisits)
                        for (var i = 0; i < nodePath.length; i++)
                            nodePath[i].visits += uctParams.propagateMultiVisits ? board.mMoves.length : 1;

                    if (known) {
                        node.known = true;
                        PropagateKnown(node);
                    }
                }
                return;
            }
            if (node.known)
                return;

            // Simulate
            function Playout(node, board, signatures) {
                var result = null;
                var t0 = Date.now();
                for (var depth = 0; depth < uctParams.playoutDepth || board.mWho == uctParams.playoutCeil * rootNode.who; depth++) {
                    if (!board.mMoves || board.mMoves.length == 0)
                        board.GenerateMoves(aGame);
                    if (board.mFinished) {
                        result = {
                            finished: true,
                            winner: winnerMap[board.mWinner],
                        };
                        break;
                    }
                    var weightedMoves = [];
                    for (var i = 0; i < board.mMoves.length; i++) {
                        var board1 = new (aGame.GetBoardClass())(aGame);
                        board1.CopyFrom(board);
                        board1.ApplyMove(aGame, board.mMoves[i]);
                        aGame.AddVisit(board1);
                        board1.mMoves = [];
                        board1.Evaluate(aGame);
                        var evaluation = board1.mEvaluation;
                        if (board1.mFinished) {
                            if (board1.mWinner == 1)
                                evaluation = Number.MAX_VALUE;
                            else if (board1.mWinner==-1)
                                evaluation =- Number.MAX_VALUE;
                            else
                                evaluation = 0;
                        } else if (isNaN(board1.mEvaluation))
                            console.error("Evaluation in not a number !");

                        weightedMoves.push({
                            move: board.mMoves[i],
                            evaluation: evaluation,
                            board: board1,
                        });
                        aGame.RemoveVisit(board1);
                    }
                    weightedMoves.sort(function(a1, a2) {
                        var ev1 = a1.evaluation * board.mWho;
                        var ev2 = a2.evaluation * board.mWho;
                        return ev2 - ev1;
                    });

                    /*
                    					 * Pick the next move in the playout with a preference for the moves that seem the best.
                    					 * For instance, with playoutSpread=2, the probability weight to pick the best move is 1/2,
                    					 * the second best move 1/4, third best 1/8, ...
                    					 * If several moves have the same quality, they have the same probability.
                    					 */
                    var n = weightedMoves.length;
                    var r = 1 / uctParams.playoutSpread;
                    var max = (1 - Math.pow(r, n + 1)) / (1 - r) - 1;
                    var rnd = Math.random() * max;
                    var equalMoves, lastEval = undefined, cursor = 0, reached = false;
                    for (var i = 0; i < n; i++) {
                        var wMove = weightedMoves[i];
                        var ev = wMove.evaluation;
                        if (ev !== lastEval) {
                            if (reached) {
                                break;
                            } else {
                                equalMoves = [wMove];
                                lastEval = ev;
                            }
                        } else {
                            equalMoves.push(wMove);
                        }
                        cursor += Math.pow(r, i + 1);
                        if (cursor >= rnd)
                            reached = true;
                    }
                    var pickedMove = equalMoves[Math.floor(Math.random() * equalMoves.length)];

                    board = pickedMove.board;
                    aGame.AddVisit(board);
                    signatures.push(board.GetSignature()); // remember the board state signature so it can be removed later
                    board.mWho =- board.mWho;
                    if (board.mFinished) {
                        result = {
                            finished: true,
                            winner: winnerMap[board.mWinner],
                        };
                        break;
                    }
                }
                if (result === null) {
                    result = {
                        finished: false,
                        eval: board.mEvaluation
                    }
                }

                // update stats
                poDur += Date.now() - t0;
                poCount++;

                var nodeEval;
                if (result.finished)
                    nodeEval = result.winner; // 1, -1 or 0
                else {
                    if (uctParams.debugRawEval)
                        node.rawEval = result.eval;
                    var normEval = NormalizeEval(result.eval);
                    UpdateDepthEval(normEval, node.depth);
                    nodeEval = normEval;
                }
                return nodeEval;
            }
            var evaluation = Playout(node, board, signatures);
            node.staticEvalSum += evaluation;
            node.staticEvalCount++;
            node.evaluation = node.staticEvalSum / node.staticEvalCount; // averaging normalized evaluations might not be the best way to get an accurate result
            PropagateEval(node, 1);
            if (uctParams.directVisits)
                for (var i = 0; i < nodePath.length; i++)
                    nodePath[i].visits++;
        }

        var evalWeights = [];
        /*
        		 * Update the evaluation weight for the given depth in order to balance evaluation propagation
        		 */
        function UpdateDepthEval(evaluation, depth) {
            while (evalWeights.length <= depth)
                evalWeights.push({
                    count: 0,
                    sum: 0
                });
            var weight = evalWeights[depth];
            weight.sum += evaluation;
            weight.count++;
        }
        /*
        		 *
        		 */
        function WeightEval(evaluation, depth) {
            var weight = evalWeights[depth];
            if (weight === undefined) {
                // why does this happen, even if very rare ? :(
                while (evalWeights.length < depth)
                    evalWeights.push({
                        count: 0,
                        sum: 0
                    });
                evalWeights.push({
                    count: 1,
                    sum: evaluation
                });
                return evaluation;
            }
            var average = weight.count > 0 ? weight.sum / weight.count: 0;
            if (evaluation > average) {
                evaluation = (evaluation - average) / (1 - average);
            } else if (evaluation < average) {
                evaluation =- (average - evaluation) / (average + 1);
            }
            return evaluation;
        }

        if (aGame.mBoard.mMoves.length == 0)
            aGame.mBoard.GenerateMoves(aGame);
        if (aGame.mBoard.mMoves.length == 1) {
            // only one possible move: pick it
            aGame.mBestMoves = [aGame.mBoard.mMoves[0]];
            JocUtil.schedule(aGame, "Done", {});
            return;
        }
        if (aGame.mBoard.mMoves.length == 0) {
            console.error("No move available", aGame);
            debugger;
        }
        var rootNode = new Node(null, - aGame.mWho);
        nodeCount++;
        if (aGame.mOptions.uctTransposition)
            uctNodes[aGame.mBoard.GetSignature()] = rootNode;

        var t0 = Date.now();
        var lastProgressPercent =- 1;
        function Run() {
            if (aGame.mAborted) {
                aGame.mAbortCallback.call(aGame);
                return;
            }
            var now = Date.now();
            var progressPercent = 0;
            if (uctParams.maxDuration > 0)
                progressPercent = Math.round(100 * (now - t0) / (uctParams.maxDuration * 1000));
            if (uctParams.maxLoops > 0)
                progressPercent = Math.max(progressPercent, 100 * loopCount / uctParams.maxLoops);
            if (uctParams.maxNodes > 0)
                progressPercent = Math.max(progressPercent, 100 * nodeCount / uctParams.maxNodes);
            if (progressPercent != lastProgressPercent) {
                lastProgressPercent = progressPercent;
                if (aGame.mProgressCallback)
                    aGame.mProgressCallback(progressPercent);
            }
            if (!rootNode.children || (rootNode.known == false &&
            (uctParams.maxDuration <= 0 || now < uctParams.maxDuration * 1000 + t0) &&
            (uctParams.maxLoops <= 0 || loopCount < uctParams.maxLoops) &&
            (uctParams.maxNodes <= 0 || nodeCount < uctParams.maxNodes)
            )) {
                do {
                    signatures = [];
                    try {
                        Step();
                    } catch (e) {
                        console.error("UCT step", e);
                        debugger;
                    }
                    for (var i = 0; i < signatures.length; i++)
                        aGame.RemoveVisit(null, signatures[i]);
                }
                while (Date.now() - 100 < now);
                setTimeout(Run, 0);
            } else {
                if (uctParams.log) {
                    ReportStats(rootNode);
                }

                var bestEval = undefined;
                aGame.mBestMoves = [];
                if (uctParams.pickMove == "maxvisits" && uctParams.directVisits) {
                    for (var i = 0; i < rootNode.children.length; i++) {
                        var child = rootNode.children[i];
                        var node = child.n;
                        if (node.evaluation == node.who) {
                            aGame.mBestMoves.push(child.m);
                        }
                    }
                    if (aGame.mBestMoves.length == 0) {
                        for (var i = 0; i < rootNode.children.length; i++) {
                            var child = rootNode.children[i];
                            if (bestEval === undefined || bestEval <= child.f) {
                                if (bestEval === undefined || bestEval < child.f)
                                    aGame.mBestMoves = [];
                                bestEval = child.f;
                                aGame.mBestMoves.push(child.m);
                            }
                        }
                    }
                } else {
                    var bestEval2 = undefined;
                    var candidateChildren = [];
                    if (uctParams.pickMove == "besteval-multivisits")
                        rootNode.children.forEach(function(child) {
                            if (child.n.visits > 1 || child.n.known == true)
                                candidateChildren.push(child);
                            });
                    if (candidateChildren.length == 0)
                        candidateChildren = rootNode.children;
                    for (var i = 0; i < candidateChildren.length; i++) {
                        var child = candidateChildren[i];
                        var node = child.n;
                        var staticEval = node.staticEvalSum / node.staticEvalCount;
                        if (bestEval === undefined || bestEval >= node.evaluation * rootNode.who) {
                            if (bestEval === undefined || bestEval > node.evaluation * rootNode.who || (
                            bestEval == node.evaluation * rootNode.who && (
                            bestEval2 === undefined || bestEval2 > rootNode.who * staticEval
                            ))) {
                                bestEval2 = staticEval;
                                aGame.mBestMoves = [];
                            }
                            bestEval = node.evaluation * rootNode.who;
                            aGame.mBestMoves.push(child.m);
                        }
                    }
                }

                JocUtil.schedule(aGame, "Done", {});
            }
        }
        Run();

        function ReportStats(node) {
            console.log("  duration", Date.now() - t0);
            console.log("  evaluation:", node.evaluation);
            console.log("  fully explored:", node.known);
            console.log("  node count:", nodeCount);
            console.log("  redundant node count:", redundantNodeCount);
            console.log("  max depth:", maxDepth);
            console.log("  alpha-beta", uctParams.useAlphaBeta, "skipped", skippedAlphaBeta);
            console.log(" ", loopCount, "steps, per step", (Date.now() - t0) / loopCount, "ms");
            console.log(" ", poCount, "playouts", poDur, "ms, per playout", poDur / poCount, "ms");
            console.log("  UCT c", uctParams.c);
            console.log("  tree", rootNode);

            function ShowMinimax(node, depth) {
                if (uctParams.propagation != "minimax" && (uctParams.propagation != "mixed" || uctParams.productRatio > 0)) {
                    console.warn("Cannot display minimax tree on propagation", uctParams.propagation, "pp ratio", uctParams.productRatio);
                    return;
                }
                var indent = "";
                for (var i = 0; i < depth; i++)
                    indent += "  ";
                console.log(indent + "*", depth, "*", - node.who, "eval", node.evaluation);
                for (var i = 0; i < node.children.length; i++) {
                    var child1 = node.children[i];
                    var node1 = child1.n;
                    console.log(indent, "  " + (node1.evaluation == node.evaluation ? "*" : " ") + " move", (new (aGame.GetMoveClass())(child1.m)).ToString(),
                    "visits", node1.visits,
                    "eval", node1.evaluation,
                    "known", node1.known,
                    "sev", node1.staticEvalSum + "/" + node1.staticEvalCount,
                    "who", node1.who,
                    "children", node1.children ? node1.children.length : "no");
                    if (node1.children && node1.evaluation == node.evaluation)
                        ShowMinimax(node1, depth + 1);
                }
            }
            if (uctParams.showMinimaxTree) {
                console.log("Minimax tree");
                ShowMinimax(node, 0);
            }

            if (uctParams.checkSide) {
                var checkSideNodeCount = 0;
                var checkSideError = 0;
                function CheckSide(node) {
                    checkSideNodeCount++;
                    if (node.children)
                        for (var i = 0; i < node.children.length; i++) {
                            var child1 = node.children[i];
                            if (child1.n.who!=-node.who)
                                checkSideError++;
                                CheckSide(child1.n);
                        }
                }
                CheckSide(rootNode);
                console.log("  tree side alternance", "node", checkSideNodeCount, "errors", checkSideError);
            }
        }
    }

})();
;
'use strict';

angular.module('JoclyPlazza').service(
'JoclyPlazza.util',
[
'$rootScope',
function($rootScope) {

    function GetFullScreenMethods() {
        var fullscreenPrefix = null;
        var fullscreenPrefixes = ["", "moz", "webkit", "o", "ms"];
        var fullScreenMethods = null;
        function Uncapitalize(m) {
            return m.substr(0, 1).toLowerCase() + m.substr(1);
        }
        for (var i in fullscreenPrefixes) {
            var prefix = fullscreenPrefixes[i];
            var rfsFnt = Uncapitalize(prefix + "RequestFullScreen");
            if (typeof $("body")[0][rfsFnt] == "function") {
                fullScreenMethods = {
                    request: rfsFnt,
                    event: prefix + "fullscreenchange",
                    element: Uncapitalize(prefix + "FullScreenElement"),
                };
                switch (prefix) {
                case "webkit":
                    fullScreenMethods.element = "webkitCurrentFullScreenElement";
                    break;
                }
                break;
            }
        }
        return fullScreenMethods;
    }

    var self = this;
    var fullscreenMethods = undefined;

    self.canFullscreen = function() {
        if (fullscreenMethods === undefined)
            fullscreenMethods = GetFullScreenMethods();
        return fullscreenMethods != null;
    };

    self.isFullscreen = function() {
        if (!fullscreenMethods)
            return false;
        return !!document[fullscreenMethods.element];
    };

    self.cancelFullscreen = function(widget, updateFnt) {
        if (!fullscreenMethods || !document[fullscreenMethods.element])
            return;
        if (document.cancelFullScreen)
            document.cancelFullScreen();
        else if (document.mozCancelFullScreen)
            document.mozCancelFullScreen();
        else if (document.webkitCancelFullScreen)
            document.webkitCancelFullScreen();
    };

    self.fullscreen = function(widget, updateFnt) {
        if (!self.canFullscreen())
            return;
        if (arguments.length == 0 || !widget)
            widget = $("body");
        if (arguments.length < 2)
            updateFnt = function() {};
        if (fullscreenMethods) {
            var fullScreenElement = document[fullscreenMethods.element];
            var originalSize = {
                width: widget.width(),
                height: widget.height()
            };
            $(document).bind(fullscreenMethods.event, function() {
                setTimeout(function() {
                    var width, height, entering;
                    if (document[fullscreenMethods.element]) {
                        entering = true;
                        widget.addClass("jpz-full-size");
                        width = document[fullscreenMethods.element].offsetWidth;
                        height = document[fullscreenMethods.element].offsetHeight;
                    } else {
                        entering = false;
                        widget.removeClass("jpz-full-size");
                        width = originalSize.width,
                        height = originalSize.height,
                        $(document).unbind(fullscreenMethods.event);
                    }
                    if (fullScreenElement) {
                        fullScreenElement.width(width);
                        fullScreenElement.height(height);
                    }
                    updateFnt(entering);
                }, 0);
            });
            widget[0][fullscreenMethods.request]();
        }
    };

    self.localSave = function(key, value) {
        if (window.localStorage) {
            window.localStorage.setItem(key, JSON.stringify(value));
        }
    };

    self.localLoad = function(key, defValue) {
        if (defValue === undefined)
            defValue = null;
        var value = defValue;
        try {
            if (window.localStorage) {
                var value0 = JSON.parse(window.localStorage.getItem(key));
                if (value0 !== null)
                    value = value0;
            }
        } catch (e) {}
        return value;
    };

    self.makeId = function() {
        var alphanum = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];
        var key = [];
        for (var i = 0; i < 32; i++)
            key.push(alphanum[Math.floor(Math.random() * 16)]);
        return key.join("");
    }


}
]);

angular.module('JoclyPlazza').directive('jpzIntegerValidator',
[
function factory() {
    var INTEGER_REGEXP = /^\-?\d*$/;
    return {
        require: 'ngModel',
        link: function(scope, elm, attrs, ctrl) {
            ctrl.$parsers.unshift(function(viewValue) {
                if (INTEGER_REGEXP.test(viewValue)) {
                    // it is valid
                    ctrl.$setValidity('integer', true);
                    return viewValue;
                } else {
                    // it is invalid, return undefined (no model update)
                    ctrl.$setValidity('integer', false);
                    return undefined;
                }
            });
        }
    };
}
]);
;
/*
 * Copyright (c) 2012-2013 - Jocly - www.jocly.com - All rights reserved
 */

function JocGame() {}

JocGame.PLAYER_A = 1;
JocGame.PLAYER_B = - 1;
JocGame.DRAW = 2;

if (typeof document != "undefined")
    JocGame.CLICK = ('ontouchstart' in document.documentElement) ? "touchstart" : "click";
else
    JocGame.CLICK = "click";
/*
JocGame.MOUSEMOVE_EVENT=('ontouchstart' in document.documentElement)?"touchmove":"mousemove";
JocGame.MOUSEDOWN_EVENT=('ontouchstart' in document.documentElement)?"touchstart":"mousedown";
JocGame.MOUSEUP_EVENT=('ontouchstart' in document.documentElement)?"touchend":"mouseup";
*/

JocGame.MOUSEMOVE_EVENT = "touchmove mousemove";
JocGame.MOUSEDOWN_EVENT = "touchstart mousedown";
JocGame.MOUSEUP_EVENT = "touchend mouseup joclyclick";

/* biggest integer with unit precision:
   Math.pow(2,53)-1 < Math.pow(2,53) is true
   Math.pow(2,54)-1 < Math.pow(2,54) is false */
JocGame.MAX_VALUE = Math.pow(2, 53);

JocGame.prototype = {}

JocGame.prototype.Init = function(aOptions) {
    this.mWho = JocGame.PLAYER_A;
    this.mViewAs = JocGame.PLAYER_A;
    this.mTopLevel = 3;
    this.mLoopMax = 300;
    this.mPreventRepeat = false;
    if (aOptions) {
        this.mOptions = aOptions.game;
        this.mViewOptions = aOptions.view;
        if (typeof(this.mOptions.level) != "undefined")
            this.mTopLevel = this.mOptions.level;
        if (typeof(this.mOptions.loopMax) != "undefined")
            this.mLoopMax = this.mOptions.loopMax;
        this.mVisitedBoards = {};
        if (typeof(this.mOptions.viewAs) != "undefined")
            this.mViewAs = this.mOptions.viewAs;
    }
    this.mNextSchedule = null;
    this.mPlayedMoves = [];
    this.mFullPlayedMoves = [];
    this.mViewInited = false;
    this.mGameInited = false;
    if (aOptions && aOptions.initial)
        this.GameInitGame(aOptions.initial);
    else
        this.GameInitGame();
    this.mBoard = new (this.GetBoardClass())(this);
    if (this.mBoard.InitialPosition)
        this.mBoard.InitialPosition(this);
    this.mBoard.mMoves = [];
    this.mBoard.mWho = this.mWho;
}

JocGame.prototype.GetBoardClass = function() {
    return this.mBoardClass;
}

JocGame.prototype.GetMoveClass = function() {
    return this.mMoveClass;
}

JocGame.prototype.CreateMove = function(args) {
    return new this.mMoveClass(args);
}

JocGame.prototype.CloneBoard = function(board) {
    var newBoard = new (this.GetBoardClass())(this);
    newBoard.CopyFrom(board);
    return newBoard;
}

JocGame.prototype.InitView = function() {
    console.log("Abstract InitView called");
}

JocGame.prototype.GameInitView = function() {
    if (this.mGeometry.width > 0 && this.mGeometry.height > 0) {
        this.InitView();
        this.mViewInited = true;
    }
}

JocGame.prototype.DestroyView = function() {
    if (this.mWidget)
        this.mWidget.empty();
}

JocGame.prototype.GameDestroyView = function() {
    if (this.mViewInited) {
        this.DestroyView();
        this.mViewInited = false;
    }
}

JocGame.prototype.CanPlaySound = function(tag) {
    return true;
}

JocGame.prototype.PlaySound = function(tag) {
    if (!this.CanPlaySound(tag))
        return;
    var audio = document.getElementById("jocly-sound-" + tag);
    if (audio && this.mSounds) {
        if (typeof this.mNeedPhonegapMedia == "undefined") {
            this.mNeedPhonegapMedia = false;
            this.mNeedPhonegapMedia = window && window.cordova && (typeof Media != "undefined");
        }

        if (this.mNeedPhonegapMedia) {
            if (typeof this.mPhonegapMediaLib == "undefined")
                this.mPhonegapMediaLib = {};
            if (typeof this.mPhonegapMediaLib[tag] == "undefined") {
                var node = audio.firstChild;
                while (node) {
                    if (/source/i.test(node.nodeName) && node.getAttribute("type") == "audio/mp3")
                        break;
                    node = node.nextSibling;
                }
                if (node) {
                    var src = node.getAttribute("src");

                    var m = /^([^#\?]*)\/[^#\?]+/.exec(window.location.pathname);
                    if (m)
                        src = src.replace(/^\./, m[1]);
                    src = src.replace(/%20/g, " ");
                    this.mPhonegapMediaLib[tag] = new Media(src, function() {
                        //console.info("PlaySound: Media played "+src);
                    }, function(error) {
                        console.warn("Jocly PlaySound: Media did not play " + error.code);
                    }, function(status) {
                        //console.info("PlaySound: mediaStatus "+status);
                    });
                } else
                    this.mPhonegapMediaLib[tag] = null;
            }
            if (this.mPhonegapMediaLib[tag]) {
                this.mPhonegapMediaLib[tag].play();
            }
        } else
            audio.cloneNode(true).play();
    }
}

JocGame.prototype.InitGame = function() {}

JocGame.prototype.GameInitGame = function() {
    if (this.mGameInited == false) {
        this.mVisitedBoards = {};
        if (arguments.length > 0 && arguments[0])
            this.mInitial = arguments[0];
        else
            this.mInitial = null;
        this.InitGame();
        this.mGameInited = true;
    }
}

JocGame.prototype.DestroyGame = function() {}

JocGame.prototype.GameDestroyGame = function() {
    if (this.mGameInited) {
        this.DestroyGame();
        this.mGameInited = false;
    }
}

JocGame.prototype.DisplayBoard = function() {
    if (this.mBoard.Display)
        this.mBoard.Display(this);
}

JocGame.prototype.SetWho = function(aWho) {
    this.mWho = aWho;
    this.mBoard.mWho = aWho;
}

JocGame.prototype.HumanTurn = function() {
    if (this.mBoard.mMoves.length == 0) {
        this.mCurrentLevel =- 1;
        this.mBoard.GenerateMoves(this);
    }
    this.mBoard.HumanTurn(this);
}

JocGame.prototype.HumanTurnEnd = function() {
    this.mBoard.HumanTurnEnd(this);
}

JocGame.prototype.PlayedMove = function(aMove, aOldBoard) {
    this.mOldBoard = aOldBoard;
    return this.mBoard.PlayedMove(this, aMove);
}

JocGame.prototype.ShowEnd = function() {
    return this.mBoard.ShowEnd(this);
}

JocGame.prototype.EvaluateBoard = function() {
    this.mBoard.mFinished = false;
    this.mBoard.mMoves = [];
    this.mCurrentLevel =- 1;
    this.mBoard.GenerateMoves(this);
    if (this.mBoard.mFinished == false)
        this.mBoard.Evaluate(this, true, true);
    //JocLog("EvaluatedBoard "+JSON.stringify(this.mBoard));
}

JocGame.prototype.GetFinished = function() {
    this.SetWho( - this.mWho);
    var moves = this.mBoard.mMoves;
    this.EvaluateBoard();
    this.mBoard.mMoves = moves;
    this.SetWho( - this.mWho);
    if (this.mBoard.mFinished)
        return this.mBoard.mWinner;
    else
        return 0;
}

JocGame.prototype.IsValidMove = function(args) {
    var move = new (this.GetMoveClass())(args);
    return this.mBoard.IsValidMove(this, move);
}

JocGame.prototype.AddVisit = function(board, sign) {
    if (board)
        sign = board.GetSignature();
    var visits = this.mVisitedBoards[sign];
    if (visits === undefined)
        this.mVisitedBoards[sign] = 1;
    else
        this.mVisitedBoards[sign]++;
}

JocGame.prototype.RemoveVisit = function(board, sign) {
    if (board)
        sign = board.GetSignature();
    var visits = this.mVisitedBoards[sign];
    if (visits !== undefined) {
        if (visits > 1)
            this.mVisitedBoards[sign]--;
        else
            delete this.mVisitedBoards[sign];
    }
}

var engdbg_loops, engdbg_time, engdbg_t0;

JocGame.prototype.StartMachine = function(aOptions) {
    engdbg_loops = 0;
    engdbg_time = 0;
    engdbg_t0 = Date.now();

    this.mDoneCallback = aOptions.Done;
    this.mProgressCallback = aOptions.Progress;
    if (typeof(aOptions.level) != "undefined")
        this.mTopLevel = aOptions.level;
    if (typeof(aOptions.maxDepth) != "undefined")
        this.mTopLevel = aOptions.maxDepth;
    this.mStartTime = new Date().getTime();
    this.mExploredCount = 0;
    this.mPickedMoveIndex = 0;
    this.mBestMoves = [];
    this.mContexts = [];
    this.mDuration = 0;
    this.mAborted = false;
    this.mRandomSeed = 0;
    if (aOptions.randomSeed && !isNaN(parseInt(aOptions.randomSeed)))
        this.mRandomSeed = parseInt(aOptions.randomSeed);
    if (typeof this.mBoard.StaticGenerateMoves == "function") {
        var moves = this.mBoard.StaticGenerateMoves(this);
        if (moves && moves.length > 0) {
            this.mBestMoves = moves;
            JocUtil.schedule(this, "Done", {});
            return;
        }
    }

    if (this.mOptions.levelOptions) {
        this.mOptions.levelOptionsSaved = JSON.parse(JSON.stringify(this.mOptions.levelOptions));
        if (aOptions.level)
            JocUtil.extend(this.mOptions.levelOptions, aOptions.level);
    }

    if (aOptions.level && aOptions.level.ai == "uct" && JoclyUCT)
        JoclyUCT.startMachine(this, aOptions);
    else {
        // default is legacy alpha-beta ai
        this.mSavedVisitedBoards = {}
        for (var s in this.mVisitedBoards)
            this.mSavedVisitedBoards[s] = this.mVisitedBoards[s];
        this.Engine(this.mBoard, this.mTopLevel, false, 0, aOptions.potential); // start algo
        this.Run();
    }
}

JocGame.prototype.ScheduleStep = function() {
    this.mNextSchedule = this.ExecuteStep;
}

JocGame.prototype.Random = function(roof) {
    var value;
    if (this.mRandomSeed)
        value = this.mRandomSeed % roof;
    else
        value = Math.floor(Math.random() * roof);
    return value;
}

JocGame.prototype.ArrayShuffle = function(arr) {
    var i = arr.length;
    if (i <= 0)
        return;
    while (--i) {
        var j;
        if (this.mRandomSeed)
            j = this.mRandomSeed%(i + 1);
        else
            j = Math.floor(Math.random() * (i + 1));
        var tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }
}

JocGame.prototype.Done = function() {
    this.mDuration = new Date().getTime() - this.mStartTime;
    if (this.mOptions.levelOptionsSaved) {
        this.mOptions.levelOptions = this.mOptions.levelOptionsSaved;
        this.mOptions.levelOptionsSaved = null;
    }
    if (this.mSavedVisitedBoards)
        this.mVisitedBoards = this.mSavedVisitedBoards;
    if (this.mDoneCallback) {
        this.mPickedMoveIndex = this.Random(this.mBestMoves.length);
        try {
            if (this.mProgressCallback) {
                this.mProgressCallback(100);
            }
            this.mDoneCallback( {
                moves : this.mBestMoves,
                move : this.mBestMoves[this.mPickedMoveIndex],
                moveIndex : this.mPickedMoveIndex,
                explored : this.mExploredCount,
                duration : this.mDuration,
                evaluation : this.mBoard.mEvaluation
            });
        } catch (e) {
            JocLog("!!! Done:" + e, e.stack ? e.stack : "");
        }
    }
}

JocGame.prototype.Run = function() {
    var t0 = Date.now();
    try {
        var tNow = new Date().getTime();
        while (this.mNextSchedule && new Date().getTime() - tNow < 20 && this.mAborted == false) {
            var fnt = this.mNextSchedule;
            this.mNextSchedule = null;
            fnt.call(this);
        }
        if (this.mAborted) {
            this.mAbortCallback();
        } else if (this.mNextSchedule) {
            JocUtil.schedule(this, "Run", {});
        }
    } catch (e) {
        JocLog("JocGame.Run " + e + "\n" + e.stack);
    }
    var t1 = Date.now();
    engdbg_loops++;
    engdbg_time += t1 - t0;
}

JocGame.prototype.Abort = function(aAbortCallback) {
    var $this = this;
    this.mAbortCallback = function() {
        if ($this.mOptions.levelOptionsSaved) {
            $this.mOptions.levelOptions = $this.mOptions.levelOptionsSaved;
            $this.mOptions.levelOptionsSaved = null;
        }
        if ($this.mSavedVisitedBoards) {
            $this.mVisitedBoards = $this.mSavedVisitedBoards;
            $this.mSavedVisitedBoards = null;
        }
        aAbortCallback();
    }
    this.mAborted = true;
}

JocGame.prototype.Engine = function(aBoard, aLevel, aBAlpha, aAlpha, aPotential) {
    var context = {
        mBoard : aBoard,
        mLevel : aLevel,
        mBAlpha : aBAlpha,
        mAlpha : aAlpha,
        mBestEvaluation : 0,
        mMoveIndex : 0,
        mNextBoard : null,
        mNextBoards : null
    }
    this.mContexts.push(context);

    context.mBoard.mFinished = false;
    context.mBoard.mWinner = JocGame.DRAW;
    this.mCurrentLevel = aLevel;
    if (context.mBoard.mMoves.length == 0)
        context.mBoard.GenerateMoves(this);

    //JocLog("Level "+aLevel+" "+context.mBoard.mMoves.length+" moves");
    if (context.mBoard.mMoves.length == 0 && context.mBoard.mFinished == false) {
        context.mBoard.
        (this, true, false);
        if (context.mBoard.mFinished == false) {
            JocLog("!!! No move possible while not finished - player", this.mWho, "board", context.mBoard);
            context.mBoard.mFinished = true;
        }
    }

    //JocLog("No possible move level "+aLevel+" from "+JSON.stringify(context.mBoard));
    if (context.mBoard.mFinished) {
        switch (context.mBoard.mWinner) {
        case JocGame.PLAYER_A:
            context.mBoard.mEvaluation = JocGame.MAX_VALUE - (this.mTopLevel - context.mLevel);
            break;
        case JocGame.PLAYER_B:
            context.mBoard.mEvaluation = - JocGame.MAX_VALUE + (this.mTopLevel - context.mLevel);
            break;
        }
        context.mBestEvaluation = context.mBoard.mEvaluation;
        this.ExecuteStep2();
        return;
    }

    context.mExploCtrl = {
        exploFrom: this.mExploredCount,
        exploTo: this.mExploredCount + aPotential,
    }

    if (context.mBoard.QuickEvaluate) {
        var boardsMoves = [];
        for (var i in context.mBoard.mMoves) {
            var board = context.mBoard.MakeAndApply(this, i);
            var quickEval = board.QuickEvaluate(this);
            boardsMoves.push({
                move: context.mBoard.mMoves[i],
                board: board,
                evaluation: quickEval
            });
        }
        function MoveSort(bm1, bm2) {
            return (bm2.evaluation - bm1.evaluation) * context.mBoard.mWho;
        }
        boardsMoves.sort(MoveSort);
        context.mBoard.mMoves = [];
        context.mNextBoards = [];
        if (typeof this.mOptions.capMoves != "undefined")
            boardsMoves = boardsMoves.slice(0, this.mOptions.capMoves);
        for (var i in boardsMoves) {
            context.mBoard.mMoves.push(boardsMoves[i].move);
            context.mNextBoards.push(boardsMoves[i].board);
        }
    }
    this.ExecuteStep();
}

JocGame.prototype.ExecuteStep = function() {
    this.mExploredCount++;
    // JocLog("# context: "+this.mContexts.length);
    var context = this.mContexts[this.mContexts.length - 1];
    //JocLog("ExecuteStep level "+context.mLevel+" index "+context.mMoveIndex+"/"+context.mBoard.mMoves.length);
    if (context.mNextBoards) {
        context.mNextBoard = context.mNextBoards[context.mMoveIndex];
    } else {
        context.mNextBoard = context.mBoard.MakeAndApply(this, context.mMoveIndex);
    }

    if (this.mProgressCallback) {
        var percent = null;
        if (context.mLevel == this.mTopLevel)
            percent = Math.floor((context.mMoveIndex * 100) / context.mBoard.mMoves.length);
        else if (context.mLevel == this.mTopLevel - 1) {
            var topContext = this.mContexts[0];
            var topStep = 1 / topContext.mBoard.mMoves.length;
            percent = Math.floor(100 * (topContext.mMoveIndex * topStep + (context.mMoveIndex * topStep / context.mBoard.mMoves.length)));
        }
        if (percent != null)
            try {
                this.mProgressCallback(percent);
        } catch (e) {}
    }

    var nextBoard = context.mNextBoard;
    nextBoard.mFinished = false;
    nextBoard.mWinner = 0;
    nextBoard.Evaluate(this, context.mLevel == 0, false, this);

    if (context.mLevel < 0) // random mode
    nextBoard.mEvaluation = 0;

    // JocLog("Eval2 "+nextBoard.mFinished+"/"+nextBoard.mWinner+"/"+nextBoard.mEvaluation);
    if (nextBoard.mFinished) {
        switch (nextBoard.mWinner) {
        case JocGame.PLAYER_A:
            nextBoard.mEvaluation = JocGame.MAX_VALUE - (this.mTopLevel - context.mLevel);
            break;
        case JocGame.PLAYER_B:
            nextBoard.mEvaluation = - JocGame.MAX_VALUE + (this.mTopLevel - context.mLevel);
            break;
        case JocGame.DRAW:
            nextBoard.mEvaluation = 0;
            break;
        }
    } else if (context.mLevel == this.mTopLevel && context.mBoard.mMoves.length == 1) {
        // one possible move at top level: no need to recurse
    } else if (context.mLevel > 0) {
        var potential = (context.mExploCtrl.exploTo - this.mExploredCount) / context.mBoard.mMoves.length;
        //JocLog("ExecuteStep",potential,context.mLevel,context.mExploCtrl);
        if (potential >= 1) {
            nextBoard.mWho = - nextBoard.mWho; // player changes
            this.Engine(nextBoard, context.mLevel - 1, (context.mMoveIndex != 0),
            context.mBestEvaluation, potential); // recurse algo
            return;
        }
    }
    this.ExecuteStep2();
}

JocGame.prototype.ExecuteStep2 = function() {
    var context = this.mContexts[this.mContexts.length - 1];
    //JocLog("ExecuteStep2 level "+context.mLevel+" index "+context.mMoveIndex+" "+JSON.stringify(context.mBoard.board));
    if (context.mBoard.mMoves.length > 0) {
        if (context.mMoveIndex == 0) {
            // first
            d move
            context.mBestEvaluation = context.mNextBoard.mEvaluation; // then it's the best one so far
            if (context.mLevel == this.mTopLevel) // if top level
            this.SetBest(context.mBoard.mMoves[0], context.mBoard); // store move
        } else {
            // another move evaluated
            if (context.mNextBoard.mWho > 0) {
                // B plays
                if (context.mNextBoard.mEvaluation > context.mBestEvaluation) {
                    // best move ?
                    context.mBestEvaluation = context.mNextBoard.mEvaluation; // remember it
                    if (context.mLevel == this.mTopLevel) // if top level
                    this.SetBest(context.mBoard.mMoves[context.mMoveIndex],
                    context.mBoard); // then store
                } else if (context.mLevel == this.mTopLevel
                && context.mNextBoard.mEvaluation == context.mBestEvaluation) {
                    // top level and
                    // another best
                    // move
                    this.AddBest(context.mBoard.mMoves[context.mMoveIndex],
                    context.mBoard); // add to best moves
                }
            } else {
                // A plays
                if (context.mNextBoard.mEvaluation < context.mBestEvaluation) {
                    // best move
                    context.mBestEvaluation = context.mNextBoard.mEvaluation; // keep it
                    if (context.mLevel == this.mTopLevel)
                        this.SetBest(context.mBoard.mMoves[context.mMoveIndex],
                        context.mBoard);
                } else if (context.mLevel == this.mTopLevel
                && context.mNextBoard.mEvaluation == context.mBestEvaluation)
                    this.AddBest(context.mBoard.mMoves[context.mMoveIndex],
                    context.mBoard);
            }
        }
    }
    context.mBoard.mEvaluation = context.mBestEvaluation; // assign best eval
    if (context.mBAlpha) {
        // alpha-beta pruning
        if ((context.mBoard.mWho == JocGame.PLAYER_A && context.mBestEvaluation > context.mAlpha)
        || (context.mBoard.mWho == JocGame.PLAYER_B && context.mBestEvaluation < context.mAlpha)) {
            context.mMoveIndex = context.mBoard.mMoves.length - 1;
            //JocLog("Alpha-beta pruned level");
            // ensure no more looking for other moves at this level
        }
    }

    context.mMoveIndex++;
    if (context.mMoveIndex < context.mBoard.mMoves.length) {
        this.ScheduleStep();
    } else {
        //JocLog("BestEval level "+context.mLevel+": "+context.mBestEvaluation+" "+context.mMoveIndex+"/"+context.mBoard.mMoves.length);
        this.mContexts.pop();
        if (this.mContexts.length > 0) {
            var context = this.mContexts[this.mContexts.length - 1];
            context.mNextBoard.mWho = - context.mNextBoard.mWho;
            this.ExecuteStep2();
        } else {
            delete context.mBoard.mMoves;
            //JocLog("Best eval "+context.mBestEvaluation);
            this.Done();
        }
    }
}

JocGame.prototype.SetBest = function(aMove, aBoard) {
    var move = new (this.GetMoveClass())({});
    move.CopyFrom(aMove);
    this.mBestMoves = [ move ];
}

JocGame.prototype.AddBest = function(aMove, aBoard) {
    var move = new (this.GetMoveClass())({});
    move.CopyFrom(aMove);
    this.mBestMoves.push(move);
}

JocGame.prototype.GetRepeatOccurence = function(board) {
    if (!this.mOptions.preventRepeat)
        return - 1;
    var repOcc = this.mVisitedBoards[board.GetSignature()];
    return repOcc;
}

JocGame.prototype.HandleRepeat = function(board) {
    if (this.mOptions.preventRepeat) {
        var sign = board.GetSignature(true);
        if (this.mVisitedBoards[sign] === undefined)
            this.mVisitedBoards[sign] = 1;
        else
            this.mVisitedBoards[sign]++;
    }
}

JocGame.prototype.UnhandleRepeat = function(board) {
    if (this.mOptions.preventRepeat) {
        var sign = board.GetSignature(true);
        if (this.mVisitedBoards[sign] == 1)
            delete this.mVisitedBoards[sign];
        else if (this.mVisitedBoards[sign] > 1)
            this.mVisitedBoards[sign]--;
    }
}

JocGame.prototype.ApplyMove = function(aMove) {
    var move = new (this.GetMoveClass())({});
    move.CopyFrom(aMove);
    this.mPlayedMoves.push(move);
    if (this.mFullPlayedMoves.length < this.mPlayedMoves.length)
        this.mFullPlayedMoves.push(move);
    else if (!move.Equals(this.mFullPlayedMoves[this.mPlayedMoves.length - 1])) {
        this.mFullPlayedMoves = this.mFullPlayedMoves.slice(0, this.mPlayedMoves.length - 1);
        this.mFullPlayedMoves.push(move);
    }
    this.mBoard.ApplyMove(this, aMove);
    this.mBoard.mMoves = [];
    this.HandleRepeat(this.mBoard);
}

JocGame.prototype.BackTo = function(aIndex, moves) {
    if (!moves)
        moves = this.mFullPlayedMoves;
    this.mWho = JocGame.PLAYER_A;
    this.mBoard = new (this.GetBoardClass())(this);
    if (this.mBoard.InitialPosition)
        this.mBoard.InitialPosition(this);
    if (this.mInitial && this.mInitial.turn)
        this.mWho = this.mInitial.turn;
    this.mBoard.mWho = this.mWho;
    this.mBestMoves = [];
    this.mVisitedBoards = {};
    this.mPlayedMoves = [];
    for (var i = 0; i < aIndex; i++) {
        this.mBoard.ApplyMove(this, moves[i]);
        this.HandleRepeat(this.mBoard);
        this.mBoard.mWho =- this.mBoard.mWho;
        this.mPlayedMoves.push(moves[i]);
    }
    this.mWho = this.mBoard.mWho;
}

JocGame.prototype.Load = function(gameData) {
    this.mWho = JocGame.PLAYER_A;
    this.mBoard = new (this.GetBoardClass())(this);
    if (this.mBoard.InitialPosition)
        this.mBoard.InitialPosition(this);
    this.mBoard.mWho = this.mWho;
    var board = this.GetBoardClass();
    if (gameData.initialBoard)
        board.CopyFrom(gameData.initialBoard);
    this.mBestMoves = [];
    this.mVisitedBoards = {};
    var moves = gameData.playedMoves;
    this.mPlayedMoves = [];
    this.mFullPlayedMoves = [];
    for (var i in moves) {
        var move = new (this.GetMoveClass())(moves[i]);
        if (!this.IsValidMove(move))
            throw "invalid-move";
        this.mBoard.ApplyMove(this, move);
        this.HandleRepeat(this.mBoard);
        this.mBoard.mWho =- this.mBoard.mWho;
        this.mPlayedMoves.push(move);
        this.mFullPlayedMoves.push(move);
        this.mBoard.mMoves = [];
    }
    this.mWho = this.mBoard.mWho;
    if (this.mBoard.mFinished == false)
        this.mBoard.Evaluate(this, true, true);
}

function JocMove() {}

JocGame.prototype.CloseView = function() {}

JocMove.prototype = {}

JocMove.prototype.CopyFrom = function(aMove) {
    var fields = JSON.parse(JSON.stringify(aMove));
    for (var f in fields) {
        this[f] = fields[f];
    }
}

JocMove.prototype.Equals = function(move) {
    return JSON.stringify(this) == JSON.stringify(move);
}

JocMove.prototype.ToString = function() {
    return JSON.stringify(this);
}

JocMove.prototype.Strip = function() {
    return this;
}

function JocBoard() {}

JocBoard.prototype = {}

JocBoard.prototype.Init = function(aGame) {}

JocBoard.prototype.InitBoard = function(aGame) {
    this.mDepth = 0; // no depth calc
    this.mMoves = []; // move storage
    this.mEvaluation = 0; // not evaluated yet
    this.mFinished = false;
    this.mWinner = 0;
    this.Init(aGame);
}

JocBoard.prototype.CopyFrom = function(aBoard) {
    var signature = aBoard.mSignature;
    delete (aBoard.mSignature);
    var fields = JSON.parse(JSON.stringify(aBoard));
    for (var f in fields) {
        this[f] = fields[f];
    }
    aBoard.mSignature = signature;
}

JocBoard.prototype.GetSignature = function() {
    if (arguments[0] || !this.mSignature) {
        var moves = this.mMoves;
        delete (this.mMoves);
        delete (this.mSignature);
        this.mSignature = JocUtil.md5(JSON.stringify(this));
        //JocLog("signature",this.mSignature,this);
        this.mMoves = moves;
    }
    return this.mSignature;
}

JocBoard.prototype.ApplyMove = function(aGame, aMove) {
    JocLog("Method JocBoard:ApplyMove() must be overloaded");
    // must be overloaded
}

JocBoard.prototype.GenerateMoves = function(aGame) {
    JocLog("Method JocBoard:GenerateMoves() must be overloaded");
    // must be overloaded
}

JocBoard.prototype.Evaluate = function(aGame, aFinishOnly, aTopLevel) {
    JocLog("Method JocBoard:Evaluate() must be overloaded");
    this.mEvaluation = 0; // must be overloaded
}

JocBoard.prototype.HumanTurn = function() {}

JocBoard.prototype.HumanTurnEnd = function() {}

JocBoard.prototype.PlayedMove = function() {}

JocBoard.prototype.ShowEnd = function() {}

JocBoard.prototype.MakeAndApply = function(aGame, aIndex) {
    var board = new (aGame.GetBoardClass())(aGame);
    board.CopyFrom(this);
    board.mWho = this.mWho;
    board.mBoardClass = this.mBoardClass;
    board.ApplyMove(aGame, this.mMoves[aIndex]); // apply move
    board.mMoves = [];
    return board;
}

JocBoard.prototype.IsValidMove = function(aGame, move) {
    if (typeof move.Equals != "function")
        move = aGame.CreateMove(move);
    if (this.mMoves.length == 0) {
        this.mCurrentLevel =- 1;
        this.GenerateMoves(aGame);
    }
    for (var i in this.mMoves) {
        if (move.Equals(this.mMoves[i]))
            return true;
    }
    console.error("Invalid move " + JSON.stringify(move) + " in " + JSON.stringify(this.mMoves));
    return false;
}

JocBoard.prototype.PushMove = function(aGame, args) {
    this.mMoves.push(aGame.CreateMove(args));
}


JocBoard.prototype.GenerateMoveObjects = function(aGame) {
    var moves = [];
    this.mMoves = [];
    this.GenerateMoves(aGame);
    for (var i = 0; i < this.mMoves.length; i++)
        moves.push(aGame.CreateMove(this.mMoves[i]));
    this.mMoves = moves;
}

JocBoard.prototype.ExportBoardState = function(aGame) {
    return JSON.stringify(this);
}

JocGame.prototype.GetBestMatchingMove = function(moveStr, candidateMoves) {
    var prettyMoves = [];
    var $this = this;
    candidateMoves.forEach(function(m) {
        if (typeof m.ToString == "function")
            prettyMoves.push(m.ToString());
        else
            prettyMoves.push($this.CreateMove(m).ToString());
    });
    var bestDist = Infinity;
    var bestMatches = [];
    candidateMoves.forEach(function(candidate, index) {
        var dist = JocGame.Levenshtein(moveStr, prettyMoves[index]) / (Math.max(prettyMoves[index].length, moveStr.length) + 1);
        if (dist == bestDist)
            bestMatches.push(index);
        else if (dist < bestDist) {
            bestMatches = [index];
            bestDist = dist;
        }
    });
    if (bestMatches.length == 1)
        return candidateMoves[bestMatches[0]];

    var candidateIndexes = bestMatches;
    var matches = [];
    candidateIndexes.forEach(function(index) {
        var pretty = prettyMoves[index];
        if (moveStr.indexOf(pretty) >= 0 || pretty.indexOf(moveStr) >= 0)
            matches.push(index);
    });
    if (matches.length == 1)
        return candidateMoves[matches[0]];

    bestDist = Infinity;
    bestMatches = [];
    candidateIndexes.forEach(function(index) {
        var dist = 0;
        var str1 = moveStr.replace(/[A-Z]/g, '');
        var str2 = prettyMoves[index].replace(/[A-Z]/g, '');
        dist += JocGame.Levenshtein(str1, str2) / (Math.max(str1.length, str2.length) + 1);
        dist += (str1.indexOf(str2) >= 0 || str2.indexOf(str1) >= 0) ? 0 : 1;
        str1 = moveStr.replace(/[a-z]/g, '');
        str2 = prettyMoves[index].replace(/[a-z]/g, '');
        dist += JocGame.Levenshtein(str1, str2).distance / (Math.max(str1.length, str2.length) + 1);
        dist += (str1.indexOf(str2) >= 0 || str2.indexOf(str1) >= 0) ? 0 : 1;
        if (dist == bestDist)
            bestMatches.push(index);
        else if (dist < bestDist) {
            bestMatches = [index];
            bestDist = dist;
        }
    });
    if (bestMatches.length == 1)
        return candidateMoves[bestMatches[0]];
    return null;
}

JocBoard.prototype.PickMoveFromDatabase = function(aGame, database) {
    if (!this.mMoves || this.mMoves.length == 0) {
        var moves = [];
        this.mMoves = [];
        this.GenerateMoves(aGame);
        for (var i = 0; i < this.mMoves.length; i++)
            moves.push(aGame.CreateMove(this.mMoves[i]));
        this.mMoves = moves;
    }
    if (this.mMoves.length == 0)
        return null;
    var key = "" + this.mWho + "#" + this.GetSignature();
    var dbMoves = database[key];
    if (!dbMoves)
        return null;
    var totalEval = 0;
    for (var i = 0; i < dbMoves.length; i++)
        totalEval += dbMoves[i].e;
    var rnd = Math.random() * totalEval;
    var current = 0;
    for (var i = 0; i < dbMoves.length; i++) {
        var dbMove = dbMoves[i];
        current += dbMove.e;
        if (current > rnd) {
            var pickedMove = aGame.GetBestMatchingMove(dbMove.m, this.mMoves);
            if (pickedMove)
                return [pickedMove];
        }
    }
    return null; // never reached
}

JocBoard.prototype.CompactMoveString = function(aGame, aMove) {
    if (typeof aMove.ToString != "function")
        aMove = aGame.CreateMove(aMove);
    return aMove.ToString();
}

/*-- Zobrist implementation --*/

JocGame.Zobrist = function(params) {
    var mt = new MersenneTwister(12345);
    var paramNames = [];
    for (var f in params)
        paramNames.push(f);
    paramNames.sort(); // ensures we walk through parameters always in same order so generated pseudo random seeds are always the same
    this.seed = {};
    for (var pi = 0; pi < paramNames.length; pi++) {
        var f = paramNames[pi];
        var param = params[f];
        var seed = {
            values: {},
            seeds: [],
        }
        var vIndex = 0;
        for (var vi = 0; vi < param.values.length; vi++)
            seed.values[param.values[vi]] = vIndex++;
        switch (param.type) {
        case "array":
            for (var j = 0; j < param.size; j++) {
                var seeds0 = [];
                for (var i = 0; i < vIndex; i++)
                    seeds0.push(mt.genrand_int32());
                seed.seeds.push(seeds0);
            }
            seed.type = "array";
            break;
        default:
            for (var i = 0; i < vIndex; i++)
                seed.seeds.push(mt.genrand_int32());
            seed.type = "simple";
        }
        this.seed[f] = seed;
    }
    //console.log("Created zobrist",this);
}

JocGame.Zobrist.prototype = {
    update: function(zobrist, name) {
        //var zobrist0=zobrist;
        var seed = this.seed[name];
        if (seed === undefined) {
            console.error("Unknown Zobrist parameter", name);
            return 0;
        }
        var vIndex = seed.values[arguments[2]];
        if (vIndex === undefined) {
            console.error("Undeclared Zobrist value", arguments[2], "as param", name);
            return 0;
        }
        switch (seed.type) {
        case "simple":
            zobrist^=seed.seeds[vIndex];
            break;
        case "array":
            var seeds = seed.seeds[arguments[3]];
            if (seeds === undefined) {
                console.error("Undeclared Zobrist array index", arguments[3], "as param", name);
                return 0;
            }
            zobrist^=seeds[vIndex];
            //console.log("Zobrist",zobrist0,"=>",name,"array[",arguments[2],"] =",arguments[3],"=>",zobrist);
            break;
        }
        return zobrist;
    },
}

/*--- Levenshtein distance implementation ---*/
JocGame.Levenshtein = function(e, f) {
    if (e == f)
        return 0;
    var d = e.length, j = f.length;
    if (0 === d)
        return j;
    if (0 === j)
        return d;
    var b=!1;
    try {
        b=!"0"[0]
    } catch (m) {
        b=!0
    }
    b && (e = e.split(""), f = f.split(""));
    for (var b = Array(d + 1), g = Array(d + 1), a = 0, h = 0, i = 0, a = 0; a < d + 1; a++)
        b[a] = a;
    for (var c = "", k = "", h = 1; h <= j; h++) {
        g[0] = h;
        k = f[h - 1];
        for (a = 0; a < d; a++) {
            var c = e[a], i = c == k ? 0: 1, c = b[a + 1] + 1, l = g[a] + 1, i = b[a] + i;
            l < c && (c = l);
            i < c && (c = i);
            g[a + 1] = c
        }
        a = b;
        b = g;
        g = a
    }
    return b[d]
};
;
/*
 * Copyright (c) 2102 - Jocly - www.jocly.com - All rights reserved
 */

function JocLog() {
    if (typeof jQuery != "undefined") {
        var strs = [];
        for (var i = 0; i < arguments.length; i++) {
            var str = arguments[i];
            if (typeof(str) != "string")
                str = JSON.stringify(str);
            strs.push("" + str);
        }
        jQuery("<p/>").text(strs.join(" ")).appendTo(jQuery("#jocly-log"));
    } else
        console.warn.apply(console, arguments);
}

var JocUtil = {
    JSON: JSON
}

JocUtil.reload = function() {
    window.location.reload();
}

JocUtil.setTimeout = function(fnt, timeout) {
    return window.setTimeout(fnt, timeout);
}

JocUtil.setInterval = function(fnt, timeout) {
    return window.setInterval(fnt, timeout);
}

JocUtil.clearTimeout = function(timer) {
    window.clearTimeout(timer);
}

JocUtil.schedule = function(target, method, args) {
    JocUtil.setTimeout(function() {
        target[method](args);
    }, 0);
}

JocUtil.setPref = function(aPrefName, aValue, options) {
    var prefName = 'jocly_pref';
    if (arguments.length < 3)
        options = {}
    if (options.appId)
        prefName += "_" + options.appId;
    if (options.game)
        prefName += "_" + options.game;
    prefName += "_" + aPrefName;
    if (typeof(aValue) == "boolean")
        aValue = "$#@" + aValue;
    if (typeof(aValue) == "object" || typeof(aValue) == "array")
        aValue = "$#@JSON@" + JSON.stringify(aValue);
    //alert("setPref("+prefName+","+aValue+") "+typeof(aValue));
    window.localStorage.setItem(prefName, aValue);
}

JocUtil.getPref = function(aPrefName, options) {
    var prefName = 'jocly_pref';
    if (arguments.length < 2)
        options = {}
    if (options.appId)
        prefName += "_" + options.appId;
    if (options.game)
        prefName += "_" + options.game;
    prefName += "_" + aPrefName;
    var value = window.localStorage.getItem(prefName);
    if (value == "$#@true")
        value = true;
    else if (value == "$#@false")
        value = false;
    else if (typeof(value) == "string" && value.substr(0, 8) == "$#@JSON@")
        value = JSON.parse(value.substr(8));
    if (value == null && typeof options.defaultValue != "undefined")
        value = options.defaultValue;
    //alert("getPref("+prefName+") => "+value+" "+typeof(value));
    return value;
}

JocUtil.filterLevels = function(levels, maxLevel, defaultLevel) {
    function Calibrate() {
        var timer0 = new Date().getTime();
        var n = 1000;
        var m = 100;
        var a = [];
        var b = [];
        for (var i = 0; i < m; i++) {
            a.push(i);
        }
        for (var i = 0; i < n; i++) {
            while (a.length > 0)
                b.push(a.shift());
            var c = a;
            a = b;
            b = c;
        }
        var timer1 = new Date().getTime();
        return timer1 - timer0;
    }
    var calibration = parseInt(JocUtil.getPref("calibration", {
        defaultValue: 0
    }));
    var calibrationDate = parseInt(JocUtil.getPref("calibrationDate", {
        defaultValue: 0
    }));
    if (calibrationDate < new Date().getTime() - 24 * 60 * 60 * 1000)
        calibration = 0;
    var maxTime = 60000;
    var bestDefaultMaxTime = 3000;
    var levels0 = [];
    if (levels) {
        var bestLevel = null;
        var bestLevelTime = 0;
        var bestLevelForced = false;
        for (var k in levels) {
            var level = levels[k];
            if (level.isDefault) {
                bestLevel = level;
                bestLevelFound = true;
            }
            level.isDefault = false;
            level.fullLabel = strings["comp-level"] + " " + level.label;
            level.optionValue = k;
            if (level.calRatio) {
                if (!calibration) {
                    calibration = Calibrate();
                    JocLog("Calibration", calibration);
                    JocUtil.setPref("calibration", calibration, {});
                    JocUtil.setPref("calibrationDate", new Date().getTime(), {});
                }
                var levelTime = calibration * level.calRatio;
                if (levelTime > maxTime && levels0.length >= 2)
                    continue;
                if (bestLevelForced == false) {
                    if (bestLevel == null || (levelTime < bestDefaultMaxTime && levelTime > bestLevelTime)) {
                        bestLevel = level;
                        bestLevelTime = levelTime;
                    }
                }
            } else if (bestLevel == null)
                bestLevel = level;
            levels0.push(level);
        }
        if (bestLevel)
            bestLevel.isDefault = true;
    } else {
        var maxLevel0 = 9;
        if (maxLevel)
            maxLevel0 = maxLevel;
        for (var i = 0; i <= maxLevel0; i++) {
            var level = {
                fullLabel: strings["comp-level"] + " " + (i + 1),
                optionValue: "machine-" + i,
                isDefault: false
            };
            if (typeof(defaultLevel) != "undefined" && i == defaultLevel)
                level.isDefault = true;
            levels0.push(level);
        }
    }
    return levels0;
}

JocUtil.cookieSupportTested = false;
JocUtil.cookieSupport = true;
JocUtil.hasCookieSupport = function() {
    if (JocUtil.cookieSupportTested)
        return JocUtil.cookieSupport;
    if (document.cookie.length == 0) {
        var date = new Date();
        date.setTime(date.getTime() + 365 * 24 * 60 * 60 * 1000);
        document.cookie = "jocly=" + escape("{}") + "; path=/; expires=" + date.toGMTString() + ";";
        if (document.cookie.length == 0)
            JocUtil.cookieSupport = false;
    }
    JocUtil.cookieSupportTested = true;
    return JocUtil.cookieSupport;
}

JocUtil.getCookieData = function() {
    if (JocUtil.hasCookieSupport()) {
        var cookies = document.cookie.split(";");
        for (var i in cookies) {
            var c = /^ *(.*)$/.exec(cookies[i])[1];
            if (c.indexOf("jocly=") == 0) {
                try {
                    return JSON.parse(unescape(c.substring(6)));
                } catch (e) {
                    JocLog("Unable to parse cookie", c);
                }
            }
        }
        return {};
    } else {
        var value = window.localStorage.getItem("jocly");
        if (value == null)
            return {};
        else
            return JSON.parse(value);
    }
}

JocUtil.setCookieData = function(name, value) {
    if (JocUtil.hasCookieSupport()) {
        var jocly = JocUtil.getCookieData();
        if (value == null)
            delete jocly[name];
        else
            jocly[name] = value;
        var date = new Date();
        date.setTime(date.getTime() + 365 * 24 * 60 * 60 * 1000);
        var cookie = "jocly=" + escape(JSON.stringify(jocly)) + "; path=/; expires=" + date.toGMTString() + ";";
        document.cookie = cookie;
    } else {
        var jocly = window.localStorage.getItem("jocly");
        if (jocly == null)
            jocly = {};
        else
            jocly = JSON.parse(jocly);
        jocly[name] = value;
        window.localStorage.setItem("jocly", JSON.stringify(jocly));
    }
}

JocUtil.extend = function(target, obj) {
    for (var i in obj)
        target[i] = obj[i];
}

JocUtil.md5 = function(string) {
    function RotateLeft(lValue, iShiftBits) {
        return (lValue<<iShiftBits) | (lValue>>>(32 - iShiftBits));
    }
    function AddUnsigned(lX, lY) {
        var lX4, lY4, lX8, lY8, lResult;
        lX8 = (lX & 0x80000000);
        lY8 = (lY & 0x80000000);
        lX4 = (lX & 0x40000000);
        lY4 = (lY & 0x40000000);
        lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);
        if (lX4 & lY4) {
            return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
        }
        if (lX4 | lY4) {
            if (lResult & 0x40000000) {
                return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
            } else {
                return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
            }
        } else {
            return (lResult ^ lX8 ^ lY8);
        }
    }
    function F(x, y, z) {
        return (x & y) | ((~x) & z);
    }
    function G(x, y, z) {
        return (x & z) | (y & (~z));
    }
    function H(x, y, z) {
        return (x ^ y ^ z);
    }
    function I(x, y, z) {
        return (y ^ (x | (~z)));
    }
    function FF(a, b, c, d, x, s, ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };
    function GG(a, b, c, d, x, s, ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };
    function HH(a, b, c, d, x, s, ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };
    function II(a, b, c, d, x, s, ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };
    function ConvertToWordArray(string) {
        var lWordCount;
        var lMessageLength = string.length;
        var lNumberOfWords_temp1 = lMessageLength + 8;
        var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64;
        var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
        var lWordArray = Array(lNumberOfWords - 1);
        var lBytePosition = 0;
        var lByteCount = 0;
        while ( lByteCount < lMessageLength ) {
            lWordCount = (lByteCount - (lByteCount % 4)) / 4;
            lBytePosition = (lByteCount % 4) * 8;
            lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount)<<lBytePosition));
            lByteCount++;
        }
        lWordCount = (lByteCount - (lByteCount % 4)) / 4;
        lBytePosition = (lByteCount % 4) * 8;
        lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);
        lWordArray[lNumberOfWords - 2] = lMessageLength<<3;
        lWordArray[lNumberOfWords - 1] = lMessageLength>>>29;
        return lWordArray;
    };
    function WordToHex(lValue) {
        var WordToHexValue = "", WordToHexValue_temp = "", lByte, lCount;
        for (lCount = 0; lCount <= 3; lCount++) {
            lByte = (lValue>>>(lCount * 8)) & 255;
            WordToHexValue_temp = "0" + lByte.toString(16);
            WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2);
        }
        return WordToHexValue;
    };
    function Utf8Encode(string) {
        string = string.replace(/\r\n/g, "\n");
        var utftext = "";
        for (var n = 0; n < string.length; n++) {
            var c = string.charCodeAt(n);
            if (c < 128) {
                utftext += String.fromCharCode(c);
            } else if ((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            } else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }
        }
        return utftext;
    };
    var x = Array();
    var k, AA, BB, CC, DD, a, b, c, d;
    var S11 = 7, S12 = 12, S13 = 17, S14 = 22;
    var S21 = 5, S22 = 9 , S23 = 14, S24 = 20;
    var S31 = 4, S32 = 11, S33 = 16, S34 = 23;
    var S41 = 6, S42 = 10, S43 = 15, S44 = 21;
    string = Utf8Encode(string);
    x = ConvertToWordArray(string);
    a = 0x67452301;
    b = 0xEFCDAB89;
    c = 0x98BADCFE;
    d = 0x10325476;
    for (k = 0; k < x.length; k += 16) {
        AA = a;
        BB = b;
        CC = c;
        DD = d;
        a = FF(a, b, c, d, x[k + 0], S11, 0xD76AA478);
        d = FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);
        c = FF(c, d, a, b, x[k + 2], S13, 0x242070DB);
        b = FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);
        a = FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);
        d = FF(d, a, b, c, x[k + 5], S12, 0x4787C62A);
        c = FF(c, d, a, b, x[k + 6], S13, 0xA8304613);
        b = FF(b, c, d, a, x[k + 7], S14, 0xFD469501);
        a = FF(a, b, c, d, x[k + 8], S11, 0x698098D8);
        d = FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);
        c = FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);
        b = FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);
        a = FF(a, b, c, d, x[k + 12], S11, 0x6B901122);
        d = FF(d, a, b, c, x[k + 13], S12, 0xFD987193);
        c = FF(c, d, a, b, x[k + 14], S13, 0xA679438E);
        b = FF(b, c, d, a, x[k + 15], S14, 0x49B40821);
        a = GG(a, b, c, d, x[k + 1], S21, 0xF61E2562);
        d = GG(d, a, b, c, x[k + 6], S22, 0xC040B340);
        c = GG(c, d, a, b, x[k + 11], S23, 0x265E5A51);
        b = GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);
        a = GG(a, b, c, d, x[k + 5], S21, 0xD62F105D);
        d = GG(d, a, b, c, x[k + 10], S22, 0x2441453);
        c = GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);
        b = GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);
        a = GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);
        d = GG(d, a, b, c, x[k + 14], S22, 0xC33707D6);
        c = GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);
        b = GG(b, c, d, a, x[k + 8], S24, 0x455A14ED);
        a = GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);
        d = GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);
        c = GG(c, d, a, b, x[k + 7], S23, 0x676F02D9);
        b = GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);
        a = HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);
        d = HH(d, a, b, c, x[k + 8], S32, 0x8771F681);
        c = HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);
        b = HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);
        a = HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);
        d = HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);
        c = HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);
        b = HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);
        a = HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);
        d = HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);
        c = HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);
        b = HH(b, c, d, a, x[k + 6], S34, 0x4881D05);
        a = HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);
        d = HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);
        c = HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);
        b = HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);
        a = II(a, b, c, d, x[k + 0], S41, 0xF4292244);
        d = II(d, a, b, c, x[k + 7], S42, 0x432AFF97);
        c = II(c, d, a, b, x[k + 14], S43, 0xAB9423A7);
        b = II(b, c, d, a, x[k + 5], S44, 0xFC93A039);
        a = II(a, b, c, d, x[k + 12], S41, 0x655B59C3);
        d = II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);
        c = II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);
        b = II(b, c, d, a, x[k + 1], S44, 0x85845DD1);
        a = II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);
        d = II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);
        c = II(c, d, a, b, x[k + 6], S43, 0xA3014314);
        b = II(b, c, d, a, x[k + 13], S44, 0x4E0811A1);
        a = II(a, b, c, d, x[k + 4], S41, 0xF7537E82);
        d = II(d, a, b, c, x[k + 11], S42, 0xBD3AF235);
        c = II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);
        b = II(b, c, d, a, x[k + 9], S44, 0xEB86D391);
        a = AddUnsigned(a, AA);
        b = AddUnsigned(b, BB);
        c = AddUnsigned(c, CC);
        d = AddUnsigned(d, DD);
    }
    var temp = WordToHex(a) + WordToHex(b) + WordToHex(c) + WordToHex(d);
    return temp.toLowerCase();
}

JocUtil.sha1 = function(msg) {
    function rotate_left(n, s) {
        var t4 = ( n<<s ) | (n>>>(32 - s));
        return t4;
    };
    function lsb_hex(val) {
        var str = "";
        var i;
        var vh;
        var vl;
        for ( i = 0; i <= 6; i += 2 ) {
            vh = (val>>>(i * 4 + 4)) & 0x0f;
            vl = (val>>>(i * 4)) & 0x0f;
            str += vh.toString(16) + vl.toString(16);
        }
        return str;
    };
    function cvt_hex(val) {
        var str = "";
        var i;
        var v;
        for ( i = 7; i >= 0; i-- ) {
            v = (val>>>(i * 4)) & 0x0f;
            str += v.toString(16);
        }
        return str;
    };
    function Utf8Encode(string) {
        string = string.replace(/\r\n/g, "\n");
        var utftext = "";
        for (var n = 0; n < string.length; n++) {
            var c = string.charCodeAt(n);
            if (c < 128) {
                utftext += String.fromCharCode(c);
            } else if ((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            } else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }
        }
        return utftext;
    };
    var blockstart;
    var i, j;
    var W = new Array(80);
    var H0 = 0x67452301;
    var H1 = 0xEFCDAB89;
    var H2 = 0x98BADCFE;
    var H3 = 0x10325476;
    var H4 = 0xC3D2E1F0;
    var A, B, C, D, E;
    var temp;
    msg = Utf8Encode(msg);
    var msg_len = msg.length;
    var word_array = new Array();
    for ( i = 0; i < msg_len - 3; i += 4 ) {
        j = msg.charCodeAt(i)<<24 | msg.charCodeAt(i + 1)<<16 |
        msg.charCodeAt(i + 2)<<8 | msg.charCodeAt(i + 3);
        word_array.push( j );
    }
    switch ( msg_len % 4 ) {
    case 0:
        i = 0x080000000;
        break;
    case 1:
        i = msg.charCodeAt(msg_len - 1)<<24 | 0x0800000;
        break;

    case 2:
        i = msg.charCodeAt(msg_len - 2)<<24 | msg.charCodeAt(msg_len - 1)<<16 | 0x08000;
        break;

    case 3:
        i = msg.charCodeAt(msg_len - 3)<<24 | msg.charCodeAt(msg_len - 2)<<16 | msg.charCodeAt(msg_len - 1)<<8 | 0x80;
        break;
    }
    word_array.push( i );
    while ( (word_array.length % 16) != 14 )
        word_array.push( 0 );
    word_array.push( msg_len>>>29 );
    word_array.push( (msg_len<<3) & 0x0ffffffff );
    for ( blockstart = 0; blockstart < word_array.length; blockstart += 16 ) {
        for ( i = 0; i < 16; i++ )
            W[i] = word_array[blockstart + i];
        for ( i = 16; i <= 79; i++ )
            W[i] = rotate_left(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
        A = H0;
        B = H1;
        C = H2;
        D = H3;
        E = H4;
        for ( i = 0; i <= 19; i++ ) {
            temp = (rotate_left(A, 5) + ((B & C) | (~B & D)) + E + W[i] + 0x5A827999) & 0x0ffffffff;
            E = D;
            D = C;
            C = rotate_left(B, 30);
            B = A;
            A = temp;
        }
        for ( i = 20; i <= 39; i++ ) {
            temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) & 0x0ffffffff;
            E = D;
            D = C;
            C = rotate_left(B, 30);
            B = A;
            A = temp;
        }
        for ( i = 40; i <= 59; i++ ) {
            temp = (rotate_left(A, 5) + ((B & C) | (B & D) | (C & D)) + E + W[i] + 0x8F1BBCDC) & 0x0ffffffff;
            E = D;
            D = C;
            C = rotate_left(B, 30);
            B = A;
            A = temp;
        }
        for ( i = 60; i <= 79; i++ ) {
            temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) & 0x0ffffffff;
            E = D;
            D = C;
            C = rotate_left(B, 30);
            B = A;
            A = temp;
        }
        H0 = (H0 + A) & 0x0ffffffff;
        H1 = (H1 + B) & 0x0ffffffff;
        H2 = (H2 + C) & 0x0ffffffff;
        H3 = (H3 + D) & 0x0ffffffff;
        H4 = (H4 + E) & 0x0ffffffff;
    }
    var temp = cvt_hex(H0) + cvt_hex(H1) + cvt_hex(H2) + cvt_hex(H3) + cvt_hex(H4);
    return temp.toLowerCase();
}

/*
A C-program for MT19937, with initialization improved 2002/1/26.
Coded by Takuji Nishimura and Makoto Matsumoto.
Before using, initialize the state by using init_genrand(seed)
or init_by_array(init_key, key_length).
Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
3. The names of its contributors may not be used to endorse or promote
products derived from this software without specific prior written
permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
Any feedback is very welcome.
http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
*/

var MersenneTwister = function(seed) {
    if (seed == undefined) {
        seed = new Date().getTime();
    }
    /* Period parameters */
    this.N = 624;
    this.M = 397;
    this.MATRIX_A = 0x9908b0df; /* constant vector a */
    this.UPPER_MASK = 0x80000000; /* most significant w-r bits */
    this.LOWER_MASK = 0x7fffffff; /* least significant r bits */
    this.mt = new Array(this.N); /* the array for the state vector */
    this.mti = this.N + 1; /* mti==N+1 means mt[N] is not initialized */

    this.init_genrand(seed);
}
/* initializes mt[N] with a seed */
MersenneTwister.prototype.init_genrand = function(s) {
    this.mt[0] = s >>> 0;
    for (this.mti = 1; this.mti < this.N; this.mti++) {
        var s = this.mt[this.mti - 1] ^ (this.mt[this.mti - 1] >>> 30);
        this.mt[this.mti] = (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253)
        + this.mti;
        /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
        /* In the previous versions, MSBs of the seed affect */
        /* only MSBs of the array mt[]. */
        /* 2002/01/09 modified by Makoto Matsumoto */
        this.mt[this.mti] >>>= 0;
        /* for >32 bit machines */
    }
}
/* initialize by an array with array-length */
/* init_key is the array for initializing keys */
/* key_length is its length */
/* slight change for C++, 2004/2/26 */
MersenneTwister.prototype.init_by_array = function(init_key, key_length) {
    var i, j, k;
    this.init_genrand(19650218);
    i = 1;
    j = 0;
    k = (this.N > key_length ? this.N : key_length);
    for (; k; k--) {
        var s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30)
        this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + ((s & 0x0000ffff) * 1664525)))
        + init_key[j] + j; /* non linear */
        this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */
        i++;
        j++;
        if (i >= this.N) {
            this.mt[0] = this.mt[this.N - 1];
            i = 1;
        }
        if (j >= key_length)
            j = 0;
    }
    for (k = this.N - 1; k; k--) {
        var s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);
        this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1566083941) << 16) + (s & 0x0000ffff) * 1566083941))
        - i; /* non linear */
        this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */
        i++;
        if (i >= this.N) {
            this.mt[0] = this.mt[this.N - 1];
            i = 1;
        }
    }

    this.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */
}
/* generates a random number on [0,0xffffffff]-interval */
MersenneTwister.prototype.genrand_int32 = function() {
    var y;
    var mag01 = new Array(0x0, this.MATRIX_A);
    /* mag01[x] = x * MATRIX_A for x=0,1 */

    if (this.mti >= this.N) {
        /* generate N words at one time */
        var kk;

        if (this.mti == this.N + 1) /* if init_genrand() has not been called, */
        this.init_genrand(5489); /* a default initial seed is used */

        for (kk = 0; kk < this.N - this.M; kk++) {
            y = (this.mt[kk] & this.UPPER_MASK) | (this.mt[kk + 1] & this.LOWER_MASK);
            this.mt[kk] = this.mt[kk + this.M] ^ (y >>> 1) ^ mag01[y & 0x1];
        }
        for (; kk < this.N - 1; kk++) {
            y = (this.mt[kk] & this.UPPER_MASK) | (this.mt[kk + 1] & this.LOWER_MASK);
            this.mt[kk] = this.mt[kk + (this.M - this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];
        }
        y = (this.mt[this.N - 1] & this.UPPER_MASK) | (this.mt[0] & this.LOWER_MASK);
        this.mt[this.N - 1] = this.mt[this.M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];

        this.mti = 0;
    }

    y = this.mt[this.mti++];

    /* Tempering */
    y ^= (y >>> 11);
    y ^= (y << 7) & 0x9d2c5680;
    y ^= (y << 15) & 0xefc60000;
    y ^= (y >>> 18);

    return y >>> 0;
}
/* generates a random number on [0,0x7fffffff]-interval */
MersenneTwister.prototype.genrand_int31 = function() {
    return (this.genrand_int32()>>>1);
}
/* generates a random number on [0,1]-real-interval */
MersenneTwister.prototype.genrand_real1 = function() {
    return this.genrand_int32() * (1.0 / 4294967295.0);
    /* divided by 2^32-1 */
}

/* generates a random number on [0,1)-real-interval */
MersenneTwister.prototype.random = function() {
    return this.genrand_int32() * (1.0 / 4294967296.0);
    /* divided by 2^32 */
}
/* generates a random number on (0,1)-real-interval */
MersenneTwister.prototype.genrand_real3 = function() {
    return (this.genrand_int32() + 0.5) * (1.0 / 4294967296.0);
    /* divided by 2^32 */
}
/* generates a random number on [0,1) with 53-bit resolution*/
MersenneTwister.prototype.genrand_res53 = function() {
    var a = this.genrand_int32()>>>5, b = this.genrand_int32()>>>6;
    return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0);
}
;
(function() {

    'use strict';

    var tresensaInited = false;
    var tresensaT0 = 0;
    function TreSensaShowAd(ad) {
        if (JoclyPlazza.pzite.tresensa && JoclyPlazza.pzite.tresensa.ad_id &&
        JoclyPlazza.pzite.tresensa.events) {
            var ts = JoclyPlazza.pzite.tresensa;
            if (!tresensaInited) {
                tresensaInited = true;
                TGS.Init({
                    GAME_ID: ts.game_id,
                    ADS: {
                        INTERSTITIAL_PLACEMENT_ID: ts.ad_id,
                        INTERSTITIAL_INTERVAL: ts.ad_interval,
                    }
                });
            }
            if (!ts.events[ad])
                return;
            if (tresensaT0 == 0)
                tresensaT0 = Date.now();
            if (Date.now() - tresensaT0 < (ts.ad_initial || 0) * 1000)
                return;
            var topMask = $("#jocly-top-mask");
            if (topMask.length == 0) {
                topMask = $("<div/>").attr("id", "jocly-top-mask").addClass("jpz-top-mask").appendTo("body");
            }
            topMask.show();
            TGS.Advertisement.DisplayInterstitialAd({
                parentDiv: topMask[0],
                closeCallback: function() {
                    topMask.hide();
                }
            });
        }
    }

    var admobBanners = {};
    var admobInterstitials = {};
    function AdMobShowAd(ad) {
        var admob = JoclyPlazza.pzite.admob;
        if (!admob)
            return;
        if (!window.plugins) {
            console.warn("Jocly: cordova plugins not set");
            return;
        }
        if (!window.plugins.AdMob) {
            console.warn("Jocly: AdMob plugin not set");
            return;
        }
        var adData = admob[ad];
        if (!adData)
            return;

        var am = window.plugins.AdMob;

        function RequestInterstitialAd(adData) {
            am.showInterstitialAd();
            /*
                        am.requestInterstitialAd({ 'isTesting':adData.testing },
            	                function() {
            	                    am.showAd( true );
            	                },
            	                function() {
            	                	console.warn('Jocly: failed to request interstitial ad',ad);
            	                }
            	            );
            	          */
        }

        if (adData.type == "banner") {
            if (admobBanners[ad])
                return;
            admobBanners[ad] = true;
            am.createBannerView({
                'publisherId': adData.id,
                'adSize': am.AD_SIZE[adData.size],
                'bannerAtTop': adData.bannerAtTop,
            },
            function() {
                am.requestAd({
                    'isTesting': adData.testing
                },
                function() {
                    am.showAd( true );
                },
                function() {
                    console.warn('Jocly: failed to request ad', ad);
                });
            },
            function() {
                console.warn('Jocly: failed to create banner view', ad);
            });
        } else if (adData.type == "interstitial") {
            if (!admobInterstitials[ad]) {
                admobInterstitials[ad] = true;
                am.createInterstitialView({
                    //'publisherId': adData.id,
                    'interstitialAdId': adData.id,
                },
                function() {
                    RequestInterstitialAd(adData);
                },
                function() {
                    console.warn('Jocly: failed to create interstitial view', ad);
                });
            } else
                RequestInterstitialAd(adData);
        }
    }

    angular.module('JoclyPlazza').service('JoclyPlazza.ads',
    [ '$rootScope', '$document', 'JoclyPlazza.over', 'JoclyPlazza.translate',
    function($rootScope, $document, jpzOver, jpzTranslate) {

        var products = {};

        function UpdateProducts() {
            products = {};
            if ($rootScope.products)
                for (var id in $rootScope.products)
                    if (/^no_ad[0-9]*$/.test(id))
                        products.no_ad = $rootScope.products[id];
        }

        this.show = function(ad) {
            if (!JoclyPlazza.pzite)
                return;
            UpdateProducts();
            switch (JoclyPlazza.pzite.type) {
            case "tresensa":
                TreSensaShowAd(ad);
                break;
            case "cordova":
                if (products.no_ad && products.no_ad.owned)
                    return;
                AdMobShowAd(ad);
                break;
            }
        }

        $rootScope.$watch('products', function(products) {
            UpdateProducts();
            if (products && products.no_ad && products.no_ad.owned)
                window.plugins.AdMob.destroyBannerView();
        }, true);

        angular.element($document).bind('onPresentInterstitialAd', function() {
            UpdateProducts();
            if (JoclyPlazza.pzite.cordova.premiumAd &&
            products.no_ad && products.no_ad.state != 'invalid') {
                $rootScope.openDialog($rootScope, "/jocly/plazza/partial/premium-dialog", {});
            }
        });

    }
    ]);


})();;

(function() {

    angular.module('JoclyPlazza').directive('pziteToolbar',
    [
    function factory() {
        return {
            priority: 1500,
            templateUrl : '/jocly/plazza/partial-pzite/playlet-toolbar',
            link: function(scope, element, attrs) {
                element.attr("at", "1");
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').controller('pziteNewsCtrl',
    [ '$scope', '$rootScope', 'JoclyPlazza.net', '$window',
    function($scope, $rootScope, jpzNet, $window) {

        $scope.toolbarTitle = $scope.t('news-title');

        $scope.openArticle = function(article) {
            $scope.openExternalLink(article.url);
        }

        $scope.$watch('network.connected', function(connected) {
            if (connected) {
                $.ajax({
                    url: $rootScope.network.connData.baseURL + "plazza/news/",
                    success: function(data) {
                        if (data.status) {
                            $scope.news = data.result.articles;
                            for (var i = 0; i < $scope.news.length; i++) {
                                $scope.news[i].thumbnail = JoclyPlazza.config.baseURL + JoclyPlazza.config.pzPath + "/images/icon-article.png";
                                $scope.news[i].created*=1000;
                            }

                            $scope.$apply();
                        }
                    }
                })
            }
        });

        $scope.getTitle = function() {
            return $scope.t('news-title');
        }

        $scope.getPageId = function() {
            return 'jocly-news';
        }

    }
    ]);
    angular.module('JoclyPlazza').controller('pziteAboutCtrl', [ '$scope', '$location', '$rootScope', '$window', 'JoclyPlazza.layout',
    function($scope, $location, $rootScope, $window, jpzLayout) {

        $scope.backToMain = function() {
            $scope.go('/');
        }

        $scope.goToJocly = function() {
            $window.open("http://www.jocly.com/", "_system", "location=yes");
        }

        $scope.goToJQueryPlugin = function() {
            $window.open("https://github.com/mi-g/jquery-jocly", "_system", "location=yes");
        }
        $scope.goToWiki = function() {
            $window.open("http://wiki.jocly.com", "_system", "location=yes");
        }
        $scope.goToJoclyGames = function() {
            $window.open("http://www.jocly.com/#/games", "_system", "location=yes");
        }

        $scope.toolbarTitle = $scope.t('about-title');

        $scope.getTitle = function() {
            return $scope.t('about-title');
        }

        $scope.getPageId = function() {
            return 'jocly-about';
        }

    }
    ]);

    angular.module('JoclyPlazza').controller('pziteGamesCtrl',
    [ '$scope', '$timeout',
    function($scope, $timeout) {

        $scope.toolbarTitle = $scope.t('supported-games');

        if ($scope.games.length == 1) {
            $scope.go("/game/" + $scope.games[0].name);
            return;
        }

        var forcedGroupForUser = null;
        if (JoclyPlazza.request && JoclyPlazza.request.group) {
            $scope.$watch('pref.user.gamesSet', function(gs) {
                var user = $scope.user.logged ? $scope.user.uid: null;
                if (forcedGroupForUser != user) {
                    forcedGroupForUser = user;
                    $scope.pref.user.gamesSet = "group-" + JoclyPlazza.request.group;
                }
            });
            $scope.pref.user.gamesSet = "group-" + JoclyPlazza.request.group;
        }

        $scope.toggleSearch = function() {
            $scope.features.gameSearching=!$scope.features.gameSearching;
            if ($scope.features.gameSearching)
                $timeout(function() {
                    $(".jpz-game-search input").focus();
                }, 100)
            else
                $scope.features.searchText = '';
        }

        $scope.selectGame = function(game) {
            $scope.go("/game/" + game.name);
        }

        $scope.filterGames = function(game) {
            if (!(game.name in $scope.gamesMap))
                return false;
            var keep = true;
            switch ($scope.pref.user.gamesSet) {
            case 'popular':
            case 'all':
                break;
            case 'favorite':
                keep = game.name in $scope.pref.user.gamesFav;
                break;
            case 'recent':
                break;
            case 'last':
                keep = $scope.pref.device.lastPlayed.indexOf(game.name) >= 0;
                break;
            default:
                keep = false;
                var m = /^group-(.*)$/.exec($scope.pref.user.gamesSet);
                if (m) {
                    var groupAvail = false;
                    $scope.gameGroups.forEach(function(group) {
                        if (group.name == m[1]) {
                            groupAvail = true;
                            if (group.games.indexOf(game.name) >= 0)
                                keep = true;
                        }
                    });
                    if (!groupAvail)
                        keep = true;
                }
            }
            if (keep && $scope.features.searchText && game.title.toLowerCase().indexOf($scope.features.searchText.toLowerCase()) < 0)
                keep = false;
            return keep;
        }

        $scope.sortGames = function(game) {
            switch ($scope.pref.user.gamesSet) {
            case 'popular':
                var gameData = $scope.gamesMap[game.name];
                return gameData?-gameData.popularity || 0 : 0;
            case 'recent':
                return - game.released || 0;
            case 'last':
                return $scope.pref.device.lastPlayed.indexOf(game.name);
            }
            return game.title;
        }

        $scope.getTitle = function() {
            return $scope.t('jocly-games');
        }

        $scope.getPageId = function() {
            return 'jocly-games';
        }

    }
    ]);

    angular.module('JoclyPlazza').controller('pziteGameCtrl',
    [ '$scope', '$routeParams', '$timeout', '$interval', 'JoclyPlazza.layout',
    function($scope, $routeParams, $timeout, $interval, jpzLayout) {

        if (!($routeParams.gameName in $scope.gamesMap)) {
            $scope.go("/unsupported/" + $routeParams.gameName + "/game/" + $routeParams.gameName);
            return;
        }

        if ($scope.ga)
            $scope.ga.track('game-page', $routeParams.gameName);

        $scope.game = $scope.gamesMap[$routeParams.gameName];

        $scope.toolbarTitle = $scope.game.title + " @ Jocly";

        $scope.screenshots = {};
        var imageTimer = null;


        $scope.getModelView($scope.game.name, function(modelView) {
            var view = $.extend(true, {}, modelView.view);
            if (view.visuals && view.visuals["600x600"]) {
                var visuals = view.visuals["600x600"];
                if (!Array.isArray(visuals))
                    visuals = [visuals];
                visuals.forEach(function(visual, index) {
                    visuals[index] = view.fullPath + "/" + visual;
                });
                $scope.screenshots[$scope.game.name] = visuals;
                ShowVisuals(visuals);
            }
        });

        function ShowVisuals(visuals) {
            if (imageTimer) {
                $interval.cancel(imageTimer);
                timer = null;
            }
            var shotCont = $(".pzite-game-screenshot>div");
            shotCont.children(".pzite-game-screenshot-tmp").remove();
            if (visuals) {
                var indexes = [];
                visuals.forEach(function(visual, index) {
                    var image = new Image();
                    shotCont.append($("<div/>").addClass("pzite-game-screenshot-tmp")
                    .addClass("pzite-game-screenshot-invisible")
                    .attr("pzite-game-screenshot-index", index));
                    image.onload = function() {
                        shotCont.children("[pzite-game-screenshot-index=" + index + "]").css({
                            "background-image": "url(" + visual + ")",
                        });
                        indexes.push(index);
                        if (indexes.length == 1)
                            UpdateImage();
                    };
                    image.src = visual;
                });
                var index =- 1;
                function UpdateImage() {
                    if (indexes.length > 0) {
                        index++;
                        index%=indexes.length;
                        shotCont.children().addClass("pzite-game-screenshot-invisible");
                        shotCont.children("[pzite-game-screenshot-index=" + indexes[index] + "]")
                        .removeClass("pzite-game-screenshot-invisible");
                    }
                }
                imageTimer = $interval(UpdateImage, 3000);
                $timeout(UpdateImage, 0);
            } else {
                shotCont.children().removeClass("pzite-game-screenshot-invisible");
            }
        }

        $scope.toggleFavorite = function(gameName) {
            if (gameName in $scope.pref.user.gamesFav)
                delete $scope.pref.user.gamesFav[gameName];
            else
                $scope.pref.user.gamesFav[gameName] = true;
        }

        $scope.isFavorite = function(gameName) {
            return gameName in $scope.pref.user.gamesFav;
        }

        $scope.playComputer = function(gameName) {
            $scope.go('/play/' + gameName);
        }
        $scope.goOpenTables = function(gameName) {
            $scope.go('/open-tables/');
        }
        $scope.openDetails = function(game) {
            jpzLayout.openDialog($scope, "/jocly/plazza/partial/game-details-dial", {
                game: game,
            });
        }

        var loginHandlerSet = false;

        $scope.createTable = function(game) {
            if (!$scope.network.connected) {
                $scope.alert({
                    title: $scope.t('error'),
                    text: $scope.t('live-server-not-connected'),
                });
                return;
            }
            if (!$scope.user.logged) {
                if (!loginHandlerSet) {
                    loginHandlerSet = true;
                    var unwatch = $scope.$watch("user.logged", function(logged) {
                        if (logged) {
                            unwatch();
                            $scope.createTable(game);
                        }
                    });
                }
                $scope.userAuth.startLogin();
                return;
            }
            $scope.pref.device.tableTiming = $scope.pref.device.tableTiming || '3m';
            $scope.pref.device.tableStart = $scope.pref.device.tableStart || 'random';
            jpzLayout.openDialog($scope, "/jocly/plazza/partial/start-turnbased", {
                game: game,
                createTable: function(game) {
                    $scope.peeringObsChannel.send({
                        type: "event",
                        event: "create-table",
                        game: game.name,
                        timing: $scope.pref.device.tableTiming,
                        start: $scope.pref.device.tableStart,
                    });
                },
            });
        }

        $scope.$on("$destroy", function() {
            if (imageTimer) {
                $interval.cancel(imageTimer);
                imageTime = null;
            }
        });

        $scope.backToMain = function() {
            $scope.go('/');
        }

        $scope.goToGames = function() {
            $scope.go('/games');
        }

        $scope.moreOptions = function() {
            jpzLayout.openDialog($scope, "/jocly/plazza/partial/game-more-options", {
                game: $scope.game,
            });
        }

        $scope.isTableWaiting = function() {
            if ($scope.pools && $scope.pools['peersWaiting'])
                for (var id in $scope.pools['peersWaiting']) {
                    var table = $scope.pools['peersWaiting'][id];
                    if (table.game == $routeParams.gameName && table.creator.uid != $scope.user.uid)
                        return true;
                }
            return false;
        }

        $scope.invite = function(game) {
            //console.info("invite","game",game)
            var inviteData = {
                uid: null,
                game: game.name,
                selectUser: 'jocly',
            }
            $scope.pref.user.invitTableTiming = $scope.pref.user.invitTableTiming || '3dpm';
            $scope.pref.user.invitTableStart = $scope.pref.user.invitTableStart || 'random';
            jpzLayout.openDialog($scope, "/jocly/plazza/partial/invite", {
                user: null,
                inviteData: inviteData,
                invite: function(game) {
                    if ((inviteData.user && inviteData.user.uid == $scope.user.uid) ||
                    (inviteData.email && inviteData.email == $scope.user.email))
                        $scope.alert({
                            title: $scope.t('error'),
                            text: $scope.t('pz.cannot-self-invite'),
                        });
                    else
                        $scope.peeringObsChannel.send({
                            type: "event",
                            event: "create-invitation",
                            game: inviteData.game,
                            user: inviteData.user ? inviteData.user.uid: null,
                            email: inviteData.email,
                            timing: $scope.pref.user.invitTableTiming,
                            start: $scope.pref.user.invitTableStart,
                        });
                },
            });

        }

        $scope.swipeGame = function(direction) {
            console.info("swipeHome", direction);
            if (direction == 'right')
                $scope.go("/games");
            else if (direction == 'left')
                $scope.go("/play/" + $routeParams.gameName);
        }

    }
    ]);

    angular.module('JoclyPlazza').directive('pziteGameDetails',
    [ 'JoclyPlazza.user',
    function factory(jpzUser) {
        return {
            templateUrl : '/jocly/plazza/partial/game-details',
            controller : 'jpzGameDetailsCtrl',
            scope : true,
            link: function(scope, element, attrs) {
                scope.selectPlayer = function(uid, game) {
                    jpzUser.openUserInfoDialog(uid, game);
                }
                scope.viewGame = function(gameId) {
                    console.info("gameId", gameId);
                    scope.go("/live/" + gameId);
                    scope.closeDialog();
                }
            }
        }
    }
    ]);

    angular.module('JoclyPlazza').controller('pzitePlayletToolbarCtrl',
    [ '$scope', '$timeout', '$rootScope', 'JoclyPlazza.util', 'JoclyPlazza.layout',
    function($scope, $timeout, $rootScope, jpzUtil, jpzLayout) {

        $scope.openMenu = function() {
            jpzLayout.openDialog($scope, "/jocly/plazza/partial/game-menu", {});
        }

        $scope.requestRestart = function() {
            if ($scope.playlet) {
                if (!$scope.playlet.isGameEnd()) {
                    jpzLayout.confirm({
                        title: $scope.t('confirmation-requested'),
                        text: $scope.t('about-to-restart-game'),
                        confirm: function() {
                            $scope.playlet.restartGame();
                        }

                    });
                } else
                    $scope.playlet.restartGame();
            }
        }

    }
    ]);

    angular.module('JoclyPlazza').directive('pzitePlayer',
    [ '$rootScope', 'JoclyPlazza.util', 'JoclyPlazza.net', 'JoclyPlazza.user', 'JoclyPlazza.ads',
    function factory($rootScope, jpzUtil, jpzNet, jpzUser, jpzAds) {
        return {
            priority: 1500,
            templateUrl : '/jocly/plazza/partial/pzite-player',
            scope: true,
            link: function(scope, element, attrs) {
                var player = attrs.pzitePlayer;
                scope.which = player == 1 ? "A" : "B";
                if (!scope.playlet)
                    scope.player = {};
                scope.buttonClasses = function() {
                    var classes = [];
                    if (scope.playlet)
                        switch (scope.playlet.players[player].state) {
                        case 'playing':
                            classes.push('btn-success');
                            break;
                        case 'winner':
                            classes.push('btn-warning');
                            break;
                        case 'playing-nav':
                            classes.push('btn-info');
                            break;
                        default:
                            classes.push('btn-default');
                        }
                    return classes.join(" ");
                }
                scope.userClasses = function() {
                    var classes = [];
                    if (scope.playlet) {
                        if (scope.playlet.players[player].picture) {
                            classes.push('jicon-empty');
                            classes.push("pzite-user-picture");
                        } else
                            switch (scope.playlet.players[player].type) {
                            case 'self':
                                classes.push('jicon-user');
                                break;
                            case 'computer':
                                classes.push('jicon-jocly-flower');
                                break;
                            default:
                                classes.push('jicon-empty');
                                break;
                            }
                    }
                    return classes.join(" ");
                }

                scope.diodeClasses = function() {
                    var connected = false ;
                    if (scope.network.connected)
                        if (scope.playlet) {
                            var p = scope.playlet.players[player];
                            if (p.uid != $rootScope.user.uid)
                                if (scope.playlet.chatFolks)
                                    if (p.uid in scope.playlet.chatFolks)
                                        connected = true ;
                        }
                    return {
                        "jocly-diode-on": connected,
                        "jocly-diode-off": !connected,
                    }
                }

                function SetupPlaylet() {
                    scope.player = scope.playlet.players[player];
                    var lastPlayed = scope.pref.device.lastPlayed;
                    var lpIndex = lastPlayed.indexOf(scope.playlet.gameName);
                    if (lpIndex >= 0)
                        lastPlayed.splice(lpIndex, 1);
                    lastPlayed.unshift(scope.playlet.gameName);

                    jpzAds.show('gameLoad');

                    if (scope.playlet.features.useSetLevels) {
                        scope.setComputerLevel = function(level) {
                            $.extend(scope.playlet.players[player], {
                                level: level.index,
                                type: 'computer',
                                name: null,
                                picture: null,
                            });
                            jpzUtil.localSave("joclyhub$" + scope.playlet.gameName + "$lvl", level.index);
                            scope.playlet.changedPlayer();
                        };
                        scope.setSelfLevel = function() {
                            $.extend(scope.playlet.players[player], {
                                type: 'self',
                                name: scope.user && scope.user.name ? scope.user.name : null,
                                picture: scope.user && scope.user.picture ? scope.user.picture : null,
                            });
                        };
                    }

                    function HandleClick() {
                        var tooltips = $(".jpz-playlet-player-levels");
                        var tooltip = element.find(".jpz-playlet-player-levels");
                        tooltips.not(tooltip).hide(400);
                        var pos = $(element).offset();
                        tooltip.css({
                            top: pos.top + element.height(),
                            left: Math.max(0, Math.min(
                            pos.left + ($(element).width() - tooltip.width()) / 2,
                            $("body").width() - tooltip.width())),
                        }).toggle(400);
                    }

                    element.bind("click", HandleClick);
                    scope.$on("$destroy", function() {
                        element.unbind("click", HandleClick);
                    });

                    function UpdatePlayers() {
                        ["1", "-1"].forEach(function(which) {
                            var player = scope.playlet.players[which];
                            if (player.type == 'self') {
                                player.picture = scope.user ? scope.user.picture || null : null;
                                player.name = scope.user ? scope.user.name || null : null;
                            }
                        });
                    }

                    scope.$watch('players', function() {
                        UpdatePlayers();
                    }, true);

                    scope.$watch('user', function() {
                        UpdatePlayers();
                    }, true);

                }

                if (scope.playlet)
                    SetupPlaylet();
                else
                    var unwatch = scope.$watch('playlet', function(playlet) {
                        if (playlet) {
                            unwatch();
                            SetupPlaylet();
                        }
                    });

                if (scope.features.closeMenuOnPlaylet)
                    scope.layout.closeLeftMenu();
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('pziteNavToolbar',
    [ 'JoclyPlazza.layout',
    function factory(jpzLayout) {
        return {
            scope: true,
            templateUrl : '/jocly/plazza/partial/pzite-nav-toolbar',
            replace: true,
            link: function(scope, element, attrs) {
                scope.$watch("playlet.features.hasNavigation", function(newValue, oldValue) {
                    scope.$parent.$broadcast("jfxResize", {});
                });
                function SendResize() {
                    scope.$parent.$broadcast("jfxResize", {});
                }
                var pnp = element.find(".pzite-nav-panel");
                jpzLayout.onTransitionEnd(pnp, SendResize);
                scope.$on("$destroy", function() {
                    jpzLayout.offTransitionEnd(pnp, SendResize);
                });
            },
        }
    }
    ]);

    angular.module('JoclyPlazza').controller('pziteBoardDisplayCtrl', [ '$scope', '$rootScope', 'JoclyPlazza.layout', 'JoclyPlazza.ads',
    function($scope, $rootScope, jpzLayout, jpzAds) {

        $scope.canTakeSnapshot = false;

        $scope.notifyDisplay = function() {
            $(".pzite-board").removeClass("pzite-board-loading");
        }

        $scope.sendEmbed = function(message) {
            if (message.type == "move" && message.self)
                jpzAds.show("selfMove");
            if (message.type == "snapshot") {
                var playlet = $scope.playlets[$scope.playletList.current];
                var image = new Image();
                image.onload = function() {
                    jpzLayout.openDialog($scope, "/jocly/plazza/partial/save-snapshot", {
                        image: message.image,
                        size: image.width + ' x ' + image.height,
                        gameTitle: playlet.model.title,
                        gameName: playlet.model.name,
                    });
                }
                image.src = message.image;
            }
            if (message.type == "skin") {
                $scope.canTakeSnapshot = false;
                if ($scope.playletList.current != null) {
                    var playlet = $scope.playlets[$scope.playletList.current];
                    var view = playlet.view;
                    if (view.skins)
                        view.skins.forEach(function(skin) {
                            if (skin.name == message.skin && skin['3d'])
                                $scope.canTakeSnapshot = true;
                            });
                }
                $scope.$apply();
            }
            if (message.type == 'self-turn')
                $rootScope.$broadcast("self-turn", {
                    on: message.on
                });
        }

        $scope.share = function() {
            console.info("share");
        }

        $scope.takeSnapshot = function() {
            if ($scope.playletList.current != null) {
                var playlet = $scope.playlets[$scope.playletList.current];
                var message = {
                    type: "snapshot",
                }
                playlet.sendEventPSM("E_XDVIEW", message);
            }
        }

    }
    ]);

    angular.module('JoclyPlazza').directive('pzitePlayletBoard',
    [
    function factory() {
        return {
            priority: 1000,
            link: function(scope, element, attrs) {
                console.warn("pzitePlayletBoard");
                scope.$parent.notifyDisplay = function() {
                    console.warn("notifyDisplay");
                }
            },
        }
    }
    ]);

    angular.module('JoclyPlazza').controller('pzitePlaylet', [ '$scope', '$location', '$rootScope', '$window', '$document', '$timeout', 'JoclyPlazza.net', 'JoclyPlazza.layout',
    function($scope, $location, $rootScope, $window, $document, $timeout, jpzNet, jpzLayout) {

        if (!$scope.playlet)
            return;

        $scope.playlet.endOfGameScope = $scope;
        if ($scope.playlet.mode == "hvsc")
            $scope.playlet.endOfGameCallbacks['newGame'] = function() {
                $scope.playlet.restartGame();
            }
        $scope.playlet.endOfGameCallbacks['reviewGame'] = function() {
            $scope.playlet.features.hasNavigation = true;
            $scope.playlet.historyIndex =- 1;
            $timeout(function() {
                $scope.navSendCommand("PLAY");
            }, 0);
        }
        $scope.chatSend = function(text) {
            $scope.playlet.chatSend(text);
        }
        $scope.chatSeenSend = function() {
            $scope.playlet.chatSeenSend();
        }
        $scope.$watch('playlet.features.hasChat', function(hasChat) {
            if (hasChat)
                $scope.playlet.unreadChat = false;
        });
        $scope.$on("webrtc-local-media", function(event, data) {
            $scope.playlet.localMedia(data);
        });

    }
    ]);

    angular.module('JoclyPlazza').directive('pziteHistory',
    [
    function factory() {
        return {
            replace: true,
            templateUrl : '/jocly/plazza/partial/pzite-history',
            link: function(scope, element, attrs) {},
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('pziteReviewGameButton',
    [
    function factory() {
        return {
            replace: true,
            templateUrl : '/jocly/plazza/partial/pzite-review-game-button',
            link: function(scope, element, attrs) {
                element.removeClass("jpz-hidden");
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').controller('pziteViewGameCtrl',
    [ '$scope', '$routeParams',
    function($scope, $routeParams) {

        $scope.playletAPI.createAndGoPlaylet({
            baseURL: "https://" + JoclyPlazza.config.shareDomain + "/jocly/",
            gameId: $routeParams.gameId,
            mode: 'view',
            autoPlay: true,
            errorBack: '/games',
        });


    }
    ]);

    angular.module('JoclyPlazza').directive('pzitePlayAnother',
    [
    function factory() {
        return {
            replace: true,
            templateUrl : '/jocly/plazza/partial/pzite-play-another',
            scope: true,
            link: function(scope, element, attrs) {
                if (JoclyPlazza.features.endGamePlayAnother) {
                    var playlet = scope.playlets[scope.playletList.current];
                    var games = [];
                    scope.games.forEach(function(game) {
                        if (game.name != playlet.gameName)
                            games.push(game);
                    });
                    if (games.length > 0) {
                        element.removeClass("jpz-hidden");
                        scope.otherGame = games[Math.floor(Math.random() * games.length)];
                    }
                    scope.playAnotherGame = function() {
                        scope.go('/play/' + scope.otherGame.name);
                    }
                }
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').controller('pziteNetworkCtrl',
    [ '$scope', 'JoclyPlazza.net',
    function($scope, jpzNet) {

        $scope.connect = function() {
            jpzNet.startConnection();
        }

        $scope.disconnect = function() {
            jpzNet.stopConnection();
        }

    }
    ]);

    angular.module('JoclyPlazza').directive('pziteAppToolbar',
    [
    function factory() {
        return {
            priority: 1500,
            templateUrl : '/jocly/plazza/partial-pzite/app-toolbar',
            link: function(scope, element, attrs) {},
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('pziteHtml',
    [ '$compile', function factory($compile) {
        return {
            link : function(scope, element, attrs) {
                element.html(attrs.pziteHtml).show();
                $compile(element.contents())(scope);
            },
        }
    }
    ]);

    angular.module('JoclyPlazza').directive('pziteChat',
    [ '$timeout', 'JoclyPlazza.layout', 'JoclyPlazza.user',
    function factory($timeout, jpzLayout, jpzUser) {
        return {
            scope: true,
            templateUrl : '/jocly/plazza/partial/chat',
            link: function(scope, element, attrs) {
                var jqElement = $(element[0]);
                var jqInput = jqElement.find("input");
                var jqPanel = jqElement.find(".jpz-chat-panel");
                element.addClass("jpz-chat");
                scope.defaultText = attrs.jpzChatText || '';
                scope.useDelete = false;
                if (attrs.jpzChatDelete)
                    scope.useDelete = scope.$eval(attrs.jpzChatDelete);
                jqInput.val(scope.defaultText);
                scope.empty = true;
                scope.emptyChat = false;
                scope.messages = scope.$eval(attrs.jpzChatModel);
                scope.folks = null;
                if (attrs.jpzChatFolks) {
                    scope.$watch(attrs.jpzChatFolks, function(folks) {
                        scope.folks = scope.$eval(attrs.jpzChatFolks);
                    });
                }
                if (attrs.jpzChatSeen && attrs.jpzChatSeenNotify) {
                    scope.$watch(attrs.jpzChatSeen, function(seen) {
                        if (seen)
                            scope.$eval(attrs.jpzChatSeenNotify);
                    });
                }
                scope.closeChat = function() {}
                if (attrs.jpzChatClose)
                    scope.closeChat = function() {
                        scope.$eval(attrs.jpzChatClose);
                    }
                function Clear() {
                    jqInput.val("");
                }
                scope.sendChat = function() {
                    Clear();
                }
                if (attrs.jpzChatSend)
                    scope.sendChat = function() {
                        if (jqInput.val().length > 0)
                            scope.$eval(attrs.jpzChatSend).call(null, jqInput.val());
                            Clear();
                        }
                function DeleteMessages(cids) {
                    $.ajax({
                        url: scope.network.connData.baseURL + "hub/delete-chat/" + scope.network.serverId + "/" + cids.join(":"),
                    });
                }
                scope.deleteChat = function(message) {
                    jpzLayout.openDialog(scope, "/jocly/plazza/partial/chat-delete", {
                        text: message.text,
                        user: message.from.name,
                        deleteMessage: function() {
                            DeleteMessages([message.cid]);
                        },
                        deleteAll: function() {
                            var tbd = [];
                            for (var i = 0; i < scope.messages.length; i++) {
                                var m = scope.messages[i];
                                if (m.from.uid == message.identity.uid)
                                    tbd.push(m.cid)
                            }
                            if (tbd.length > 0)
                                DeleteMessages(tbd);
                        },
                    });
                }

                scope.openUserDialog = function(uid) {
                    jpzUser.openUserInfoDialog(uid);
                }

                scope.getChatTime = function(msg) {

                    var d = new Date(msg.when);
                    return d.toLocaleDateString().substring(0, 5) + " " + d.toLocaleTimeString().substring(0, 5);
                }

                var smileyRE;

                scope.textToHTMLwithSmileys = function(msg) {
                    var text = msg.text;
                    var emoticons = {
                        ':up:' : 'jsmiley-thumb-up.png',
                        ':down:' : 'jsmiley-thumb-down.png',
                        ':(' : 'jsmiley-sad.png',
                        ":'(" : 'jsmiley-sad-tear.png',
                        ':-)' : 'jsmiley-smile.png',
                        ':)' : 'jsmiley-smile.png',
                        ':D' : 'jsmiley-lol.png',
                        ';)' : 'jsmiley-wink.png',
                        ':wtf:' : 'jsmiley-wtf.png',
                        ':oO:' : 'jsmiley-wtf.png',
                        ':wp:' : 'jemotico-chess-wp.png',
                        ':wn:' : 'jemotico-chess-wn.png',
                        ':wr:' : 'jemotico-chess-wr.png',
                        ':wb:' : 'jemotico-chess-wb.png',
                        ':wq:' : 'jemotico-chess-wq.png',
                        ':wk:' : 'jemotico-chess-wk.png',
                        ':bp:' : 'jemotico-chess-bp.png',
                        ':bn:' : 'jemotico-chess-bn.png',
                        ':br:' : 'jemotico-chess-br.png',
                        ':bb:' : 'jemotico-chess-bb.png',
                        ':bq:' : 'jemotico-chess-bq.png',
                        ':bk:' : 'jemotico-chess-bk.png',
                        ':jocly:' : 'jemotico-jocly-flower.png',
                        ':chk:' : 'jemotico-checkers.png',
                        ':lgun:' : 'jemotico-lgun.png',
                        ':rgun:' : 'jemotico-rgun.png',
                        ':napo:' : 'jemotico-napoleon.png'

                    };

                    var url = scope.config.baseURL + scope.config.pzPath + "/images/smileys/";
                    if (!smileyRE)
                        smileyRE = (function() {
                            var patterns = [];
                            var metachars = /[[\]{}()*+?.\\|^$\-,&#\s]/g;
                            for (var i in emoticons)
                                if (emoticons.hasOwnProperty(i))
                                    patterns.push('(' + i.replace(metachars, "\\$&") + ')');
                                    return new RegExp("(.*?)(" + patterns.join('|') + "|$)", 'g');
                                })();
                    var p = $("<p/>");
                    text.split("\n").forEach(function(text, index) {
                        if (/^\s*$/.test(text))
                            return;
                        if (index > 0)
                            p.append($("<br/>"));
                        text.replace(smileyRE, function(m, p1, p2) {
                            if (p1.length > 0)
                                p.append($("<span/>").text(p1));
                            if (typeof emoticons[p2] != 'undefined')
                                p.append($("<img/>").attr("src", url + emoticons[p2]));
                        });
                    });
                    return p.html();
                }

                scope.scrollBottom = function() {
                    jqPanel.stop().animate({
                        scrollTop: jqPanel[0].scrollHeight,
                    }, 400);
                }
                scope.$watch('messages[messages.length-1]', function() {
                    $timeout(function() {
                        scope.scrollBottom();
                    }, 100);
                }, true);

                function HandleFocus() {
                    if (scope.empty) {
                        jqInput.val("");
                        scope.empty = false;
                        scope.$digest();
                    }
                }
                function HandleBlur() {
                    if (jqInput.val().length == 0) {
                        scope.empty = true;
                        jqInput.val(scope.defaultText);
                        scope.$digest();
                    }
                }
                function HandleInput() {
                    scope.empty = jqInput.val().length == 0;
                    scope.emptyChat = jqInput.val().length == 0;
                    scope.$digest();
                }
                function HandleKeydown(event) {
                    if (event.keyCode == 13) {
                        scope.sendChat(jqInput.val());
                        scope.$digest();
                    }
                }
                var jqi = angular.element(jqInput[0]);
                jqi.bind("focus", HandleFocus).bind("blur", HandleBlur)
                .bind("input", HandleInput).bind("keydown", HandleKeydown);
                scope.$on("$destroy", function() {
                    jqi.unbind("focus", HandleFocus).unbind("blur", HandleBlur)
                    .unbind("input", HandleInput).unbind("keydown", HandleKeydown);
                });

                /*
                				scope.$watch("playlet.features.hasChat",function(newValue,oldValue) {
                					if(newValue==false)
                						$timeout(function() {
                							scope.$parent.$broadcast("jfxResize",{});
                						},100);
                				});
                				*/
                function SendResize() {
                    scope.$parent.$broadcast("jfxResize", {});
                }
                var pcp = element.find(".pzite-chat-panel");
                jpzLayout.onTransitionEnd(pcp, SendResize);
                scope.$on("$destroy", function() {
                    jpzLayout.offTransitionEnd(pcp, SendResize);
                });

            },
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('pziteUserButton', [ '$rootScope',
    function factory($rootScope) {
        return {
            scope: true,
            templateUrl : '/jocly/plazza/partial/user-button',
            link: function(scope, element, attrs) {
                var button = angular.element(element.children()[0]);
                /*
                	      		$rootScope.$watch('user',function(user) {
                	      			var url='';
                	      			if(user.userId && user.type!='jocly-guest' && user.picture)
                	      				url="url("+user.picture+")";
                	      			button.css("background-image",url);
                	      		},true);
                	      		*/
                scope.toggleUserPopover = function() {
                    var tooltip = $(element).find(".jpz-user-popover");
                    var pos = $(element).offset();
                    var prevState = tooltip.is(":visible");
                    tooltip.css({
                        top: 25,
                        right: 10,
                        width: "200px",
                    }).toggle(400);
                    if (!prevState)
                        tooltip.css("z-index", scope.openPopoverZIndex());
                    else
                        scope.closePopover();
                };
            },
        };
    }
    ]);


    angular.module('JoclyPlazza').controller('pziteLiveCtrl',
    [ '$scope', '$routeParams', 'JoclyPlazza.net',
    function($scope, $routeParams, jpzNet) {

        var tableId = $routeParams.gameId;

        $scope.playletAPI.createAndGoPlaylet({
            mode: 'livetb',
            gameId: tableId,
            delay: 100,
        });
    }
    ]);

    function TableCtrl($scope, $timeout, jpzLayout, options) {

        options = $.extend({
            openTables: false,
            playingGames: false,
            toolbarTitle: "",
            showStatusTag: false,
            highlightEntry: function() {
                return false;
            },
            pool: function() {
                return {};
            },
            botFilter: false,
        }, options);

        $scope.options = options;

        if (options.toolbarTitle)
            $scope.toolbarTitle = options.toolbarTitle;

        $scope.toggleSearch = function() {
            $scope.features.gameSearching=!$scope.features.gameSearching;
            if ($scope.features.gameSearching)
                $timeout(function() {
                    $(".jpz-search input").focus();
                }, 100)
            else
                $scope.features.searchText = '';
        }

        $scope.canJoinTable = function(table) {
            return table.status == 'open' && $scope.user.uid && table.creator && table.creator.uid != $scope.user.uid;
        }

        var loginHandlerSet = false;

        $scope.joinTable = function(table) {
            if (!$scope.user.logged) {
                if (!loginHandlerSet) {
                    loginHandlerSet = true;
                    var unwatch = $scope.$watch("user.logged && peeringObsChannel", function(logged) {
                        if (logged) {
                            unwatch();
                            $scope.joinTable(table);
                        }
                    });
                }
                $scope.userAuth.startLogin();
                return;
            }
            $scope.peeringObsChannel.send({
                type: "event",
                event: "join-table",
                tableId: table.id,
            });
        }

        $scope.canAnswerInvitation = function(table) {
            return table.status == 'invitation' && $scope.user.uid && table.creator && table.creator.uid != $scope.user.uid;
        }

        $scope.answerInvitation = function(table, accept) {
            $scope.peeringObsChannel.send({
                type: "event",
                event: "answer-invitation",
                tableId: table.id,
                accept: accept,
            });
        }

        $scope.canDeleteTable = function(table) {
            return (table.status == 'open' || table.status == 'invitation') && $scope.user.uid &&
            table.creator && table.creator.uid == $scope.user.uid;
        }

        $scope.deleteTable = function(table) {
            $scope.peeringObsChannel.send({
                type: "event",
                event: "delete-table",
                tableId: table.id,
            });
        }

        $scope.select = function(table) {
            if (table.status == 'playing' || table.status == 'played')
                $scope.go("/live/" + table.id);
            else
                jpzLayout.openDialog($scope, "/jocly/plazza/partial/table-dialog", {
                    game: $scope.gamesMap[table.game],
                    table: table,
                    selfTable: table.creator && $scope.user.uid == table.creator.uid,
                    canJoinTable: function(table) {
                        return $scope.canJoinTable(table);
                    },
                    joinTable: function(table) {
                        $scope.joinTable(table);
                    },
                    canDeleteTable: function(table) {
                        return $scope.canDeleteTable(table);
                    },
                    deleteTable: function(table) {
                        $scope.deleteTable(table);
                    },
                    canAnswerInvitation: function(table) {
                        return $scope.canAnswerInvitation(table);
                    },
                    answerInvitation: function(table, accept) {
                        $scope.answerInvitation(table, accept);
                    },
                });
        }

        $scope.isShortTableTiming = function(table) {
            var timing = $scope.timingDecode(table.timing);
            return timing && timing.duration < 14400;
        }

        $scope.filterTables = function(table) {
            var keep = true;
            switch ($scope.pref.user.openTablesSet) {
            case 'short':
                keep = $scope.isShortTableTiming(table);
                break;
            case 'long':
                keep=!$scope.isShortTableTiming(table);
                break;
            }
            if (keep && $scope.features.searchText &&
            $scope.gamesMap[table.game].title.toLowerCase().indexOf($scope.features.searchText.toLowerCase()) < 0 &&
            (!table.creator || table.creator.name.toLowerCase().indexOf($scope.features.searchText.toLowerCase()) < 0))
                keep = false;
            if (keep && options.botFilter && table.bot && $scope.pref.device.botFilter)
                keep = false;
            return keep;
        }

        $scope.sortTables = function(table) {
            switch (table.status) {
            case 'open':
                if (table.bot)
                    return 200 + 1 / Math.log(table.created);
                return 100 + 1 / Math.log(table.created);
            case 'playing':
                return - 1 / Math.log(table.expiry[table.who]);
            case 'invitation':
                if (table.recipient && table.recipient.uid == $scope.user.uid)
                    return - 100 - 1 / Math.log(table.expiry);
                else if ($scope.user.providers &&
                table.recipientData &&
                $scope.user.providers[table.recipientData.service] == table.recipientData.id)
                    return - 100 - 1 / Math.log(table.expiry);
                else
                    return 200 - 1 / Math.log(table.expiry);
            }
        }

        $scope.emptyPool = function(pool) {
            for (var i in pool)
                return false;
            return true;
        }

    }

    angular.module('JoclyPlazza').controller('pziteOpenTablesCtrl',
    [ '$scope', '$timeout', 'JoclyPlazza.layout',
    function($scope, $timeout, jpzLayout) {
        TableCtrl($scope, $timeout, jpzLayout, {
            pool: function() {
                return $scope.pools['peersWaiting'];
            },
            toolbarTitle: $scope.t('pz.tb-title-open-tables'),
            botFilter: true,
        });

        $scope.getTitle = function() {
            return $scope.t('open-tables');
        }

        $scope.getPageId = function() {
            return 'open-tables';
        }

        $scope.hasBots = function() {
            if ($scope.pools && $scope.pools['peersWaiting'])
                for (var id in $scope.pools['peersWaiting']) {
                    var table = $scope.pools['peersWaiting'][id];
                    if (table.bot)
                        return true;
                }
            return false;
        }

    }
    ]);

    angular.module('JoclyPlazza').controller('pziteRunningTablesCtrl',
    [ '$scope', '$timeout', 'JoclyPlazza.layout', 'JoclyPlazza.user',
    function($scope, $timeout, jpzLayout, jpzUser) {
        TableCtrl($scope, $timeout, jpzLayout, {
            pool: function() {
                return $scope.pools['runningGames'];
            },
            toolbarTitle: $scope.t('pz.tb-title-playing-tables'),
        });

        $scope.getTitle = function() {
            return $scope.t('playing-tables');
        }

        $scope.getPageId = function() {
            return 'playing-games';
        }

        $scope.selectPlayer = function(uid, game) {
            jpzUser.openUserInfoDialog(uid, game);
        }
    }
    ]);

    angular.module('JoclyPlazza').controller('pziteSelfTablesCtrl',
    [ '$scope', '$timeout', 'JoclyPlazza.layout', 'JoclyPlazza.user',
    function($scope, $timeout, jpzLayout, jpzUser) {
        TableCtrl($scope, $timeout, jpzLayout, {
            pool: function() {
                return $scope.myGames;
            },
            toolbarTitle: $scope.t('pz.tb-title-self-tables'),
            showStatusTag: true,
            highlightEntry: function(table) {
                if (table.status == 'playing' &&
                ((table.who == 1 && table.playerA.uid == $scope.user.uid) ||
                (table.who==-1 && table.playerB.uid == $scope.user.uid)))
                    return true;
                if (table.status == 'invitation' && table.recipient && table.recipient.uid == $scope.user.uid)
                    return true;
                if ($scope.user.providers &&
                table.recipientData &&
                $scope.user.providers[table.recipientData.service] == table.recipientData.id)
                    return true;

                return false;
            },
        });

        $scope.getTitle = function() {
            return $scope.t('self-tables');
        }

        $scope.getPageId = function() {
            return 'my-tables';
        }

        $scope.selectPlayer = function(uid, game) {
            jpzUser.openUserInfoDialog(uid, game);
        }
    }
    ]);

    angular.module('JoclyPlazza').controller('pzitePlayedGamesCtrl',
    [ '$scope', '$routeParams', '$timeout', '$rootScope', 'JoclyPlazza.net', 'JoclyPlazza.layout', 'JoclyPlazza.user',
    function($scope, $routeParams, $timeout, $rootScope, jpzNet, jpzLayout, jpzUser) {

        if ($routeParams.gameName && !($routeParams.gameName in $scope.gamesMap)) {
            $scope.go("/unsupported/" + $routeParams.gameName + "/played/" + $routeParams.gameName);
            return;
        }

        $scope.forcedGame = $routeParams.gameName || null;

        var games = [];
        $scope.games.forEach(function(game) {
            games.push(game.name);
        });

        var playedGames = {}, playedGamesCount = 0;
        $scope.hasMore = false;

        function RequestGames(reset) {
            var urlParams = {
                gameset: $scope.gameSetId,
            };
            if ($scope.features.gameSearching) {
                if ($scope.search.game != '~')
                    urlParams.games = $scope.search.game;
                if ($scope.search.hasBefore)
                    urlParams.before = $scope.search.before;
                if ($scope.search.hasAfter)
                    urlParams.after = $scope.search.after;
                if (!/^ +$/.test($scope.search.player))
                    urlParams.player = $scope.search.player;
            }

            if ($scope.pref.user.gamesPlayedByTab == 'self' && $scope.user.logged)
                urlParams.user = $scope.user.uid;
            if (!reset)
                urlParams.skip = playedGamesCount;
            if ($scope.forcedGame)
                urlParams.games = $scope.forcedGame;

            var url = $scope.network.liveBaseURL + "/played-games";
            $.ajax({
                url: url,
                dataType: 'jsonp',
                crossDomain: true,
                data: urlParams,
                success: function(data) {
                    if (data.status) {
                        $scope.hasMore = data.result.hasMore;
                        if (reset)
                            for (var id in playedGames)
                                delete playedGames[id];
                        for (var i = 0; i < data.result.games.length; i++) {
                            var game = data.result.games[i];
                            playedGames[game.id] = game;
                        }
                        playedGamesCount = 0;
                        for (var id in playedGames)
                            playedGamesCount++;
                    }
                },
                error: function() {
                    console.info("Failed getting played games", arguments);
                },
                complete: function() {
                    if (!$scope.$$phase)
                        $scope.$apply();
                },
            });
        }

        $scope.$watch('network.connected', function(connected) {
            if (connected)
                RequestGames(true);
        });

        $scope.$watch('pref.user.gamesPlayedByTab', function(value) {
            if ($scope.network.connected)
                RequestGames(true);
        });

        TableCtrl($scope, $timeout, jpzLayout, {
            pool: function() {
                return playedGames;
            },
            toolbarTitle: $scope.t('pz.tb-title-played-games'),
        });

        $scope.more = function() {
            RequestGames(false);
        }

        $scope.toLocaleDateString = function(timestamp) {
            return new Date(timestamp).toLocaleDateString();
        }

        $scope.defaultSearch = {
            game: '~',
            hasBefore: false,
            before: Math.floor(Date.now() / 1000),
            hasAfter: false,
            after: Math.floor(Date.now() / 1000 - 86400 * 7),
            player: '',
        }

        $scope.search = angular.extend({}, $scope.defaultSearch);

        $scope.$watch('search', function(search) {
            if ($scope.features.gameSearching)
                RequestGames(true);
        }, true);

        $scope.getTitle = function() {
            return $scope.t('last-played-games');
        }

        $scope.getPageId = function() {
            return 'archived-games';
        }

        $scope.selectPlayer = function(uid, game) {
            jpzUser.openUserInfoDialog(uid, game);
        }
    }
    ]);


    angular.module('JoclyPlazza').directive('pziteGameAction', [ '$rootScope',
    function factory($rootScope) {
        return {
            templateUrl : '/jocly/plazza/partial/game-action',
            replace: true,
            link: function(scope, element, attrs) {
                if (attrs.pziteGameActionImage)
                    element.find(".pzite-game-action-image")
                    .css("background-image", "url(" + JoclyPlazza.config.baseURL + JoclyPlazza.config.pzPath + "/" + attrs.pziteGameActionImage + ")");
                if (attrs.pziteGameActionText)
                    element.find(".pzite-game-action-text").text(attrs.pziteGameActionText);
                function HandleClick() {
                    scope.$eval(attrs.pziteGameAction);
                    if (!scope.$$phase)
                        scope.$apply();
                }
                element.bind("click", HandleClick);
                scope.$on("$destroy", function() {
                    element.unbind("click", HandleClick);
                });
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('pziteProgressBar',
    [
    function factory() {
        return {
            scope: {},
            template: "<div style='right: {{value}}%;'></div>",
            replace: true,
            link: function(scope, element, attrs) {
                element.addClass("pzite-progress-bar");
                scope.value = undefined;
                scope.update = function(value) {
                    var oldValue = scope.value;
                    scope.value = 100 - Math.min(100, Math.max(0, value));
                    if (oldValue != value && !scope.$$phase)
                        scope.$digest();
                }
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('pziteTimer',
    [ '$rootScope', '$window',
    function factory($rootScope, $window) {
        return {
            scope: {},
            template: "{{value}}",
            link: function(scope, element, attrs) {
                element.hide();
                var timer = null;
                var unwatchHandler = null;
                function TimeToText(value) {
                    value = Math.floor(value / 1000);
                    var days = Math.floor(value / 86400);
                    value%=86400;
                    var hours = Math.floor(value / 3600);
                    value%=3600;
                    var minutes = Math.floor(value / 60);
                    var seconds = value%60;
                    var str = "";
                    if (data.short) {
                        if (days > 3)
                            str += $rootScope.t('d', {
                                '@days': days
                            });
                        else if (days > 0) {
                            if (hours > 0)
                                str += $rootScope.t('dh', {
                                    '@days': days,
                                    '@hours': hours
                                });
                            else
                                str += $rootScope.t('d', {
                                    '@days': days
                                });
                        } else if (hours > 3)
                            str += $rootScope.t('h', {
                                '@hours': hours
                            });
                        else if (hours > 0) {
                            if (minutes > 0)
                                str += $rootScope.t('hm', {
                                    '@hours': hours,
                                    '@min': minutes
                                });
                            else
                                str += $rootScope.t('h', {
                                    '@hours': hours
                                });
                        } else {
                            str += minutes + ':';
                            if (seconds < 10)
                                str += '0';
                            str += seconds;
                        }
                    } else {
                        if (days > 0)
                            str += $rootScope.t("d", {
                                '@days': days
                            }) + " ";
                        if (days > 0 || hours > 0)
                            str += hours + ":";
                        if (days == 0 && hours == 0 && minutes == 0)
                            str += "0";
                        else if (minutes < 10)
                            str += "0" + minutes;
                        else
                            str += minutes;
                        str += ":";
                        if (seconds < 10)
                            str += "0" + seconds;
                        else
                            str += seconds;
                    }
                    return str;
                }
                var t0 = Date.now();
                var data = {
                    min: 0,
                    max: Infinity,
                    mode: 'empty',
                    time: 0,
                    short: false,
                    show: true,
                    delta: 0,
                    display: true,
                }
                function UpdateText(time) {
                    var oldValue = scope.value;
                    switch (data.mode) {
                    case "static":
                        time = data.time;
                        break;
                    case "countdown":
                        time =- time;
                        break;
                    case "forward":
                        time = time + data.delta;
                        break;
                    }
                    data.time = time;
                    if (data.mode == "empty" || data.display == false)
                        scope.value = "";
                    else
                        scope.value = TimeToText(Math.max(data.min, Math.min(data.max, time)));
                    if (scope.value != oldValue && !$rootScope.$$phase)
                        scope.$digest();
                    if (timer &&
                    ((data.mode == "countdown" && time <= data.min) ||
                    (data.mode == "forward" && time >= data.max))) {
                        $window.clearInterval(timer);
                        timer = null;
                    }
                }
                function Interval() {
                    var ms = Date.now();
                    var time = ms - t0;
                    UpdateText(time);
                }
                scope.update = function(d) {
                    //console.info("update",d);
                    if (timer) {
                        $window.clearInterval(timer);
                        timer = null;
                    }
                    if (d.model) {
                        if (unwatchHandler)
                            unwatchHandler();
                        var expr = "(" + d.model + ")+'$'+serverTimeDiff";
                        unwatchHandler = scope.$parent.$watch(expr, function(value) {
                            var time = scope.$parent.$eval(d.model);
                            if ((d.mode || data.mode) == 'countdown')
                                time += scope.$parent.serverTimeDiff - Date.now();
                            scope.update({
                                run: true,
                                mode: data.mode,
                                time: time,
                            });
                        });
                    }
                    if (d.run !== undefined) {
                        if (d.mode == "countdown") {
                            t0 = Date.now() + (d.time || 0);
                            data.run = true;
                        } else if (d.mode == "forward") {
                            t0 = Date.now();
                            data.run = true;
                        }
                    }
                    $.extend(data, d);
                    if (data.show)
                        element.show();
                    else
                        element.hide();
                    if ((data.mode == "countdown" || data.mode == "forward") && data.run)
                        timer = $window.setInterval(Interval, 250);
                    Interval();
                    if (d.run === false) {
                        data.delta = data.time;
                    } else if (d.run === undefined)
                        data.delta = 0;
                }
                scope.update($rootScope.$eval(attrs.pziteTimer || "{}"));
                scope.$on("$destroy", function() {
                    if (timer)
                        $window.clearInterval(timer);
                    if (unwatchHandler)
                        unwatchHandler();
                });
            },
        };
    }
    ]);

    angular.module('JoclyPlazza').directive('pziteEmergencyButton',
    [ '$rootScope', 'JoclyPlazza.layout',
    function factory($rootScope, jpzLayout) {
        return {
            scope: true,
            replace: true,
            templateUrl : '/jocly/plazza/partial/emergency-button',
            link: function(scope, element, attrs) {
                var currentGameId = null;
                if (scope.playlet && scope.playlet.options && scope.playlet.options.mode == 'livetb')
                    currentGameId = scope.playlet.options.gameId;
                function MyTables() {
                    var tables = [];
                    for (var gid in scope.myGames) {
                        var table = scope.myGames[gid];
                        if (table.status == 'playing' && gid != currentGameId && (
                        (table.who == 1 && table.playerA.uid == scope.user.uid) ||
                        (table.who==-1 && table.playerB.uid == scope.user.uid)
                        ))
                            tables.push(table);
                        else if (table.status == "invitation" && table.recipient && table.recipient.uid == scope.user.uid)
                            tables.push(table);
                        else if ($rootScope.user.providers &&
                        table.recipientData &&
                        $rootScope.user.providers[table.recipientData.service] == table.recipientData.id)
                            tables.push(table);
                    }
                    tables.sort(function(a, b) {
                        return b.expiry - a.expiry;
                    });
                    return tables;
                }
                scope.count = function() {
                    if (!currentGameId)
                        return scope.myGamesSelfTurn;
                    else
                        return MyTables().length;
                }
                scope.click = function() {
                    var tables = MyTables();
                    if (tables.length > 0) {
                        if (tables[0].status == "playing")
                            scope.go("/live/" + tables[0].id);
                        else if (tables[0].status == "invitation")
                            jpzLayout.openDialog(scope, "/jocly/plazza/partial/table-dialog", {
                                game: scope.gamesMap[tables[0].game],
                                table: tables[0],
                                selfTable: false,
                                canJoinTable: function(table) {
                                    return false;
                                },
                                canDeleteTable: function(table) {
                                    return false;
                                },
                                canAnswerInvitation: function(table) {
                                    return true;
                                },
                                answerInvitation: function(table, accept) {
                                    scope.peeringObsChannel.send({
                                        type: "event",
                                        event: "answer-invitation",
                                        tableId: tables[0].id,
                                        accept: accept,
                                    });
                                },
                            });
                    }
                }
            },
        }
    }
    ]);

    angular.module('JoclyPlazza').directive('pzitePlayerPresent',
    [ '$rootScope',
    function factory($rootScope) {
        return {
            scope: true,
            template: "<div></div>",
            link: function(scope, element, attrs) {
                element.addClass("pzite-player-present");
                scope.presentAndNotSelf = function(who) {
                    var player = scope.playlet.players[who];
                    if (player.uid == $rootScope.user.uid)
                        return false;
                    return (player.uid in scope.playlet.chatFolks);
                }
            },
        }
    }
    ]);

    angular.module('JoclyPlazza').controller('pziteBestPlayersCtrl',
    [ '$scope', '$routeParams', '$timeout', '$rootScope', 'JoclyPlazza.net', 'JoclyPlazza.layout', 'JoclyPlazza.user',
    function($scope, $routeParams, $timeout, $rootScope, jpzNet, jpzLayout, jpzUser) {

        if (!($routeParams.gameName in $scope.gamesMap)) {
            $scope.go("/unsupported/" + $routeParams.gameName + "/best-players/" + $routeParams.gameName);
            return;
        }

        $scope.players = {};
        $scope.playersCount = 0;

        $scope.toolbarTitle = $scope.t("best-game-players", {
            '@game': $scope.gamesMap[$routeParams.gameName].title
        });

        function UpdatePlayers(reset) {
            if (reset) {
                $scope.players = {};
                $scope.playersCount = 0;
            }
            var urlParams = {
                game: $routeParams.gameName,
            };
            var url = $scope.network.liveBaseURL + "/elo";
            if (!reset && $scope.playersCount > 0)
                urlParams.skip = $scope.playersCount;
            $.ajax({
                url: url,
                dataType: 'jsonp',
                crossDomain: true,
                data: urlParams,
                success: function(data) {
                    console.info("Got elos", data);
                    if (data.status) {
                        $scope.hasMore = data.result.hasMore;
                        if (reset)
                            for (var id in $scope.players)
                                delete $scope.players[id];
                        for (var i = 0; i < data.result.elos.length; i++) {
                            var elo = data.result.elos[i];
                            $scope.players[elo.uid] = elo;
                        }
                        $scope.playersCount = 0;
                        for (var id in $scope.players)
                            $scope.playersCount++;
                    }
                },
                error: function() {
                    console.info("Failed getting elos", arguments);
                },
                complete: function() {
                    if (!$scope.$$phase)
                        $scope.$apply();
                },
            });
        }

        $scope.sortElos = function(elo) {
            return - elo.elo;
        }

        $scope.more = function() {
            UpdatePlayers(false);
        }

        $scope.$watch('network.connected', function(connected) {
            UpdatePlayers(true);
        });

        $scope.selectPlayer = function(uid) {
            jpzUser.openUserInfoDialog(uid, $routeParams.gameName);
        }

    }
    ]);

    angular.module('JoclyPlazza').controller('pziteDebugCtrl',
    [ '$scope',
    function($scope) {

        $scope.configData = JSON.stringify(JoclyPlazza.config, null, 2);
        $scope.pziteData = JSON.stringify(JoclyPlazza.pzite, null, 2);
        $scope.$watch('network', function() {
            $scope.networkData = JSON.stringify($scope.network, null, 2);
        }, true);
        $scope.$watch('user', function() {
            $scope.userData = JSON.stringify($scope.user, null, 2);
        }, true);
        $scope.$watch('pref', function() {
            $scope.prefData = JSON.stringify($scope.pref, null, 2);
        }, true);
    }
    ]);

    angular.module('JoclyPlazza').controller('pziteUnsupportedCtrl',
    [ '$scope', '$routeParams',
    function($scope, $routeParams) {

        $scope.linkMainSite = $scope.config.cmsURL + "jocly/plazza/index.html";
        if ($routeParams.param1)
            if ($routeParams.param2)
                $scope.linkMainSite += "#/" + $routeParams.param1 + "/" + $routeParams.param2;
            else
                $scope.linkMainSite += "#/live/" + $routeParams.param1;
        $scope.gameName = $routeParams.gameName;
    }
    ]);


})();;
